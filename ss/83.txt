ПОСТРОЕНИЕ АДАПТИВНОЙ РЕГУЛЯРНОЙ СЕТКИ ТРЕХМЕРНОЙ СЦЕНЫ В РЕАЛЬНОМ РЕЖИМЕ ВРЕМЕНИ 

Предлагаются новые методы и алгоритмы построения и заполнения в реальном режиме времени структуры ускорения, основанной на регулярной сетке, для системы трассировки лучей в трехмерных виртуальных сценах. Описанные методы и алгоритмы используют архитектуру параллельных вычислений CUDA и подходят как для статических, так и для динамических сцен.

 Приоритетным направлением в области компьютерной графики является улучшение качества создаваемого компьютером изображения и максимально возможное приближение его к существующей действительности. Один из способов получения так называемого фотореалистичного изображения обратная трассировка лучей, которая заключается в прослеживании траектории распространения лучей света между глазом наблюдателя и источниками света в трехмерной виртуальной сцене. Простейший подход основывается на тестировании каждого луча с каждым полигоном на предмет их пересечения, но при количестве полигонов, превышающем несколько десятков и сотен тысяч, и высоком разрешении визуализируемой картинки эта задача становится слишком сложной для реализации в реальном режиме времени даже на самых современных компьютерах. С целью сокращения времени, требуемого для генерации изображения, были разработаны алгоритмы, которые перед выполнением трассировки лучей строят так называемые структуры ускорения. При этом трассировка одного луча не перебирает все треугольники сцены для проверки пересечения с этим лучом, а с помощью структуры ускорения выбирает из них некоторое подмножество. Так, например, регулярная сетка это разбиение всего пространства виртуальной сцены плоскостями, параллельными плоскостям мировой системы координат, на трехмерные ячейки одинакового размера, каждой из которых соответствует список полигонов, пересекающих эту ячейку. Построив сетку виртуальной сцены, для каждого луча можно вычислить последовательность ячеек, через которые он проходит, и тестировать луч на пересечение только с полигонами, принадлежащими этим ячейкам. Основным недостатком алгоритмов построения структур ускорения является сложность их адаптации к динамическим сценам, в которых многие объекты могут менять свой размер, положение и ориентацию от кадра к кадру. Проблема заключается в довольно значительных временных затратах, требующихся для создания такой структуры, что приводит к невозможности перестроения ее в каждом кадре. В данной статье предлагаются новые методы и алгоритмы создания и заполнения структуры ускорения на основе регулярной сетки, использующие параллельные вычисления на графических процессорах компании nVidia с поддержкой технологии CUDA. Представленные методы и алгоритмы дают возможность на порядок ускорить время построения регулярной сетки для статических сцен и перестраивать ее в реальном режиме времени для динамических. Кроме того, для динамических сцен сетка является адаптивной, то есть подстраивается под размеры сцены, которые могут изменяться от кадра к кадру. Этапы формирования регулярной сетки для трехмерной сцены Построение и заполнение регулярной сетки трехмерной виртуальной сцены, состоящей из полигональных объектов, включают несколько основных этапов. Определение ограничивающего параллелепипеда сцены, стороны которого параллельны координатным плоскостям XY, YZ и ZX мировой системы координат WCS . Разбиение AABB сцены плоскостями, параллельными XY, YZ и ZX, на множество кубических ячеек, называемых вокселами. Составление таблицы, хранящей для каждого воксела номера треугольников, с которыми он пересекается. Для обеспечения реального режима времени составление таблицы, хранящей для каждого воксела номера треугольников, с которыми он пересекается, должно быть реализовано с малыми вычислительными затратами. Существуют два основных подхода к составлению такой таблицы. Первый это пройти по всем вокселам и некоторым образом определить относящиеся к ним треугольники, например, перебором всех треугольников для каждого воксела. В этом случае, принимая за элементарную операцию тест пересечения одного полигона с одним вокселом регулярной сетки, получим M N K t операций, где M, N, K размерность AABB сцены в вокселах по осям X, Y и Z соответственно t количество треугольников в сцене. Второй подход пройти по всем полигонам, определив, какие вокселы каждый из них пересекает. Тогда, если MNK, количество элементарных операций будет не больше M N t, поскольку максимально возможное число вокселов, занимаемых одним треугольником, равно M N. Однако в таком случае, чтобы составить таблицу, хранящую для каждого воксела номера треугольников, с которыми он пересекается, необходим свой быстрый и эффективный алгоритм. В данной работе предлагается решение, в основе которого лежит второй из описанных выше подходов, позволяющее обеспечить построение и заполнение регулярной сетки динамической сцены в реальном режиме времени. Алгоритм построения и заполнения регулярной сетки сцены На рисунке 2 представлена общая схема предлагаемого алгоритма построения регулярной сетки трехмерной виртуальной сцены. Поскольку этот процесс весьма трудоемкий, в основе данного алгоритма лежит использование параллельных вычислений с помощью многоядерных процессоров фирмы nVidia с поддержкой технологии CUDA. Так, например, чип gt200b содержит 240 ядер, что позволяет одновременно обрабатывать 240 потоков в режиме SIMD . Подробная информация об архитектуре таких процессоров и основных принципах программирования с применением технологии CUDA изложена в 1. Идею предлагаемого алгоритма можно описать следующим образом. Для начала необходимо загрузить в память видеоадаптера с поддержкой технологии CUDA координаты вершин треугольников, представленные в локальных системах тех объектов, которым они принадлежат, и матрицы перехода из локальных систем в мировую WCS. Далее нужно найти координаты всех загруженных вершин в мировой системе координат WCS и определить AABB каждого треугольника сцены в виде пары минимальной B и максимальной B вершин бокса. Графический процессор фирмы nVidia содержит P мультипроцессоров, каждый из которых состоит из P универсальных процессоров. Числа P и P зависят от архитектуры чипа GPU. Разобьем совокупности ранее найденных вершин B и B AABB всех n треугольников сцены на группы по h элементов, где h максимально возможное число потоков в GPU. Каждая группа будет обрабатываться на одном из P мультипроцессоров. Процесс повторяется до тех пор, пока не будет получен один общий минимум для AABB всей сцены. Если операция нахождения минимума двух чисел занимает один такт, то нахождение минимума из n элементов с использованием описанного алгоритма параллельного вычисления составляет не более n t c P P тактов, где с константа . Формула для вычисления размера сетки А является эвристической. Имея характеристики сетки сцены, необходимо определить, каким вокселам какие треугольники сцены принадлежат. На рисунке 3 показан пример Cи T-массива, где треугольнику 0 соответствуют вокселы с номерами 3, 4, 5, треугольнику 1 воксел 0 и т.д. Так как в технологии CUDA нет возможности динамического выделения глобальной памяти в процессе выполнения ядра, выделять память под TC-массив необходимо заранее. Кроме того, для каждого потока, обрабатывающего свой треугольник, необходимо знать смещение в TC-массиве, с которого этот поток будет начинать запись данных. Поэтому для начала нужно рассчитать число ячеек сетки, занимаемых каждым треугольником, и сумму таких чисел по всем треугольникам. Поскольку на данном шаге необходимо знать лишь максимальное количество ячеек под каждый треугольник, чтобы сделать выделение памяти, с целью ускорения вычислений можно ограничиться грубой оценкой, то есть количеством ячеек, которые пересекают AABB каждого треугольника. Это можно сделать с помощью функции сканирования cudppScan массива из библиотеки CUDPP . На вход cudppScan подается числовой массив длиной n, а на выходе получается массив длиной n1, в каждом элементе 0in которого записана сумма всех элементов от 0 до i-1 входного массива, а нулевой элемент равен 0. Подробнее ознакомиться с библиотекой cudpp и ее функциями можно в 3. Укажем в качестве входа cudppScan созданный ранее массив, каждый элемент i которого содержит количество вокселов сетки сцены, занимаемых AABB треугольника с номером i. Тогда на выходе получим таблицу смещений в TCмассиве для каждого потока и размер TC-массива. Рассмотрим алгоритм определения номеров ячеек сетки, занимаемых некоторым треугольником с нормалью n к его поверхности. Спроецируем сетку сцены и треугольник на одну из плоскостей XY, ZY или XZ мировой системы координат в зависимости от того, какая из координат нормали n, n или n является большей по модулю. Такой выбор плоскости позволяет исключить вероятность того, что проекцией треугольника будет отрезок. Пусть, например, n максимальная по модулю координата нормали n. Тогда в качестве плоскости проецирования будет выбрана плоскость XY. Проведем растеризацию полученного треугольника-проекции, в ходе которой определим для каждого слоя j ячеек по оси Y индексы i и i минимальной и максимальной ячеек по X, пересекающихся с треугольником . Далее для каждого индекса i из i, i каждого слоя j следует определить отрезок из ячеек, расположенных параллельно оси z и пересекающихся с плоскостью треугольника . Для каждого отрезка получим четыре точки его пересечения с плоскостью треугольника, среди которых выберем две с минимальной z и максимальной z z-координатой . По z и z вычислим минимальный k и максимальный k индексы ячеек отрезка, которые пересекают треугольник. И, наконец, в рассматриваемом отрезке для всех ячеек с индексами по z от k до k по формуле определим номера, которые в паре с номером треугольника запишем в TC-массив. Выполнив ядро 4, получаем заполненный TC-массив, отсортированный по номерам треугольников. Такое представление неудобно для дальнейшего использования. Действительно, зная номер ячейки сетки сцены, необходимо делать полный перебор C-массива, чтобы найти индексы, обращаясь по которым в T-массив, уже можно будет составить список принадлежащих этой ячейке треугольников. Чтобы перейти от представления TC-массива, где пары треугольникячейка упорядочены по номерам треугольников, к представлению ячейкатреугольник, то есть упорядочить пары относительно номеров ячеек, можно применить функцию cudppSort параллельной сортировки массивов из библиотеки CUDPP. На вход cudppSort подаются массив ключей и массив данных, которые содержат одинаковое количество элементов. При этом считается, что оба массива взаимосвязаны, а именно i-й элемент первого массива образует с i-м элементом второго массива пару . Функция производит сортировку ключевого массива и аналогично изменяет индексы элементов массива данных. На выходе имеем пару массивов, отсортированных по ключам. Кроме CT-массива, необходимо составить таблицу смещений, по которой для любой ячейки Y X с номером i можно определить индекс первого вхождения этой ячейки в CT-массив, и таблицу заполнения ячеек, где будет записано количество треугольников, принадлежащих каждой ячейке. Для ячеек, которые не содержат ни одного треугольника и, следовательно, отсутствуют в CT-массиве, смещение можно задать равным 1, а количество треугольников равным 0. Одним из основных преимуществ изложенного алгоритма параллельного построения регулярной сетки на GPU, кроме, конечно, поддержки реального режима времени, является экономия памяти видеоадаптера, поскольку отсутствует предварительное выделение памяти по среднему, заранее рассчитываемому числу ячеек, которые занимает один треугольник, и свободные ячейки вообще не записываются в CT-массив. Практические результаты Описанный алгоритм построения регулярной сетки трехмерной виртуальной сцены был реализован в виде программного кода и протестирован на нескольких сценах с различной степенью сложности. Полученные результаты приведены в таблице. Для тестирования была использована следующая конфигурация компьютера процессор Pentium IV, 1 Гбайт ОЗУ, видеоадаптер nVidia GeForce GTX280, операционная система Windows XP. 