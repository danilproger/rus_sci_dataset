СИСТЕМА ПРОГРАММ ДЛЯ АНАЛИЗА ОТКАЗОУСТОЙЧИВОСТИ МОДЕЛЕЙ, ПРЕДСТАВИМЫХ В ВИДЕ ГРАФА 

Приводится описание разработанной авторами системы программ, применявшейся для исследования отказоустойчивости систем различных типов. Описываемые в работе программные модули позволяют проводить исследо-вания разной степени детализации и оперировать различными, в том числе статистическими, данными в зависимости от ограничений на модели исследуемых систем. Реализован графический модуль для нахождения вложения заданного графа с цветными вершинами в другой заданный граф, если это возможно, а также для редактирования и генерации графов.

 Системы различной степени обобщенности авторами рассматривались ранее, исследовались разные аспекты их отказоустойчивости 14. Общей чертой этих систем было построение их модели в виде направленного раскрашенного графа, вершины которого представляли некоторые функциональные элементы системы, а дуги связи между ними. Кроме того, рассматривались различные модели задач, аналогичные моделям систем, а иногда и совпадающие с ними, а также задавался итерационный алгоритм вычисления отказоустойчивости при помощи моделирования процессов разрушения и восстановления узлов исходной системы. Следующим шагом были исследования критических точек отказоустойчивости, также поддержанные программами имитационного моделирования. Вопросы отказоустойчивости растущих систем исследовались и с использованием метода Монте-Карло. Приводились понятия графов системы и задачи, а также процессов разрушения и восстановления с различными вариациям. Отметим только, что работоспособность системы определяется возможностью вложения графа задачи в граф системы с сохранением типов вершин и направленных связей. Граф задачи соответствует необходимой для решения системе информационных ресурсов. Цель данной работы описание системы программ, позволяющей проводить анализ наработки на отказ в такой модели вычислительной системы и задачи. Графы произвольной структуры Подобные графы, являясь наиболее общим классом графов систем, сложны для изучения вопросов, связанных с отказоустойчивостью. Исследования некоторых свойств таких систем приведены в 1. Описанные в работе алгоритмы для графов систем произвольного вида реализованы в модуле RelGraph. Основные возможности программы RelGraph включают различные аспекты визуального редактирования графов, применение алгоритмов генерации и поиска изоморфного подграфа, а также просмотр найденных решений. Представление графической информации в главном окне программы показано на рисунке 1. Просмотр и редактирование произвольных графов. Программа позволяет добавлять, перемещать и удалять вершины графов с указанием одного из доступных типов вершин. Вершину текущего типа можно добавить при помощи двойного щелчка левой кнопкой мыши на любом свободном месте поля рисования графов. Одинарный щелчок выделяет вершины и дуги. Щелчок правой кнопкой мыши добавляет дугу от выделенной вершины к той, на которой произведен щелчок. Клавиша Del удаляет выделенную вершину и инцидентные ей дуги. Авторы нашли целесообразным написать редактор графов самостоятельно с использованием технологии Windows Presentation Foundation. Редактор графов также поддерживает масштабирование визуализации, что особенно полезно при работе с большими графами. Графы могут быть записаны и считаны из файлов формата XML. Каждый узел графа получает уникальный номер, который затем может использоваться в текстовых сообщениях. Для упрощения трансформаций данных вершины могут быть перенумерованы перед началом вычислений. Каждый тип вершины обозначен одной или несколькими буквами, которые указываются на изображении вершины в скобках после номера. Тип вершины может изменить только пользователь, цвет выбирается автоматически. В дальнейшем при использовании термина цвет в контексте узла графа будем иметь в виду ее тип, а не цвет отображения. Генерация графов. Программа поддерживает автоматическую генерацию графов четырех типов. 1. Полный требуется указать количество вершин и цветов графы такого типа исследуются в работе 3. 2. Случайный требуется указать количество вершин, цветов и среднее количество дуг у вершины. 3. Планетарный необходимо указать количество звезд, количество цветов планет и среднее количество планет каждого типа у звезды 1, 3. Звезды автоматически получают свой отдельный тип, поэтому при генерации планетарного графа реальное количество типов элементов оказывается на единицу больше соответствующего параметра генерации. Исключение могут составить лишь те планетарные графы, при генерации которых не все цвета были использованы в силу вероятностного характера процесса генерации. 4. Кольцевой требуется задать лишь количество вершин и цветов 3. Поиск подграфа в графе системы, изоморфного графу задачи. Данная возможность включает функцию разбиения графов на связные компоненты. Компонента представлена перечнем номеров своих вершин. Для упрощения графического интерфейса пользователя программа поддерживает поиск подграфов только для связных графов задачи и системы. В случае несвязных графов для очевидного ускорения поиска вложений задачи в систему достаточно было бы разбить входные графы на связные компоненты и повторять поиск для каждой пары связных компонент, одна из которых является подграфом модели задачи, а другая подграфом модели системы. Однако реализация этой функции очень усложняет для пользователя выбор одного из найденных решений в силу разветвленной индексации результатов. Основу алгоритма составляют два этапа поиск возможных вариантов отображения для каждой из вершин графа задачи и перебор полученных вариантов отображения для всех вершин графа задачи 1. Алгоритм может быть параметризован следующим образом. Указание частоты проверки допустимости частичного решения. Алгоритм поиска подграфа рекурсивный, поэтому единицей изменения данного параметра является уровень вложенности. Например, при работе с настройками по умолчанию используется значение 2, тем самым показывая, что проверка частичного решения будет производиться через один рекурсивный вызов. Теоретически это значение может вызвать замедление работы в случае, когда перед началом полной проверки частичных решений на втором уровне вложенности накопится большое количество неверных вариантов на первом уровне, которые все придется проверять. Каждое из них будет протестировано с выполнением рекурсивного спуска еще на один шаг и проверкой всех вариантов на новом уровне рекурсии с применением, возможно, неправильного частичного решения. Однако процесс проверки частичного решения еще более сложный, чем последовательный перебор вариантов. Тесты показали, что задание частоты проверки менее двух обычно неэффективно. Значение периода проверки, меньшее или равное единице, указывает алгоритму на необходимость проведения проверки каждого частичного решения. Запрос предварительной сортировки вершин графа задачи по количеству доступных вариантов вложения в систему . Данная возможность может использоваться, например, для перенесения вершины графа задачи с наибольшим количеством вариантов вложения в начало списка. В противном случае возможно, что большинство вершин графа задачи, имеющих лишь несколько вариантов вложения, обрабатываются первыми, вследствие чего, особенно при редких проверках решений, средний размер проверяемого частичного решения возрастает. Сортировка вариантов по количеству инцидентных вершин . Данная опция применяется к спискам вариантов отображения вершины графа задачи, определяемых для каждой такой вершины. Здесь используются эмпирические соображения о возможности ускорения алгоритма в том случае, когда первыми проверяются варианты отображения, имеющие наибольшее количество инцидентных вершин. Вершина, связанная лишь с одной или двумя соседними, в среднем оставит меньше вариантов дальнейшего отображения, чем вершина, имеющая большее количество соседей. Поиск одного или всех решений. При определении вложимости графа задачи в граф системы важно лишь наличие или отсутствие хотя бы одного решения. В случае оптимизационных задач, учитывающих количество так называемых склеек элементов, может понадобиться список всех решений 1. Общее количество получаемых решений ограничено для обеспечения приемлемой производительности, так как, например, в случае поиска отображения подграфа одного полного графа в другом полном графе количество решений может расти по мере уменьшения количества цветов. Отображение результатов. Программа запоминает список результатов последнего выполнения поиска подграфа и добавляет его в выпадающий список. Просмотр результата возможен в текстовом и графическом форматах. Для просмотра образа какой-либо вершины следует выбрать нужный результат из списка и выделить интересующую вершину на графе задачи. Образ будет автоматически подсвечен на графе системы. В текстовом виде результат представлен парами номеров вершин, а также информацией о количестве рекурсий, понадобившемся для получения решения после начала поиска либо после нахождения предыдущего решения, а также о количестве склеек вершин в найденном решении. Описание комплекта программ для исследования средней наработки планетарных вычислительных систем Программа RelConsole является консольным приложением Windows, предоставляющим часть функциональности программы RelGraph для использования в пакетном режиме. Формат входных данных программы совпадает с форматом, генерируемым программой RelGenerator. Результаты работы записываются в файл результата в нем указываются статистические параметры, а также описывается конкретное полученное решение . При использовании программы в пакетном режиме больший интерес представляет файл статистики, который содержит лишь статистические данные и не содержит описание полученного решения. Программа RelGenerator предназначена для создания набора каталогов и файлов с заданиями для RelConsole, моделирующими процесс разрушения планетарной вычислительной системы 1. Главное окно программы позволяет ввести все исходные параметры в соответствующие поименованные окошки. Алгоритм программы генерации файлов состоит из следующих шагов. 1. Создается каталог для размещения файлов и подкаталогов. 2. 3. Для текущих S, C и K генерируется ПВС, граф которой записывается в каталог ПВС в файл с именем generic.xml. В каталоге ПВС создаются подкаталоги Destruct и Soft. 4. Если ПВС полностью разрушена менее чем за Ni шагов, файлы с пустыми графами для дальнейших итераций не генерируются. 5. В каталог Soft помещаются файлы задач, сгенерированные на основе графа ПВС с учетом настроек программы. 6. Указанные блоки записываются для каждого i от 0 до количества сгенерированных ПВС. Если сгенерировано менее Ne ПВС, то после последнего блока добавляется команда записи в finish.txt значения i1 и метки empty, обозначающей полное разрушение графа РПВС. 7. В каталог ПВС записывается файл run.cmd, последовательно вызывающий все run.cmd из каталогов запусков. 8. В основной каталог записывается файл run.cmd, последовательно вызывающий все run.cmd из каталогов ПВС. В результате работы командных файлов, сгенерированных программой, в каждом каталоге тестов накапливаются файлы результатов для каждого запуска RelConsole и один файл stat.csv со статистикой для данного запуска. В каталоге ПВС сохраняются файлы finish.txt со значениями наработки и указаниями на полное разрушение или полный успех и stat.csv, являющийся объединением всех stat.csv из каталогов запуска. При таком подходе возможно детально рассмотреть каждый проведенный тест, а также получить обобщенную информацию для каждого набора параметров S, C и K из finish.txt и stat.csv. Информация в stat.csv описывает сложность проведения экспериментов и количество склеек, в то время как finish.txt описывает полученные значения наработки. Для дальнейшего анализа результатов работы применяется программа RelCollector. Программа RelCollector предназначена для сбора и анализа результатов работы командных файлов, сгенерированных при помощи программы RelGenerator. Главное окно программы позволяет ввести все исходные параметры в соответствующие поименованные окошки. Программа исследует все каталоги, вложенные в указанный пользователем. По имени каталога программа определяет S, C и K, использованные для генерации ПВС. Анализируя информацию, содержащуюся в файлах finish.txt, программа подсчитывает для каждого S, C и K величины математического ожидания и дисперсии наработки, количество полных успехов и количество полных разрушений. На основании информации из файлов stat.csv программа подсчитывает средние значения количества тестов, рекурсий, минимального, максимального и полученного количества склеек, а также затраченного времени. В файл результата записываются все упомянутые значения, а также формулы линейной регрессии математического ожидания наработки по каждому из параметров S, C и K. Программа RelStar предназначена для исследования отказоустойчивости ПВС. Главное окно программы позволяет ввести все исходные параметры в соответствующие поименованные окошки. Возможности программы аналогичны связке из RelConsole RelGenerator RelCollector, однако алгоритм поиска подграфа системы, изоморфного графу модели задачи, оптимизирован для случая ПВС. Граф задачи совпадает с графом неразрушенной ПВС, поэтому параметры генерации задачи отсутствуют. При этом программа генерирует статистику, аналогичную результатам работы RelCollector, однако файлы результатов не генерируются, так как алгоритм определяет разложимость графа задачи на граф системы без точного указания отображения для каждой вершины 3. Несмотря на это, программа имеет возможность генерировать файлы с текстовым описанием графов задачи и РПВС, состоящие из нескольких секций по количеству неразрушенных планетарных систем. Для каждой планетарной системы указываются номер звезды, а затем количество работоспособных и отказавших планет для всех цветов, для которых есть неразрушенные планеты. Отсутствие информации о планетах какого-либо цвета означает, что все планеты этого цвета разрушены. По окончании работы, вне зависимости от настроек протоколирования, программа генерирует в выбранном каталоге файл finish.csv, содержащий указанные при запуске параметры и результаты счета, включая статистические данные. Пакет программ для поиска критической вероятности разрушения ПВС Программа RelCrit предназначена для поиска критической точки отказоустойчивости по заданным параметрам S, C, K, Pdmin, Pdmax, Pd, Pf, Ni, Ne и 3. Главное окно программы позволяет ввести все исходные параметры в соответствующие поименованные окошки. Пример окна показан на рисунке 4. Аналогично выглядят и главные окна других модулей. Алгоритм работы программы заключается в варьировании вероятности разрушения вершин графа для нахождения критической точки этой вероятности, в которой большинство экспериментов становятся успешными. Программа также поддерживает восстановление вершин и может создавать каталоги с файлами описания обрабатываемых систем аналогично модулю RelStar. В качестве задач программа использует графы неразрушенных ПВС, поэтому описания задачи и системы перед первым шагом разрушения совпадают. По окончании работы, вне зависимости от настроек протоколирования, программа генерирует в указанном каталоге файл finish.csv, содержащий указанные при запуске параметры и результаты счета. В первой секции указываются заданные при старте расчета параметры. Во второй секции для каждого значения вероятности разрушения Pd указываются полученные статистические данные и результат проверки условия на 3, подтверждая, что эксперимент при данном Pd считается успешным. В третьей секции указывается полученное значение критической вероятности разрушения или помещается сообщение о том, что критическая точка не найдена. Программа RelMultiCrit предназначена для поиска критической точки отказоустойчивости по заданным диапазонам изменения параметров S, Pd и Pf и параметрам C, K, Pf, Ni, Ne и 3. Главное окно программы позволяет ввести все исходные параметры в соответствующие поименованные окошки. Алгоритм работы программы является расширенной версией алгоритма RelCrit и позволяет варьировать S, Pd и Pf. Данный модуль поддерживает облегченную версию протоколирования для каждой пары значений S и Pf создается отдельный файл статистики. Информация о количестве склеек не подсчитывается. По окончании работы программа генерирует в определенном каталоге файл finish.csv, в первой секции которого указываются заданные при старте расчета параметры. Во второй секции располагается матрица полученных значений критической вероятности для указанных Pf и S. Если критическая точка не найдена, критическая вероятность разрушения Pc полагается равной нулю 3. Исследование растущих систем Для исследования растущих наборов кольцевых вычислительных систем предназначена программа RelCircle. Главное окно программы позволяет ввести все исходные параметры в соответствующие поименованные окошки. Поля отметок Vary дают возможность выбрать варьируемые параметры, но не более двух. По окончании работы программа создает файл circle.csv в указанном каталоге. Первый блок файла результатов составляют значения заданных параметров. В таблице приведен пример файла результатов программы, правый столбец содержит описание данных, отсутствующее в генерирующемся файле. Заголовочная секция может изменяться в соответствии с параметрами, выбранными для варьирования. Во второй секции располагается матрица полученных значений критической вероятности для указанных варьируемых параметров. Третий блок результатов представляет собой развернутую таблицу значений количества успехов эксперимента и средней наработки от варьируемых параметров. Подытоживая, следует отметить, что модули RelConsole, RelGenerator, RelStar, RelCrit, RelMultiCrit, RelCircle реализованы на C с использованием библиотеки MFC, тестировались и применялись в среде Microsoft Windows XP. Программа RelGraph создана на C 2008,. NET Framework 3.5, WPF. Численные эксперименты проводились авторами с использованием указанных программ в работах 1, 3, 4. В дальнейшем планируется объединение наиболее интересных модулей в единый проект на базе RelGraph, так как это позволит применять подсистему отображения графов собственной разработки для отображения промежуточных результатов работы алгоритмов, ориентированных на сбор статистических данных. 