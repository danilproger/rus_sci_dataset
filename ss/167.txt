ПОСТРОЕНИЕ ХРАНИЛИЩ ОНТОЛОГИЧЕСКИХ БАЗ ЗНАНИЙ 

Описывается проблема хранения онтологически представленной информации в реляционных БД. Хранилище онтологий рассматривается как особый класс информационных систем. Классифицированы существующие подходы к хранению онтологий в БД..

 Концепция и технологии семантического Веб это динамично развивающиеся направления информационных технологий 1, которые обеспечивают возможность совместного многократного использования знаний различными приложениями, организациями и сообществами, позволяя компьютерам обрабатывать информацию на семантическом уровне. При создании крупных информационных систем по мере роста объемов используемых онтологий их хранение в плоских файлах оказывается непродуктивным. В связи с этим актуальна проблема организации эффективных хранилищ онтологических баз знаний . Представление онтологий в семантическом Веб Под онтологией, согласно общепринятому определению, понимается явная спецификация концептуализации. Для автоматической обработки разделяемых знаний консорциумом W3C разработаны единые стандарты их представления RDF и основанный на нем язык веб-онтологий OWL . Под ресурсом понимается любая сущность, которой сопоставлен универсальный идентификатор URI . Использование URI для задания субъектов и свойств позволяет связывать отдельные утверждения в сколь угодно сложные семантические сети, имеющие единую интерпретацию в открытой сетевой среде. Простейшая форма хранения онтологий OWL-файл. Однако данный подход имеет недостатки существенный рост затрат оперативной памяти при работе с большими онтологиями вследствие полной загрузки OWL-файла, а также значительное увеличение времени загрузки OWLфайлов по мере роста количества используемых онтологий. Это не позволяет использовать данный подход при создании крупных ИС и обусловливает необходимость построения RDF-хранилищ на основе реляционных СУБД. Особенности RDF-хранилищ Под RDF-хранилищем понимается информационная подсистема, предназначенная для хранения RDF-триплетов и выполнения запросов к ним. Основными функциями RDF-хранилища являются организация хранения онтологий в реляционной БД с использованием реляционных представлений предоставление программного интерфейса для извлечения информации из хранимых онтологий посредством языка структурированных запросов SPARQL или специального API поддержка функций администрирования хранимых онтологий добавление, удаление, модификация и распределение прав доступа. Эффективное RDF-хранилище должно удовлетворять следующим требованиям высокая производительность минимизация времени выполнения запросов минимальные затраты памяти для хранения онтологий универсальность подхода возможность хранения онтологий любой структуры. При разработке конкретных ИС важны время и сложность развертывания RDF-хранилища, а также его стоимость. Обобщенная архитектура RDF-хранилища В состав RDF-хранилища входят две основные подсистемы подсистема хранения онтологий на основе реляционной СУБД и подсистема трансляции входных запросов в SQL-запросы. Прикладные информационные системы могут взаимодействовать с RDF-хранилищем посредством специального API или структурированных SPARQL-запросов. SPARQL это стандартный язык запросов к RDF-данным. Например, простой SPARQL-запрос для получения имени и номера паспорта некоторой персоны имеет вид Отношение rdftype является стандартным отношением языка RDF и означает принадлежность элемента классу. Класс Person, отношения name и passportNumber в данном примере взяты из некоторого пространства имен по умолчанию. Подсистема трансляции входных запросов в общем случае может включать два компонента обработчик API-вызовов, предоставляющий библиотеку классов некоторого языка программирования для работы с онтологиями, включая их загрузку из хранилища транслятор SPARQLSQL, выполняющий преобразования SPARQL-запросов в SQL-запросы и обратные преобразования результатов, возвращенных SQL-запросами в результат SPARQL-запроса. Недостаток специального API состоит в привязке к конкретному языку программирования. Пример такого API библиотека Jena. Интерфейс SPARQL-запросов является универсальным решением, не зависящим от языка программирования. Поэтому рассмотрим работу с RDF-хранилищем с использованием именно этого интерфейса. Вопросы оптимизации функционирования транслятора SPARQL SQL рассмотрены, в частности, в 2, 3. Настоящая статья посвящена определению зависимости производительности RDF-хранилища от принятой схемы РБД. В соответствии с первым подходом все RDFтриплеты хранятся в унифицированной таблице БД, содержащей в общем случае четыре колонки граф, субъект, объект и предикат. Данный подход реализован, в частности, в Jena SDB и 3store. Он характеризуется достаточно высокой временной сложностью выборки RDF-триплетов. Особенностью второго подхода является определение схемы БД в соответствии с конкретной предметной областью, что позволяет оптимизировать выполнение запросов. Реализация данного подхода для больших онтологий предполагает создание большого числа таблиц БД со сложными связями между ними. Известно несколько частных решений, отличающихся способом формирования схемы БД 4, 5. Введем определения и примем базовые допущения, необходимые для анализа временных затрат на обработку SPARQL-запросов. SQL-запрос в общем случае имеет следующую структуру SELECT кортеж выбираемых полей FROM кортеж таблиц WHERE кортеж условий. Построение SQL-запроса на основе входного SPARQL-запроса предполагает формирование кортежей выбираемых полей и условий. Без существенной потери общности примем равными время формирования одного элемента кортежа выбираемых полей и одного элемента кортежа условий в запросе. Время формирования кортежа таблиц можно считать постоянным и пренебрежимо малым. Пусть T среднее время формирования элементов кортежа выбираемых полей и кортежа условий в процессе построения SQL-запроса. Тогда время формирования SQL-запроса линейно зависит от числа элементов в кортежах выбираемых полей и условий. Допустим, что обработка SQL-запроса требует последовательного просмотра всех записей таблицы и сравнения анализируемых условий для каждой из них. Тогда время выборки очередной записи из таблицы можно считать равным времени анализа одного условия. Обозначим T среднее время выборки записи из таблицы и анализа условия, необходимое для выполнения SPARQL-запроса к СУБД. Будем считать, что T не зависит от конкретной СУБД и является постоянным. Можно также считать, что время анализа записей в таблице БД линейно зависит от количества записей таблицы, а время анализа условий линейно зависит от количества условий, проверяемых для каждой записи в таблице БД. Зависимость времени формирования очередного SQL-запроса от количества полей, содержащихся в кортеже результата, и количества условий будет следующей Исходя из принятых допущений, можно записать T Тres def Тcond def. Время, необходимое на выполнение одного SQL-запроса, может быть оценено по формуле, где Trecord время на анализ записей в таблице Tfield время на сопоставление условий запроса с текущими значениями в строке таблицы. Формула выражает зависимость времени выполнения SPARQL-запроса от особенностей принятой схемы БД и соответствующей трансформационной грамматики. Рассмотрим влияние схемы БД на трансформационную грамматику для двух вариантов схем вертикальная таблицa и таблицы свойств классов. Схема БД вертикальная таблица предполагает создание единой таблицы для хранения RDF-триплетов, а схема БД таблицы свойств классов отдельных таблиц для хранения экземпляров каждого из классов онтологии. Для сравнения этих вариантов рассмотрим простую онтологию, содержащую четыре класса classHuman, classMan, classWoman, classChildren. Будем считать, что каждый из них имеет два экземпляра, за исключением родительского класса classHuman. Каждый экземпляр класса обладает свойствами propertyName и propertyAge. Структура хранения данной онтологии на основе схемы вертикальная таблица представлена в таблице 1. Реализация хранения данной онтологии на основе схемы таблицы свойств классов предполагает создание таблицы иерархии классов онтологии и отдельных таблиц для каждого из классов. Выбор экземпляров со значением поля propertyAge, равным 35, из таблиц, определенных на шаге 1. Анализ полученных результатов показывает, что трансляция SPARQLзапросов при втором подходе выполняется приблизительно в три раза быстрее. Время обработки последовательностей SQL-запросов во втором случае в два раза меньше. Полученные результаты позволяют сделать вывод, что схема БД вертикальная таблица требует более сложной трансформационной грамматики и большего времени на выполнение SPARQLзапросов. С другой стороны, схема БД на основе таблиц свойств классов упрощает трансформационную грамматику и уменьшает время выполнения SPARQL-запросов. Полученные результаты могут служить основой для выбора эффективного решения при построении RDF-хранилищ в зависимости от специфики хранимых онтологий и их состава. Обратим внимание, что теоретические оценки хорошо согласуются с экспериментальными результатами, представленными в 57. В заключение отметим, что предложенный подход к оценке временных затрат на выполнение SPARQL-запросов позволяет теоретически оценивать эффективность различных подходов к организации RDF-хранилищ и может служить основой для построения более точных теоретических оценок эффективности RDF-хранилищ. Дальнейшие исследования должны быть направлены на изучение организации эффективных RDF-хранилищ, в частности, на определение рациональных схем БД для хранения онтологий и экспериментальную оценку эффективности предлагаемых подходов, на разработку новых архитектурных принципов построения хранилищ, комбинирующих достоинства различных подходов, а также на оптимизацию выполнения SPARQLзапросов к хранилищам, обладающим определенной схемой БД. 