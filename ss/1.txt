МАТЕМТАТИЧЕСКАЯ МОДЕЛЬ КОНТРОЛИРУЕМОГО ВЫПОЛНЕНИЯ 

Описание сложной информационной системы требует наличия формализма, позволяющего описывать объекты системы и их взаимодействие, унифицировать подходы к вычислениям. В статье представлена модель вычислений, описывающая основные аспекты контролируемого выполнения распределенных ответственных приложений реального времени.

 Для описания сложной системы вычислений с разносторонними требованиями необходимо наличие формализма, позволяющего описывать объекты системы и их взаимодействие, унифицировать подходы к вычислениям. Построенная модель вычислений описывает основные аспекты контролируемого выполнения распределенных ответственных приложений реального времени и включает статическую и динамическую верификацию корректности оптимизацию и проверку результатов оптимизации устойчивость к сбоям представление вычисления с разных сторон и с различной степенью детализации возможность описания ресурсов. Предложенная автором модель построена на основе формального описания устойчивой системы реального времени, включающего восстановление системы после сбоев, временные свойства и планируемость 1. Сбои моделируются с помощью множества сбойных действий F, которые изменяют состояние так же, как и обычные вычисления. Устойчивость к сбоям обеспечивается проведением корректирующих действий. Как показано, доказательство устойчивости к сбоям в такой модели не отличается от доказательства функциональной корректности. Программы и спецификации описываются в модели TLA как логические формулы, позволяя таким образом устанавливать правила вывода и описывать выполнение без времени, выполнение со временем, сбои и планируемость. Приведем несколько определений. Определение 1. Состояние это отображение набора переменных Var на набор значений Val s Var Val. Определение 2. Действие это некоторый предикат над переменными, их значениями, а также их измененными значениями, которые обозначаются штрихом x1y. Определение 3. Программа это набор, состоящий из следующих компонент конечное непустое множество состояний подмножество внутренних состояний множества предикат первоначального состояния, включающий в себя только переменные из конечный набор A действий над переменными из. Определение 4. Определение 5. Определение 6. И наконец, введем определение уточнения программ, позволяющее ввести понятие верификации. Определение 7. Отношение уточнения P P означает, что программа P корректно реализует P, то есть отношение выполнено для внешних спецификаций. В работах 1 и 4 описываются дальнейшие расширения предложенных определений и возможности вывода теорем. Рассмотрим варианты расширения описания для учета необходимых свойств. Моделирование разных аспектов вычисления Естественно описывать вычисление несколькими моделями, отражающими различные аспекты приложения, например, модель памяти и модель занимаемой пропускной способности сети, дополняя основную модель вычислений, могут быть различными. Кроме того, набор ограничений и утверждений о приложении может быть достаточно разнородным и задаваться результатами тестирования, выведенными в процессе анализа приложения утверждениями, проверками во время выполнения. Таким образом, кроме понятия уточнения, необходимо задать более сложное соотношение между различными моделями выполнения, описывающее совместное дополнение программ, сводимое к нужному выполнению. Определим операцию комбинации программ. Определение 8. Определение 9. Будем говорить, что программа P является уточнением набора P, P, если . Таким образом, можно определить отношение частичного порядка на множестве наборов программ и использовать его для построения целого семейства моделей, представляющих выполнение приложения с разной степенью детализации. Можно определить и другие операции над моделями программ. Определение 10. Композиция программ P и P определяется набором состояний, начальным состоянием и набором действий A A. Другой операцией, позволяющей абстрагироваться от внешней переменной, является операция сокрытия переменной. Определение 11. Моделирование ресурсов Потребляемые ресурсы, как и время, важны для доказательства корректности работы приложения и для выполнения его миссии. Для описания потребления ресурсов, как и в случае со временем, необходимо ввести внутренние переменные, описывающие ресурс, и дополнить соотношения действий границами использования ресурсов. Например, время моделируется с помощью временных меток действий. Модель может включать в себя более сложные механизмы планирования, например, планирование с временным освобождением ресурсов. Более сложные модели использования ресурсов требуют дополнительных построений, поэтому некоторые аспекты, не так часто применяемые в системах реального времени, остались неописанными. Например, представляет интерес описание задачи планирования не только времени, но и совместного планирования ресурсов. Оптимизация Возможность учета понятия оптимизации является естественным требованием к формальной модели приложения. Необходимо рассмотреть две проблемы, возникающие при этом проверка корректности оптимизирующего преобразования и количественное определение результатов оптимизации. Первая проблема может быть решена с помощью введения эталонной модели вычисления P, таким образом, корректность оптимизации можно определить как соответствие эталонной модели вычисления P P P P. То есть для оценки корректности оптимизации необходимо зафиксировать эталонную модель вычисления. Полная модель приложения Расширяя описание приложения, получим следующую формальную модель. Определение. В данной работе была представлена формальная модель процесса вычислений, позволяющая описывать и доказывать свойства распределенных, устойчивых к сбоям вычислений. Контролируемое выполнение направлено на реализацию комплексом его миссии, несмотря на наличие ошибок и вредоносных воздействий. Понятие контролируемого выполнения включает следующие основные положения интеграция средств информационной безопасности, отладки, управления наличие целостного набора средств контролируемого выполнения, возможность взаимодействия между ними охват всех этапов жизненного цикла аппаратно-программных комплексов, включая этап эксплуатации. Эти возможности позволяют пользователям и разработчикам аппаратно-программных комплексов получать разнообразную информацию о работе приложений и при необходимости выполнять отладочные и управляющие действия. Однако поведение такого рода комплексов описывается множеством сложных взаимозависимых характеристик, поэтому оценка качества функционирования комплекса в целом может быть непростой задачей даже при наличии детальной информации о различных аспектах его выполнения. Авторы предлагают подход, включающий как статический анализ программного кода на соответствие модели, так и динамическую верификацию программы в ходе ее выполнения. Свойства, задающие количественные характеристики выполнения приложения, описываются с использованием средств профилирования инструментального комплекса СОМ и проверяются динамически в ходе выполнения программы. Механизм динамической верификации основан на парадигме MOP. В данной работе механизмы наблюдения и верификации MOP рассматриваются как компоненты среды контролируемого выполнения. Механизм наблюдения включает средства мониторинга и реализованные в рамках данной работы средства профилирования, позволяющие отслеживать использование приложением целевых ресурсов. Механизм верификации реализован как сопоставление результатов наблюдения с моделью на основе средств самоконтроля. Сбор и анализ информации средствами контролируемого выполнения Контролируемое выполнение подразумевает наличие средств, осуществляющих постоянный сбор информации о ходе работы целевой системы. К их числу относятся средства самоконтроля программ, мониторинга и измерения количественных характеристик . Для верификации свойств целевой системы могут использоваться данные, собранные при помощи любых из указанных средств. Библиотека средств самоконтроля . Реализована в виде набора функций и макровызовов, которые вставляются в исходный текст программы. Разработчик, исходя из логики поведения программы, может встроить в ее код вызовы БСС для выявления признаков некорректного поведения программы. Для таких ситуаций он может предусмотреть вызов отладочных средств, выдачу диагностики или, возможно, корректирующие действия для исправления выявленных отклонений от эталонного правильного поведения. Средства самоконтроля обеспечивают минимальное вмешательство в работу целевой системы, поэтому они широко применяются в приложениях, где важно время выполнения отдельных участков, например обработчиков прерываний, остановка в которых может сделать дальнейшее функционирование бессмысленным. В отличие от средств мониторинга средства самоконтроля не требуют внешних программ для взаимодействия с пользователем. Вызовы БСС разделяются на три основные категории сенсоры, актуаторы и средства протоколирования. Сенсором называется пассивный датчик, фиксирующий изменения в системе на внутреннем уровне. Под актуатором будем понимать активный датчик, имеющий средства реагирования на происходящие изменения. Средства протоколирования доводят до конечного пользователя информацию о состоянии системы и происходящих в ней изменениях. Рассмотрим основные группы вызовов БСС. Актуаторы. Запуск актуаторов осуществляется при помощи вызова UELACTUATOR. Использование актуаторов позволяет проверить значение некоторого выражения и в зависимости от результата выполнить определенные отладочные действия. Если значение выражения ложно, вызывается стандартный обработчик или обработчик, заданный пользователем. Поскольку исключительной ситуации при этом не возникает, возможно продолжение выполнения потока в пошаговом или обычном режиме. Сенсоры. Данная группа делится на следующие типы. Будильник. Сенсоры этого типа позволяют проверить, укладывается ли некоторая последовательность вычислений в заданный временной интервал. Сенсор устанавливает интервал времени в секундах. Если за это время управление не достигает вызова, в протокол помещается соответствующее сообщение и генерируется событие, отображаемое средствами мониторинга. Профилирование. Сенсоры этого типа отмечают начало и конец профилируемого участка кода. Время выполнения участка выводится в протокол. Контроль использования динамически распределяемой памяти. Функции запроса и освобождения памяти calloc, malloc, UELrealloc и UELfree аналогичны стандартным, но регистрируют проходящие через них объекты, сохраняя их адреса, размеры и позицию исходного кода, где они были вызваны. Они также порождают событие и выдают в протокол сообщения в случае некорректных ситуаций, например, если функции UELfree или UELrealloc передан указатель на свободную память. Сенсор позволяет запомнить текущее состояние памяти, а позже вывести в протокол отчет об изменениях с момента последнего сохранения. Динамическая проверка указателей. Сенсоры типа служат для проверки корректности указателей. Их можно использовать, например, для проверки аргументов функции в сочетании с актуатором. При помощи вызовов данной группы можно проверить, что указатель содержит адрес корректной для потока области памяти, содержащей программный код, из которой можно прочесть заданное число байтов, в которую можно записать заданное число байтов или в которой находится строка печатных символов заданной длины . Средства протоколирования. В любой точке программы можно вывести отчет о текущем состоянии динамически распределяемой памяти с помощью вызова. Чтобы поместить интересующую пользователя информацию в протокол, надо воспользоваться вызовом. Вызов служит для вычисления заданного выражения только при включенной отладке. Таким способом удобно задавать, например, отладочную печать. Прочее. init, fini инициализация и терминирование БСС. Такой набор функций БСС был выбран авторами на основе опыта, полученного при отладке распределенных приложений. Некоторые компоненты приложений работают под управлением системы реального времени. Контроль изменения и доступа к памяти необходим, если отлаживается приложение, активно использующее память, то есть практически любое довольно большое приложение. Система профилирования. В рамках инструментального комплекса СОМ создана система профилирования целевых систем, функционирующих в условиях дефицита ресурсов. В силу специфики рассматриваемого класса целевых систем понятие профилирования в данной работе используется в более широком смысле, чем сбор информации только об использовании процессорного времени. Под профилированием понимается сбор любых количественных характеристик выполнения приложения, связанных с расходованием ресурсов вычислительной среды, таких как память, полоса пропускания сети и др. Результаты профилирования служат входными данными для средств верификации, осуществляющих сравнение фактического поведения приложения с эталонным. Помимо этого, они могут использоваться традиционным способом, то есть для построения профилей с целью оптимизации приложений, что особенно важно, если целевой аппаратно-программный комплекс содержит узлы, работающие в реальном масштабе времени в условиях дефицита ресурсов. С этой точки зрения важно, чтобы результат работы средств профилирования был представлен в унифицированном формате, позволяющем использовать не только средства инструментального комплекса, осуществляющего контролируемое выполнение целевой системы, но и внешние инструменты обработки данных профилирования. Необходимо также использовать стандартизованные в том числе аппаратные интерфейсы для получения информации о ходе выполнения программы, а именно интерфейсы доступа к аппаратным счетчикам событий процессора, стандартные библиотеки компилятора и целевой ОС, обеспечивающие поддержку построения профилей выполнения программы. Применение стандартизованных подходов, существующих в различных предметных областях, является одной из важных характеристик среды контролируемого выполнения, поскольку это повышает переносимость ее инструментальных средств и позволяет наращивать функциональность за счет применения средств сторонних разработчиков. На основании изложенного можно сделать следующие выводы. В представленной работе понятие контролируемого выполнения расширено за счет внедрения парадигмы программирования, ориентированного на мониторинг, введения средств динамического моделирования целевых аппаратно-программных комплексов, а также новых средств профилирования. Под профилированием в контексте данной работы понимаются сбор и анализ информации о различных количественных характеристиках выполнения комплексов, включая данные об использовании как процессорного времени, так и других целевых ресурсов. Необходимость введения этих средств продиктована и сложностью рассматриваемых аппаратно-программных комплексов, и критичностью предъявляемых к ним требованиям по обеспечению должного качества обслуживания. 