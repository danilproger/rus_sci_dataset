АЛГОРИТМ ЭФФЕКТИВНОГО РАЗМЕЩЕНИЯ ПРОГРАММ  НА РЕСУРСАХ МНОГОПРОЦЕССОРНЫХ ВЫЧИСЛИТЕЛЬНЫХ СИСТЕМ 

В статье рассмотрен новый подход к решению задачи эффективного размещения параллельной программы на ресурсах многопроцессорной вычислительной системы, основанный на использовании параллельной реализации алгоритма моделирования отжига. Предложена модель многопроцессорной вычислительной системы, учитывающей неоднородность вычислительных и коммуникационных ресурсов, а также модель параллельной программы, основанная на учете типовых схем передачи данных между ветвями программ. Для повышения качества размещения ветвей параллельной программы на ресурсах многопроцессорной вычислительной системы предложена параллельная реализация алгоритма моделирования отжига. Проведена оценка влияния конкуренции в сети на время выполнения параллельной программы..

 В современных многопроцессорных вычислительных системах время выполнения параллельной программы может существенно зависеть от того, как ее отдельные ветви размещены по вычислительным узлам и процессорам 1. Значительное влияние на время выполнения параллельной программы оказывает конкуренция между взаимодействующими ветвями за коммуникационный ресурс или память ВУ 2. В качестве примера можно рассмотреть схемы размещения ветвей параллельных программ CG и SP из тестового пакета NAS Parallel Benchmarks 3 на процессорах ВУ, при которых через коммутатор выполняется 8 одновременных пересылок. Увеличение числа конкурирующих пересылок через коммутатор приводит к значительному увеличению времени выполнения программ CG и SP . В работе 2 отмечается, что конкуренция между ветвями параллельной программы приводит к увеличению латентности и уменьшению пропускной способности коммуникационной среды МВС. Под коммуникационным шаблоном будем понимать схему обмена данными между параллельными ветвями программы заданного этапа алгоритма. Как правило, параллельная программа использует фиксированный набор коммуникационных шаблонов, которые повторяются в процессе ее выполнения. Учет коммуникационных шаблонов при распределении ветвей параллельной программы по процессорам МВС позволяет выявлять конкуренцию за коммуникационные ресурсы на различных этапах выполнения программы. Для формализации оптимизационной задачи по минимизации времени выполнения параллельного приложения построим математические модели параллельной программы и МВС. На множестве ребер E заданы отображения ставит в соответствие ребру e графа объем данных, переданный между ветвями с номерами i и j за время выполнения коммуникационного шаблона ставит в соответствие ребру e графа I число операций приемапередачи данных между ветвями с номерами i и j за время выполнения параллельной программы. Каждый шаблон параллельной программы может быть описан с помощью матрицы смежности. Элемент e матрицы соответствует ребру графа программы, отражающему информационную связь между ветвями v и v. Приведем пример матрицы для коммуникационного шаблона кольцо информационного графа программы На рисунке 3 представлены коммуникационные шаблоны тестов NAS Parallel Benchmarks BT и CG в виде матриц смежности. Номера строк и столбцов матриц соответствуют номерам MPIпроцессов, а закрашенные элементы матриц показывают наличие или отсутствие коммуникационного обмена между этими процессами. Для автоматизации процесса построения информационного графа и выделения коммуникационных шаблонов использовалось программное средство IGtrace 1. Модель многопроцессорной вычислительной системы Структура МВС может быть представлена в виде дерева, содержащего M уровней. Для каждого узла дерева определен граф ВС, отражающий структуру коммуникационной среды дочерних элементов следующего уровня. Обозначим, граф ВС с номером j на уровне иерархии i . На рисунке 4б приведен пример графа МВС, который отражает три уровня иерархии коммуникационной среды и включает несколько типов вычислительных устройств,. В качестве вычислительного устройства типа T может выступать универсальный процессор, а вычислительного устройства типа T графический процессор. МВС состоит из двух ВУ, каждый из которых содержит от двух до четырех многоядерных процессоров. На втором уровне иерархии, представленном графами и, для выполнения обменных операций между процессорами используется шина. Третий уровень образован вычислительными ядрами процессоров и представлен графами,. Обмен данными между ядрами процессоров осуществляется через общую память. Приведенный на рисунке 4б граф МВС может быть представлен в виде следующей матрицы смежности Элемент матрицы соответствует ребру графа ВС, соединяющему вычислительные устройства c и c на уровне иерархии k. На множестве ребер L заданы отображения функция ставит в соответствие ребру значение пропускной способности линии связи между вычислительными элементами с номерами i и j на уровне k функция ставит в соответствие ребру значение латентности линии связи между вычислительными элементами с номерами i и j на уровне k. Для автоматизации процесса построения матрицы M могут использоваться программные средства из 4. С помощью тестовой программы необходимо измерить латентность и пропускную способность сети между каждой парой вычислительных устройств и воспользоваться программой визуализации для выделения уровней иерархии коммуникационной среды на основе полученных результатов тестирования 4. На множестве ребер заданы отображения и . На множестве ребер E заданы отображения и . Для уменьшения значения T необходимо уменьшить значения слагаемых . Значение T может быть уменьшено путем размещения ветвей программы на более производительных вычислительных устройствах. Время выполнения обменных операций T между ветвями программы зависит от характеристик коммуникационного оборудования и памяти ВС. С учетом введенных обозначений задача размещения программы на вычислительных ресурсах многопроцессорной вычислительной системы может быть сформулирована следующим образом. Требуется найти такое отображение, при котором min. Обозначим L множество ребер, формирующих кратчайший путь от вершины c к вершине c. Поскольку коммуникационные шаблоны выполняются последовательно, время T выполнения всех коммуникационных операций можно вычислить следующим образом max. Перечисленные алгоритмы не учитывают неоднородность вычислительной и коммуникационной инфраструктур МВС, а также порядок взаимодействия между ветвями и интенсивность выполнения обменных операций. Задача эффективного размещения ветвей параллельной программы на процессорах МВС является NP-полной. Для ее решения сегодня существует несколько классов алгоритмов. Часть этих алгоритмов являются эвристическими, то есть дающими лишь приближенное решение задачи, часть точными. В работе 5 отмечается целесообразность применения точных алгоритмов только для систем с малым числом процессоров, не превышающим 10. Обзор существующих эвристических алгоритмов размещения параллельных программ показал, что наиболее предпочтительными по точности получаемого результата являются алгоритмы, основанные на методе моделирования отжига . В общем виде алгоритм имитации отжига для решения задачи отображения информационного графа программы на граф ВС, заданных матрицами M и M соответственно, можно описать следующим образом. Шаг 1. Шаг 2. Выбрать начальное произвольное отображение X и вычислить значение F функционала . Шаг 3. Выбрать произвольную вершину v информационного графа. Шаг 4. Поместить вершину v на вершину c графа ВС. Вычислить новое значение функционала . Шаг 5. Если 0, вершина v закрепляется за вершиной c. Шаг 6. Если зафиксирован выход функционала на стационарное значение или текущее значение T является конечным, завершить работу алгоритма. В остальных случаях увеличить значение j на 1 и перейти к шагу 4. При увеличении указанных параметров возрастают точность и время выполнения алгоритма. В настоящее время известно несколько способов распараллеливания алгоритма имитации отжига. 1. Параллельный независимый запуск алгоритма имитации отжига на нескольких узлах с различными начальными приближениями. В качестве результата выбирается лучшее решение из найденных на всех узлах. Скорость поиска решений и их качество практически не отличаются от классического последовательного алгоритма. 2. Параллельный запуск алгоритма имитации отжига с периодическим обменом информацией о полученных решениях, при этом узлы вычислительной системы производят рестарт имитации отжига из найденных решений с наименьшим значением целевой функции. Такой способ универсален и приемлем для любых задач оптимизации, но требует больших затрат на обмен данными. 3. Разбиение пространства решений на области и поиск решения в каждой области отдельно с последующим объединением результатов поиска и выбором из них лучшего решения. Такой способ может эффективно применяться на широком классе архитектур, но требует разработки способа разбиения на области для каждой решаемой задачи. Первые два способа распараллеливания алгоритма имитации отжига предполагают, что на каждом из вычислительных узлов доступна своя копия графа ВС и информационного графа программы. Данное условие может затруднять реализацию предложенных подходов для графов параллельной программы и ВС, которые невозможно целиком разместить в памяти одного ВУ. Поэтому для распараллеливания алгоритма имитации отжига был выбран способ, основанный на разбиении пространства поиска решений на независимые области. Выполним декомпозицию графа ВС по ВУ путем разбиения матрицы на k частей. Обозначим, 1, часть матрицы, размещенную в памяти i-го ВУ. Шаг 1. Выполнить в цикле. Шаг 1.1. Допустимым является сочетание, соответствующее назначению ветви параллельной программы на один процессор или вычислительное ядро. Шаг 1.2. Шаг 1.3. Шаг 1.4. Для каждого ВУ выбрать лучшее решение из найденных на всех процессорах. Шаг 1.5. Выбрать лучшее решение из найденных на всех ВУ. Шаг 2. Если все сочетания рассмотрены, завершить выполнение алгоритма и принять в качестве искомого лучшее из найденных в процессе выполнения алгоритма решение. Иначе перейти на шаг 1 алгоритма. Экспериментальные результаты Для оценки эффективности разработанного алгоритма было выполнено размещение параллельных программ из тестового пакета NAS Parallel Benchmarks на ресурсах МВС с сетевой топологией двумерная решетка и состоящей из 64 процессоров. Запуск тестов осуществлялся на 8, 16, 32 и 64 процессорах. Для каждого теста с помощью функционала вычислялось время выполнения коммуникационных обменов между ветвями после их размещения на процессорах с помощью алгоритмов PAL и PAR. Полученные схемы размещений улучшались с помощью разработанного алгоритма PSA, и вычислялось текущее время выполнения коммуникационных обменов. На рисунке 5 представлена диаграмма изменения времени выполнения тестов NAS Parallel Benchmarks и двух реализаций параллельного алгоритма умножения разреженной матрицы на вектор после улучшения схем размещения PAL и PAR . Среднее время построения новой схемы размещения ветвей на процессорах МВС с помощью алгоритма PSA не превышало 10 от времени выполнения тестовой программы. Как видно из рисунка 5, для двух тестов NAS Parallel Benchmarks и программы MVALL не удалось уменьшить время выполнения. Это объясняется тем, что в первых двух программах объем вычислений преобладает над количеством коммуникационных операций, а в третьей реализован обмен каждый-с-каждым. Для остальных программ время выполнения удалось сократить от 10 до 43 . Предложенный алгоритм отображения графа программы на граф ВС был реализован на языке С в виде программного модуля, который в дальнейшем может быть интегрирован в СУРЗ МВС. Запуск алгоритма осуществлялся с использованием программного комплекса Пирамида 6 на вычислительных ресурсах ПТК СПГПУ и МСЦ РАН. В заключение отметим следующее. В МВС время выполнения параллельной программы зависит от того, как ее отдельные ветви размещены по вычислительным узлам и процессорам. Значительное влияние на время выполнения параллельной программы, а также латентность и пропускную способность коммуникационной среды оказывает конкуренция между взаимодействующими ветвями за коммуникационный ресурс. Для уменьшения времени выполнения параллельной программы и сокращения конкуренции в сети предложен подход, основанный на выявлении и учете типовых коммуникационных операций в программе при ее размещении на ресурсах МВС. Разработан параллельный алгоритм размещения программ на ресурсах МВС, основанный на методе моделирования отжига. Результаты проведенных экспериментов показали существенное сокращение времени выполнения параллельных программ и целесообразность применения разработанного подхода и алгоритма для решения задачи эффективного размещения параллельной программы на ресурсах МВС. Программная реализация предложенного алгоритма размещения ветвей параллельной программы на вычислительных ресурсах МВС может быть интегрирована в СУРЗ МВС. 