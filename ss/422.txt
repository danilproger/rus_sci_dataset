ТЕХНОЛОГИЧЕСКИЕ ПРОЦЕССЫ С ГИБКИМИ СВЯЗЯМИ ТИПА «ЗВЕЗДА» ДЛЯ ИНТЕРАКТИВНЫХ ПРОГРАММНЫХ СИСТЕМ 

Предложен метод построения интерактивных программных систем, основанных на описании гибких технологических процессов (workflow), в которых допускается нарушение технологической дисциплины в виде непредусмотренных переходов между разрешенными состояниями. В процессе эволюции индивидуального экземпляра процесса (токена) может потребоваться изменить порядок состояний, пропустить какое-либо из них или еще раз вернуться в некоторое состояние, в котором токен уже был. Такие действия могут выполняться в особом режиме работы информационной системы. Для реализации этого режима описание исходного технологического процесса (не допускающего нарушений технологической дисциплины) заранее модифицируется путем добавления в него особых состояний и переходов. Метод в основном реализуется стандартными средствами описания технологических процессов на языке высокого уровня. При этом, с точки зрения оператора, непредусмотренный переход мало отличается от обычного перехода, и оператор может не знать того, что в основе интерактивной системы лежит описание каких-либо технологических процессов. Гибкость системы достигается в процессе ее эксплуатации, а оператор может не иметь квалификацию разработчика или аналитика. Метод изложен на примере использования программного продукта с открытым кодом perl-workflow. Предложенный способ реализации произвольных переходов в технологических процессах применим, например, в системах мониторинга. Полученные результаты расширяют область применимости информационных систем, построенных на основе технологии workflow..

 Управление технологическими процессами ТП workflow широко используется при разработке информационных систем в качестве промежуточного уровня абстракции, позволяющего отделить логику исполнения процессов от программного кода 1. Изначально в стандартах по управлению ТП предполагается, что описание ТП задается жестко, не допускается даже незначительное нарушение технологической дисциплины. Однако в реальных условиях иногда появляется потребность нарушить технологическую дисциплину, при этом не отказываясь от нее полностью. В результате возникает противоречие с одной стороны, необходимо контролировать процесс, чтобы избежать его неправильного исполнения, а с другой желательно сделать его гибким и адаптивным. Произвольные переходы. Важным частным случаем гибкости ТП на практике является возможность совершать непредусмотренные произвольные переходы между разрешенными состояниями ТП. Такие произвольные переходы будем называть гибкими связями. Для решения проблемы реализации гибких связей в ТП предложен ряд подходов 2. Крупные платформы, как правило, допускают использование уже существующих в системе описаний ТП в качестве шаблонов и создание на их основе новых описаний ТП 2, 3. В результате либо порождается большое количество незначительно отличающихся друг от друга описаний ТП, либо теряется память об исходном описании ТП. Такие методы реализации произвольных переходов обладают следующим свойством. Каждый раз, когда в процессе эксплуатации программной системы возникает необходимость произвольного перехода, требуется вмешательство высококвалифицированного специалиста аналитика ТП или разработчика системы. Некоторые авторы для решения проблемы гибких связей предлагают существенно расширить стандартные представления о ТП. При этом такие расширенные ТП становятся применимыми для ряда задач с нечетко заданным технологическим алгоритмом. Например, в 4 описан декларативный подход к описанию ТП, подразумевающий использование ограничений, которые неявно определяют возможное упорядочение активностей. При таком подходе любой порядок активностей, не нарушающий ограничения, является допустимым. Данный метод выходит далеко за рамки области применимости ТП. В нем отсутствует само понятие технологического маршрута, информационная система в принципе не может подсказывать оператору правильное направление эволюции токена. Иначе говоря, такая информационная система приобретает чрезмерную гибкость и утрачивает средства контроля за правильностью исполнения ТП. Предлагаемый метод. В настоящей статье предложен новый метод реализации произвольных переходов в интерактивных системах, при котором необходимая гибкость заложена на этапе разработки описания ТП на языке высокого уровня. При этом описание исходного ТП заранее модифицируется путем добавления в него особых состояний и переходов. С точки зрения оператора, произвольный переход здесь мало отличается от обычного, и оператор может не знать, что в основе интерактивной системы лежит описание каких-либо ТП. Дальнейшее изложение ведется на основе программного продукта с открытым кодом perl-workflow 5 на языке Perl. Этот продукт представляет собой набор строительных блоков, предназначенных для добавления функциональности управления ТП в любую информационную систему. Этот набор особенно удобен для встраивания в интерактивные информационные системы, в частности с веб-интерфейсом. В продукте perl-workflow описание ТП понимается следующим образом. ТП задает правила эволюции отдельных, не связанных между собой объектов . ТП должен рассматриваться в совокупности с внешним механизмом принятия решения . Как правило, в качестве такого механизма выступает человек. Механизм принятия решения позволяет выбрать один из нескольких возможных вариантов перехода токена из данного состояния в какое-то иное. ТП в целом характеризуется ориентированным графом, вершины которого соответствуют состояниям, а переходы ребрам. Каждый токен движется по графу, вообще говоря, по своей индивидуальной траектории, образуя историю токена. Рассмотрим пример стандартного описания некоторого ТП на языке высокого уровня, применяемого в продукте perl-workflow. Это описание представлено в формате XML и почти совпадает с аналогичными описаниями ТП в других программных продуктах 2, 3. Пример 1. Данное описание исходного ТП соответствует прямоугольникам и стрелкам, изображенным на рисунке сплошными линиями. В интерактивной информационной системе, построенной на основе описания гибких ТП, будем различать штатный и особый режимы работы. В штатном режиме строго соблюдается технологическая дисциплина. При работе интерактивная система подсказывает оператору, в какие состояния разрешен переход из текущего состояния. В реальной жизни штатный режим работы реализуется не всегда. В процессе эволюции токена может потребоваться изменить порядок состояний, пропустить какое-нибудь из них или еще раз вернуться в некоторое состояние, в котором токен уже был. Для работы в таких условиях в системе предлагается использовать особый режим произвольного перехода токена в любое состояние из числа возможных, предусмотренных данным ТП. Для реализации этого режима предлагается расширить описание ТП, добавив в него еще одно особое состояние, соединенное с каждым из остальных по схеме звезда. Такое особое состояние будем называть STELLA. Для этого необходимо еще на этапе разработки системы внести следующие изменения в исходное описание ТП добавить новое состояние STELLA, из которого разрешены переходы в любое другое состояние из числа предусмотренных данным ТП в описание каждого состояния добавить безусловный переход в состояние STELLA. На рисунке состояние STELLA и связанные с ним переходы показаны штриховыми линиями. Приведем расширенный вариант описания ТП, соответствующего примеру 1. Пример 2. Журналирование гибких ТП. Одной из важных особенностей технологии ТП вообще и продукта perl-workflow в частности является автоматическое ведение истории последовательности всех состояний, переходов и действий для каждого токена. В системе с гибкими связями удобно иметь два типа истории. Первый тип это история, которая видна оператору. Оператор не обязан знать о существовании состояния STELLA и связанных с ним вспомогательных переходов, ему целесообразно показывать историю в удобной для человека форме. Например, если система выполнила сложный двухшаговый произвольный переход из состояния STATEA в состояние STELLA, а затем в состояние STATED, то оператору следует знать лишь о простом одношаговом переходе из состояния STATEA в состояние STATED. Заметим, что в системе технически отсутствует такой одношаговый переход. Второй тип истории предназначен для администратора системы и содержит все фактически сделанные переходы, включая переходы с участием состояния STELLA. Для реализации идеи двух историй авторами был разработан новый плагин для модуля perlworkflow, который позволяет регистрировать, но не отображать в истории для оператора переход в состояние STELLA. Таким образом, нарушение технологической дисциплины не будет заметно для оператора, просматривающего свою версию истории токена. В то же время администратор системы имеет возможность отслеживать всю историю, включая нарушения технологической дисциплины. Применение метода. Предложенный способ реализации произвольных переходов в ТП применим, например, в системах мониторинга. Здесь решается задача отслеживания эволюции токена, который движется по графу описания ТП. Для решения задачи мониторинга каждому токену исходной системы сопоставляется парный ему токен системы мониторинга . При составлении расширенного варианта описания ТП, который соответствует исходному ТП, содержащему N состояний, в предложенном методе добавляются новое состояние STELLA и 2N новых переходов . Таких новых переходов будет N штук за вычетом изначально разрешенных переходов. В отсутствие состояния STELLA нужно будет разрабатывать новый механизм различения изначально разрешенных и произвольных переходов, а квадратичный рост числа переходов усложняет описания расширенного ТП и повышает вероятность ошибок разработчика. Рассмотренный в настоящей статье подход удобен для интерактивных систем, особенно для таких применений, когда нарушения технологической дисциплины происходят редко и на разных стадиях выполнения ТП, то есть когда для большинства токенов дополнительные переходы оказываются ненужными и только затрудняют оператору восприятие системы. Предложенный метод в основном реализуется путем заблаговременного усложнения исходного описания ТП на языке высокого уровня. Полученные результаты расширяют область применимости информационных систем, построенных на основе технологии workflow. 