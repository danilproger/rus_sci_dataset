МИНИМИЗАЦИЯ РИСКОВ ПРИ РАЗРАБОТКЕ ПРОГРАММНЫХ СРЕДСТВ 

Рассматриваются проблемы, с которыми сталкиваются команды, разрабатывающие программные средства по методологии Scrum, а также влияние на качество программных средств неразрешение этих проблем. Предложены метрики, позволяющие количественно оценивать риски несвоевременного выполнения работ, связанные с простоем отдельных членов команды и неоптимальной декомпозицией запланированных работ на задачи. Предлагается метод, ориентированный на минимизацию рисков, которые связаны с неэффективной занятостью членов Scrum-команды в процессе итерации. Представлены алгоритмы для применения предложенного метода на этапах планирования и выполнения работ процесса разработки, организованного в соответствии с методологией Scrum.

 Многие компании сегодня рассматривают возможность перехода к инкрементной и эволюционной моделям процесса разработки программных средств ПС, так как каскадная модель процесса разработки ПС имеет ряд недостатков 1, 2. Более того, применение гибких методологий обусловлено необходимостью выпуска качественных ПС раньше конкурентов. Гибкие методологии разработки ПС, детализирующие и расширяющие инкрементную модель, а также хорошо зарекомендовавшие себя в условиях меняющихся требований, адаптированы и достаточно широко применяются в реальных проектах. Среди многообразия существующих гибких методологий одно из лидирующих мест занимает методология Scrum, которая, предоставляя каркас организации и управления процессом разработки ПС, успешно сочетается с методологиями, ориентированными на различные инженерные практики 3, 4, например, экстремальное программирование и разработку, управляемую тестами. Методология Scrum благодаря своей относительной простоте и адаптируемости широко используется компаниями, предоставляющими услуги по разработке и тестированию ПС. Как правило, Scrum-команда выполняет разработку ПС по требованиям заказчика, представленным в журнале требований к продукту в виде историй в течение итераций продолжительностью от двух до шести недель 35. Фиксированные временные рамки обусловливают выполнение только полезных и важных заказчику требований и выпуск работоспособных версий ПС на регулярной основе. Кроме того, декомпозиция требований на отдельные задачи всячески стимулирует членов команды к сотрудничеству, постоянному отслеживанию зависимости своих задач от результатов работы других членов. Тем не менее Scrum-команды нередко сталкиваются с проблемами невыполнения работ, запланированных в рамках итерации, вследствие изменения цели итерации, вызванного непредвиденной сменой приоритетов пользовательских требований, и срыва графиков выполнения запланированных работ 5. Как правило, риски, связанные с изменением цели итерации, предусмотреть сложно. Однако оценить риски невыполнения запланированных работ в рамках итерации и управлять ими вполне возможно. Проблема срыва графиков выполнения работ в течение итерации Согласно методологии Scrum, истории, выбранные для реализации в рамках итерации, можно рассматривать как достаточно независимые участки работы. Однако между задачами, на которые декомпозирована каждая история, как правило, существуют взаимосвязи, определяющие порядок их выполнения членами Scrum-команды. Пренебрежение данными взаимосвязями зачастую приводит к тому, что отдельные члены команды получают возможность приступить к выполнению назначенных им задач ближе к концу итерации. Подобные ситуации нередко имеют место в группах специалистов по обеспечению качества и технических писателей, когда результаты работы группы разработчиков невозможно протестировать или задокументировать за оставшееся до конца итерации время. Как правило, к концу итерации при невыполнении нормативов времени по реализации отдельной истории Scrum-команда поставлена перед следующим выбором получить отказ в приемке истории от владельца продукта и переместить ее в журнал продукта для доработки в рамках одной из последующих итераций получить одобрение в приемке истории от владельца продукта, сократив затраты времени на оставшиеся в рамках истории задачи, например, путем исключения задач, не выполнимых в рамках текущей итерации, либо уменьшения объемов работ по ним получить одобрение в приемке истории от владельца продукта, составив и передав ему список известных проблем, разрешение которых планируется в следующих итерациях. Каждый из этих вариантов приводит к снижению качества разрабатываемого ПС ввиду негативного влияния, оказываемого на ряд характеристик. Расширение временных рамок итерации либо уточнение скорости работы Scrum-команды может способствовать выполнению работ в срок, однако не разрешает проблему неэффективной занятости ресурсов. В данной работе описывается метод, призванный оценить организацию работ команды над историями в рамках итерации, управлять порядком выполнения работ и предложить алгоритмы по снижению рисков несвоевременной реализации требований заказчика. Термины и определения Определение 1. Определение 2. Определение 3. Задача независимый участок работы, выполнение которой можно поручить отдельному члену команды. Поскольку k-я история декомпозирована на задачи таким образом, что каждая задача может быть выполнена только одним членом команды, то каждой задаче w истории s можно поставить в соответствие исполнителя, роль которого играет член Scrum-команды. Определение 4. Каждый член команды m может быть неоднократно задействован в выполнении различных задач истории s, то есть играть роль исполнителя одной и более задач k-й истории, либо не иметь назначенных задач, что выражается следующим образом AssgnA M. В общем случае имеет значение последовательность выполнения задач, так как существует зависимость между ними. Исполнителем задачи w, как правило, является лицо, выполняющее приемку истории, например владелец продукта a. Определение 5. Определение 6. Свойство атомарности задачи исключает наличие в орграфе G петель и циклов, четко определяя изменение объема работ Scrum-команды над конкретной историей. Функция отражает время, необходимое исполнителю a для непосредственного выполнения работ над задачей w на момент времени t от начала итерации. Как правило, для хорошо оцененных исполнителем задач функцию можно рассматривать как невозрастающую и неотрицательную в течение итерации. Оценка времени выполнения работ членом команды Для каждой задачи w следует проанализировать множество W на наличие зависимостей. Подобный анализ содействует построению очередности выполнения задач. Определение 7. Негативное влияние на выполнение планов итерации в фиксированные временные рамки оказывает неэффективное использование рабочего времени членами Scrum-команды в результате незапланированных простоев. Рассмотрим время, необходимое исполнителю a для завершения всех работ над задачей w. Время ожидания T исполнителем a начала работ над задачей w можно определить как максимальное время, необходимое для завершения работ над задачами D. Если в истории s для некоторого члена команды m имеется более одной назначенной ему на исполнение задачи, например w и w, возможность одновременного выполнения таких задач исключается. При отсутствии ориентированного пути между w и w необходимо задать отношение зависимости между задачами. Для учета данной специфики необходимо преобразовать граф G в соответствии с приведенным далее алгоритмом. После преобразования графа G время ожидания начала выполнения некоторой задачи w исполнителем a на момент времени t от начала итерации также рассчитывается по формуле . Алгоритм преобразования графа истории Алгоритм, преобразующий граф k-й истории из множества S историй, запланированных для реализации в течение итерации, состоит из следующих шагов. Вход орграф истории s. 1. Выбрать очередного члена команды m из множества M членов Scrum-команды. 2. 3. Если для члена команды m в k-й истории имеется более одной назначенной ему для исполнения задачи, то есть Q 1, перейти к шагу 4. Иначе перейти к шагу 11. 4. Выбрать очередную задачу w из множества Q. Иначе перейти к шагу 5. 5. Из множества задач Q выбрать очередную задачу w, для которой выполняется условие ijN. Если просмотрены все задачи w, перейти к шагу 4. Иначе перейти к шагу 6. 6. Если в графе G существует ориентированный путь через вершины w и w, перейти к шагу 5. Иначе перейти к шагу 7. 7. 8. 9. Иначе перейти к шагу 5. 10. Заменить дугу дугой во множестве дуг E графа G и перейти к шагу 5. 11. Если рассмотрено все множество M членов команды, завершить алгоритм. Иначе перейти к шагу 1. Выход орграф истории s, в котором для задач, принадлежащих каждому непустому множеству D, есть возможность их одновременного выполнения соответствующими исполнителями. Минимальное время простоя члена команды Функция характеризует потенциальную величину времени простоя члена Scrum-команды, назначенного исполнителем a задачи w. Рассчитанное по формуле значение T позволяет определить историю и незавершенную задачу, на выполнении которой следует сосредоточиться участнику m Scrum-команды. То есть значение функции T отражает фактическую трудоемкость истории на момент начала итерации. Определение 8. Значение функции позволяет определить, можно ли теоретически завершить выполнение работ в рамках заданной истории за время, оставшееся до завершения итерации. История s потенциально выполнима в рамках итерации, если 0,1. Применение метода минимизации рисков при планировании работ в рамках итерации С целью минимизации рисков, связанных с неэффективной занятостью членов команды в течение итерации, на этапе планирования итерации необходимо придерживаться следующего алгоритма. 1. Отсортировать множество S историй, запланированных для реализации в течение итерации, по убыванию степени их важности. 2. Выбрать очередную историю s из множества S историй, запланированных для реализации в течение итерации. Если рассмотрены все истории из множества S, перейти к шагу 15. Иначе перейти к шагу 3. 3. Иначе перейти к шагу 5. 4. Декомпозировать историю на задачи. 5. Выбрать задачу w из множества задач V. Если рассмотрены все задачи истории s, перейти к шагу 10. Иначе перейти к шагу 6. 6. Определить множество задач D, от выполнения которых зависит задача w, основываясь на предварительной информации о задаче. 7. Если задаче w не назначен исполнитель из числа членов Scrum-команды, перейти к шагу 8. Иначе перейти к шагу 9. 8. 9. 10. Применить к истории s алгоритм преобразования графа G. После проведенных преобразований графа истории множество задач D для каждой задачи w k-й истории будет уточнено. 11. 12. Если для истории s выполняется 0,1, перейти к шагу 2. Иначе перейти к шагу 13. 13. Декомпозировать историю s на подмножество историй U с меньшим числом задач. 14. 15. Выбрать очередного члена команды m из множества M членов Scrum-команды. 16. 17. 18. Если рассмотрено все множество M членов команды, завершить алгоритм. Иначе перейти к шагу 15. Применение метода минимизации рисков при выполнении работ в рамках итерации В соответствии с методологией Scrum предполагается, что на ежедневно проводимых совещаниях каждый член команды отразит изменение объема работ над назначенными ему задачами. С целью минимизации рисков, связанных с неэффективной занятостью членов команды в течение итерации, на этапе работы над историями и задачами итерации продолжительностью T в момент времени tT от начала итерации необходимо выполнять следующие шаги. 1. Выбрать очередную историю s из множества S историй, запланированных для реализации в течение итерации. Если рассмотрены все истории из множества S, перейти к шагу 7. Иначе перейти к шагу 2. 2. Выбрать задачу w из множества задач V. Если рассмотрены все задачи истории s, перейти к шагу 4. Иначе перейти к шагу 3. 3. Для задачи w и ее исполнителя a обновить значение функции на текущий момент времени t от начала итерации и перейти к шагу 2. 4. 5. Иначе перейти к шагу 6. 6. 7. Выбрать очередного члена команды m из множества M членов Scrum-команды. 8. 9. Иначе перейти к шагу 7. 10. 11. 12. Если рассмотрено все множество M членов команды, перейти к шагу 13. Иначе перейти к шагу 7. 13. Если по истечении времени t, например, в момент проведения очередного ежедневного совещания, tT, перейти к шагу 1. Иначе завершить алгоритм. В заключение отметим, что предложенный в данной работе метод, основанный на формальной оценке трудоемкости работ, позволяет разрешить проблему неэффективной организации работ в Scrum-командах путем корректировки последовательности выполнения работ в течение итерации. На примере двух алгоритмов продемонстрировано применение метода на этапах планирования и выполнения работ процесса разработки, организованного в соответствии с методологией Scrum. Применение предложенных алгоритмов при планировании и выполнении работ в рамках Scrum-итерации способствует выполнению всего объема запланированных работ по разработке и тестированию ПС, следовательно, позволяет обеспечить заявленный уровень качества разрабатываемого ПС. 