ОЦЕНКИ ВРЕМЕНИ В МОДЕЛИ ПАРАЛЛЕЛЬНОГО ВЫПОЛНЕНИЯ ПРОГРАММ 

Одним из магистральных направлений развития информационных технологий является параллельное программирование. Модели параллельных вычислений и связанные с ними характеристики важны для построения программных систем. Они позволяют понять, какого ускорения можно достичь, используя параллелизм в программах. В данной работе представлена модель параллельных вычислений в вычислительной системе с общей памятью. Выполняемая программа рассматривается как множество модулей, связанных по данным. Эту связь отражает граф зависимостей. Целью настоящей работы является получение оценок времени выполнения программы одним процессором (T1), конечным числом процессоров (Тp) и для идеализированного случая – неограниченным числом процессоров (T∞). Такие оценки ранее получены в предположении, что все модули программы выполняются за одно и то же время. Рассматривается получение этих характеристик для более интересного случая, когда время выполнения модулей программы различно. Показано, что время выполнения программы для случая p процессоров удовлетворяет соотношению.

 Параллельные вычисления становятся одним из магистральных направлений развития информационных технологий. Можно указать две причины, определяющие его важность. Первая состоит в том, что стратегически важные для развития государства задачи могут быть решены только с применением суперкомпьютеров, обладающих сотнями тысяч процессоров, которые нужно заставить работать одновременно. Вторая причина связана с другим полюсом компьютерной техники, на котором находятся обычные компьютеры, ориентированные на массового пользователя. Эта техника становится многоядерной, ее необходимо эффективно использовать, так что параллельные вычисления требуются и здесь. Для поддержки параллельных вычислений сделано достаточно много начиная от архитектуры вычислительных систем, операционных систем, языков программирования до разработки специальных параллельных алгоритмов. Тем не менее программисту, решающему сложную задачу, построить и отладить эффективную параллельную программу все еще довольно трудно. В докладе 1 отмечалось, что к началу активного внедрения вычислительных систем параллельной архитектуры в практику решения больших прикладных задач не был построен нужный теоретический фундамент и не был развит математический аппарат исследований. Цель данной работы рассмотрение одной из моделей параллельного вычисления. Для нее необходимо получить оценки времени выполнения программы одним процессором T1, конечным числом процессоров Тp и для идеализированного случая неограниченным числом процессоров T. Предположим, что программа P выполняется на компьютере с некоторым числом процессоров, работающих на общей памяти. Выходные данные, полученные в результате работы модуля M, могут быть входными для модуля M. Так естественным образом возникает зависимость между модулями, определяющая возможный порядок их выполнения. Разобьем множество модулей на k уровней. К уровню i отнесем модули, для начала работы которых требуется завершение работы модулей, из которых хотя бы один принадлежит уровню i1. Модуль уровня i с номером k будем обозначать как M. Модули, принадлежащие уровню 1, имеют все необходимые данные, полученные от внешних источников. Они не требуют завершения работы других модулей и могут выполняться параллельно, будучи запущенными в начальный момент выполнения программы. Свяжем с программой P ориентированный граф зависимостей модулей. Граф не содержит циклов и отражает разбиение модулей на уровни. Модули являются вершинами графа, а дуги отражают зависимости между модулями. Дуга ведет от модуля M к модулю M, если для начала выполнения модуля M требуется завершение работы модуля M. В узлах графа содержится информация об ожидаемом времени выполнения модуля, где время измеряется в некоторых условных единицах. На рисунке 1 показан пример графа зависимостей. Введем обозначения T время, требуемое для выполнения программы P одним процессором, T p процессорами, T неограниченным числом процессоров. В последнем случае достаточно n процессоров . Предполагается, что все эти характеристики рассчитываются при соблюдении двух условий выполняются зависимости между модулями, заданные графом зависимостей характеристики вычислены для оптимального расписания работы процессоров. В случае одного процессора достаточно выполнения только первого условия. Обычно предполагается естественный порядок выполнения модулей последовательное выполнение модулей одного уровня, затем переход к выполнению модулей следующего уровня. Для случая неограниченного числа процессоров оптимальным является такое расписание, когда каждый модуль начинает выполняться сразу после завершения выполнения всех модулей, необходимых для его работы. Распределение модулей по процессорам совместно с графом зависимостей однозначно определяет расписание работ и время выполнения программы при данном расписании. Предполагается, что каждый процессор выполняет модули из распределения D. После завершения очередного модуля он сразу же переходит к выполнению следующего, если для этого модуля выполнены все зависимости, заданные графом зависимостей. В противном случае процессор ждет окончания работы требуемых модулей. Время завершения последнего модуля в распределении D задает время работы данного процессора. Тот процессор, который последним заканчивает работу, и определяет общее время решения задачи T для данного расписания. Введенная ранее характеристика T предполагает оптимальное расписание. Задача составления оптимального расписания относится к сложным 2. На практике для программ большого размера не удается явно вычислить значение T. По этой причине несомненный интерес представляет получение оценок для T. Для введенных характеристик выполняется естественное соотношение T T T. Представляет интерес получение более точных оценок для T. Рассмотрим вначале упрощенную ситуацию, предположив, что время выполнения всех модулей одинаково и равно t. Действительно, один процессор должен выполнить все модули программы, проходя, например, последовательно один уровень за другим. Действительно, пусть на первом уровне имеется n модулей. У них есть все необходимые данные, и они могут выполняться параллельно. Поскольку число процессоров неограниченно, то, запустив каждый модуль на одном из n имеющихся процессоров, за время t завершим выполнение модулей первого уровня. Тогда возможно параллельное выполнение модулей следующего i1-го уровня, число которых равно n. Для времени T получим оценки сверху и снизу. Понятно, что p процессоров могут выполнить вычисление n модулей уровня i за время, где x обозначает минимальное целое, большее или равное x. Отсюда следует, что общее время работы T задается формулой. Поскольку xx, то. Формула дает нижнюю оценку времени выполнения работы p процессорами T T p. Если на каждом уровне число модулей n кратно p, то оценка достижима. В лучшем случае p процессоров могут сократить время выполнения программы в p раз в сравнении со временем, требуемым для выполнения этой работы одним процессором. Вычислим теперь оценку сверху. Оценки для случая, когда время выполнения всех модулей одинаково, известны 3. Рассмотрим теперь, что происходит, когда модули программы для своего выполнения требуют разного времени. Для каждого из этих модулей известно время выполнения t. И в этом случае нетрудно рассчитать T время, требуемое на выполнение всей работы одним процессором. Далее выясним, как рассчитать время T при неограниченном числе процессоров. Здесь t время окончания работы того модуля уровня i1, который необходим для работы модуля M и из всех необходимых модулей завершает свою работу последним. Из формулы становится ясно, что время завершения последнего модуля уровня k и является временем T при оптимальном расписании работ. Справедлива следующая теорема. Теорема. Время T задается в графе зависимостей максимально нагруженным путем. Прежде всего докажем, что при неограниченном числе процессоров оптимальное расписание каждого процессора содержит не более одного модуля на любом из уровней. Доказательство дается индукцией по числу уровней. Для уровня 1 утверждение справедливо, поскольку на нем число процессоров совпадает с числом модулей этого уровня для оптимального расписания. Пусть утверждение справедливо на уровне j. Покажем, что оно остается справедливым и для модулей следующего уровня j1. Действительно, рассмотрим процессор P, выполняющий i-й модуль уровня jM. Когда этот процессор завершит работу, может оказаться, что появятся готовые к выполнению m модулей уровня j1, ожидавших завершения работы M. Только один из этих модулей включается в оптимальное расписание процессора P, а остальные будут включены в расписание свободных процессоров, участвующих в работе. Если таковых не окажется, всегда можно добавить новые процессоры, так что все модули, ожидавшие завершения работы модуля M, начнут выполняться одновременно. Отсюда по индукции следует справедливость утверждения для всех уровней, а также то, что T не может быть больше времени, задаваемого критическим путем. Покажем теперь, что оптимальное расписание может быть составлено таким образом, чтобы критический путь был назначен одному процессору. Пусть процессор P тот процессор, которому назначен M первого уровня, лежащий на критическом пути. Спускаясь по уровням, этому процессору будем назначать модуль, лежащий на критическом пути. Построенное таким образом расписание сохраняет свойство оптимальности, поскольку процессор P не простаивает и никакой другой процессор не может начать выполнение модулей, лежащих на критическом пути, раньше процессора P. Обратим внимание, что критический путь, вообще говоря, может быть не единственным. На этом доказательство утверждения закончено. Сложнее получить формулу для вычисления T. Проблема составления оптимального расписания в этих условиях относится к NP-полным проблемам, что означает отсутствие алгоритма полиномиальной сложности, и для решения задачи необходимы переборные алгоритмы. Покажем справедливость ранее полученных оценок для T в случае, когда время выполнения модулей различно и в графе зависимостей для каждого модуля задано время его работы. Дадим вначале графическую интерпретацию. Задание нижней и верхней оценок для T означает, что эта функция ограничена двумя гиперболами. Функция убывающая. Рисунок 2 иллюстрирует поведение T. Для примера рассмотрим двухуровневую систему модулей, граф зависимостей которых показан на рисунке 1. При наличии двух процессоров для этого конкретного примера несложно задать оптимальное расписание. Время работы как первого, так и второго процессоров равно 15. Следовательно, T равно 15. Критический путь входит в расписание второго процессора. Подключение второго процессора в этой задаче позволяет вдвое уменьшить время выполнения по сравнению с использованием только одного процессора. Подключение третьего процессора позволит свести время выполнения до минимально возможного результата T, это не так эффективно, поскольку время сократится незначительно. Добавление других процессоров не имеет смысла, так как время решения задачи не сокращается. Опишем получение оценок. Оценка снизу Лемма 1. Для T справедлива оценка. Докажем справедливость оценки снизу для T. Пусть p процессоров выполняют работу согласно оптимальному расписанию и ни один из них не простаивает до окончания всей работы. Справедливость нижней оценки следует из общих свойств суммы компонентов. Максимальный компонент всегда больше среднего арифметического значения суммы или равен ему. Если некоторые процессоры могут простаивать, то время T может только увеличиваться, что гарантирует выполнение условия . Лемма доказана. Равенство достигается в единственном случае, когда все компоненты суммы имеют одно и то же значение. Содержательно это означает, что все процессоры начинают и заканчивают свою работу одновременно. В этом случае общее время выполнения работы сокращается в p раз. Оценка сверху Пусть работу выполняют p процессоров. Составление расписания означает, что граф зависимостей разбивается на p непересекающихся подграфов. Все модули каждого из подграфов выполняются одним процессором. Подграф с максимальным временем выполнения для данного разбиения будем называть максимально нагруженным подграфом. Оптимальное расписание предполагает такое разбиение, при котором максимально нагруженный подграф выполняется за минимально возможное время. Ранее мы доказали, что оптимальное расписание может быть составлено таким образом, чтобы критический путь выполнял один процессор. Отсюда следует, что критический путь полностью принадлежит одному из подграфов. Итак, предположим, что граф зависимостей G разбит на непересекающиеся подграфы G . Не снижая общности, будем полагать, что максимально нагруженным подграфом является G. Лемма 2. Для T справедлива оценка. Доказательство от противного. Покажем, что в этом случае разбиение не является оптимальным и может быть улучшено, что приведет к уменьшению времени T. Итак, предположим, что. Подграфу G передадим часть работ подграфа G, уменьшив суммарное время работы. Действительно, подграф G это максимальный подграф, не содержащий критического пути, поэтому его можно представить в виде Здесь Path это часть пути или некоторый путь, начинающийся на первом уровне, который заведомо меньше критического пути. При передаче его подграфу G время выполнения этого подграфа остается меньше времени выполнения подграфа G. Общее время выполнения работ при этом уменьшится. Следовательно, выявляется противоречие с утверждением об оптимальности расписания, что доказывает справедливость соотношения. Лемма 2 доказана. В заключение дадим некоторые практические рекомендации, следующие из полученных оценок. Выигрыш, который можно получить, используя дополнительные процессоры, зависит от разницы между общим временем выполнения всех модулей программы T и временем выполнения критического пути в графе зависимостей T. Эта разница максимальна для крайнего случая, когда все модули могут выполняться независимо и в графе зависимостей все они находятся на одном первом уровне. Критический путь в этом случае состоит из одного модуля, требующего максимального времени своего выполнения. Так что, T это время выполнения всех модулей, а T время выполнения одного модуля. Привлечение p процессоров может дать существенный эффект, уменьшая время выполнения практически до среднего времени выполнения одного модуля T p. Эта разница минимальна для другого крайнего случая строго последовательной программы, когда N модулей программы расположены на N уровнях и критический путь задает выполнение всех модулей. В этом случае T и T совпадают и, как следствие, T равно T при любом числе процессоров, поэтому привлекать дополнительные процессоры в этом случае бессмысленно. Для строго последовательной программы, когда i-й модуль зависит от модуля i1, все три характеристики будут совпадать. Для строго последовательной программы дополнительные процессоры не позволяют уменьшить время выполнения программы в сравнении со временем выполнения этой же программы одним процессором. Так, например, задача о Ханойской башне на суперкомпьютере с сотнями тысяч процессоров будет решаться столь же долго, как и на компьютере с одним процессором. Это вытекает из сути задачи перенос следующего кольца требует завершения переноса предыдущего кольца, параллельно эту работу выполнять нельзя. 