ПРОГРАММНАЯ СИСТЕМА АНАЛИЗА ДИАГРАММНЫХ ЯЗЫКОВ 

Предложена клиент-серверная архитектура системы для анализа корректности графических потоков работ при проектировании сложных автоматизированных систем. Система представляет собой многослойную структуру. Презентационный слой является инструментальным средством создания диаграмм на визуальном языке (например, UML, IDEF, eEPC), входящем в состав программного комплекса методологии проектирования (RUP, ARIS и др.), или любым из редакторов, который имеет возможность расширяться плагинами. Слой логики предназначен для приема и передачи данных от плагина и наоборот. При передаче отдается XML-описание диаграммы, при приеме – список ошибок в формате XML. Доступ к серверу осуществляется по публичному API-интерфейсу. Слой обработки данных содержит универсальный анализатор диаграммных языков потоков проектных работ, в основу функционирования которого положен аппарат авторских графически автоматных RV-грамматик, обеспечивающих обнаружение и нейтрализацию ошибок за один проход анализа диаграммы. Контролируются синтаксические и семантические ошибки в анализируемых графических спецификациях потоков работ. Преимуществами анализатора являются линейное время анализа, полнота контроля, удобство визуализации ошибок. Разобран пример применения грамматики для анализа UML-диаграмм. Система реализована в среде Python на базе сервера Торнадо. Работа выполнена на кафедре «Вычислительная техника» Ульяновского государственного технического университета..

 В проектировании сложных автоматизированных систем активно используется графическое представление информации на базе диаграммных языков САПР. Среди диаграммных языков наиболее популярен UML. В статье технология анализа диаграммных языков рассматривается на примере UMLдиаграмм, хотя система, являясь синтаксическиориентированной, позволяет исследовать любые классы диаграмм. Представим сводную таблицу наиболее популярных программных продуктов для моделирования и описания бизнес-процессов, использующих диаграммные языки. Таблица построена на основе анализа сайтов Rational Software Architect 1, AllFusion ERwin Data Modeler 2, ARIS Platform 3. Очевидно, что системы ориентированы на использование 2-3 языков, имеют ограниченные средства контроля и анализа. Авторы предлагают универсальный анализатор диаграммных языков, ориентированный на групповое проектирование и позволяющий определять синтаксические и семантические ошибки, а также расширять графические нотации. Общие характеристики системы. Инструментарий позволяет выполнять следующие основные функции для пользователя создание диаграмм графических языков добавление новых нотаций диаграммнографических языков анализ построенных диаграмм по предварительно загруженным в систему описаниям языка и алгоритмам анализа добавление новых алгоритмов анализа с помощью плагинов добавление синтаксических и семантических правил графических языков создание взаимосвязи между построенными проектировщиками диаграммами мультидоступ к БД построенных диаграмм. Система должна иметь возможность подключения средств визуального проектирования, расширяемых плагинами кроме того, взаимодействие ее компонентов должно быть основано на открытых стандартах. При необходимости пользователь может разместить все элементы системы на одной машине и пользоваться ею как обычным приложением. Презентационный слой. Уровень презентационной логики реализуется различными системами проектирования, например, Rational Rose или BPWin. Большинство современных сред разработки позволяет использовать расширения. При разработке системы с множеством различных front-endкомпонентов стоит вопрос о создании протокола взаимодействия между элементами системы. Для решения этой проблемы предлагается написать промежуточный слой между сервером и клиентом слой рендеринга интерфейса. Слой рендеринга интерфейса. Данный слой отвечает за взаимодействие систем проектирования и анализа диаграмм. Он реализуется в виде плагина к системе проектирования и преобразует внутреннее представление диаграммы в формат, понятный серверу. В качестве базовых выбраны два наиболее распространенных формата JSON и XML . Основными задачами данного компонента являются следующие авторизация на сервере пользователь получит уникальную сессию на сервере, в рамках которой будет вести свою работу преобразование диаграммы в XMLJSONпредставление передача XMLJSON-представления на сервер получение списка ошибок от анализатора и передача его в презентационный слой. API для работы с анализатором. Анализатор сервис, работающий по принципам REST 4. Одним из преимуществ RESTful-сервиса является предоставление данных в удобном для пользователя формате. Технология REST использует базовые принципы передачи данных по http, это обеспечивает легкость реализации взаимодействия с сервисом и позволяет подключать всевозможные системы проектирования, написанные на различных языках программирования, без больших временных затрат. Сервер выполняет функции проверки на корректность описания диаграммы преобразования xml-описания во внутреннее представление, понятное RV-анализатору запуска анализа входной диаграммы вывода списка ошибок. Слой бизнес-логики. Диаграммы анализируются с использованием автоматных RV-грамматик 5. Схема работы анализатора представлена на рисунке 2. На этапе инициализации возможны два варианта загрузки диаграммы. При первом анализатору известно, какую диаграмму он анализирует. Из библиотеки грамматик выбирается нужная, и разбор происходит по ней. При втором анализатор получает только диаграмму и по первым 35 элементам выбирает нужную грамматику. На этапе анализа все элементы диаграммы поочередно считываются и подаются на вход автомата происходит изменение состояния автомата. Если при обработке сигнал исходит из текущего состояния, выбирается необходимый переход и выполняется операция с памятью, которая соответствует активному переходу. Если очередной элемент запрещен в данном состоянии, автомат переходит в режим восстановления. Режим восстановления это особое состояние автомата, в котором разрешается проблема обработки ошибочного входного элемента. Происходит восстановление состояния анализатора по методу продолжателей 6. Данный режим позволяет обнаружить не только первую ошибку в диаграмме, но и по возможности все ошибки, допущенные разработчиком. Запись об ошибке производится в момент перехода в состояние восстановления. Указываются место возникновения ошибки и диагностическая информация о ней. На третьем этапе формируется отчет об ошибках, обнаруженных в диаграмме. Если список пуст, возвращается сообщение о завершении анализа без ошибок. В противном случае формируется отчет со списком всех ошибок. Построение RV-грамматики происходит в две фазы синтез и анализ. Синтез RV-грамматики включает следующие этапы. 1. Определяется терминальный алфавит контролируемого графического языка, описывается расположение меток, выявляются семантические различия для связей, имеющих общее графическое представление, строится алфавит квазитермов. 2. Строится матрица допустимых паросочетаний для квазитерминального алфавита. 3. Определяются отношения над внутренней памятью, обеспечивающие эффективный контроль связности графических объектов. 4. По матрице допустимых паросочетаний строится граф RV-грамматики, вершинам которого поставлены в соответствие имена комплексов правил, а дугам квазитермы и операции над внутренней памятью. RV-грамматика может быть представлена не только в виде графов, но и в табличной и аналитической формах. Следует отметить, что разработаны грамматики для пяти видов диаграмм Активность, Последовательность, Варианты использования, Классы и Пакеты. RV-грамматика отличается линейным временем разбора, небольшими затратами памяти, обеспечивает необходимую полноту разбора и позволяет обнаруживать синтаксические и семантические ошибки. Таким образом, в статье рассмотрена архитектура системы анализа диаграммных языков. Система предусматривает возможность расширения на произвольное множество языков и подключение различных средств проектирования. По данной архитектуре реализован анализатор для среды моделирования и проектирования WIQA 7 . 