АБДУКТИВНЫЙ ВЫВОД VERSUS ДЕДУКЦИЯ 

В интеллектуальных системах очень важную роль стал играть абдуктивный вывод, цель которого заключается в выводе причины для наблюдаемого события. Дедукция играет немалую роль в организации абдуктивного вывода. Именно дедуктивные свойства абдукции являются центральной темой данной статьи. Рассматривается алгоритм ImpAA, осуществляющий поиск минимальных абдуктивных объяснений с помощью первичных импликат. Рассматривается алгоритм SOL-резолюции для нахождения множества первичных импликат и предлагается эвристика для сокращения поискового пространства в этом алгоритме.

 В настоящее время разработка формальных моделей разных форм рассуждения играет ключевую роль в создании интеллектуальных систем различного назначения. Известно, что индуктивный вывод это вывод от частного к общему, в то время как абдуктивный заключается в выводе причины из наблюдаемого события и является выводом от частного к частному. Вывод по абдукции успешно применяется для решения задач диагностики 1, понимания естественного языка 2, распознавания, накопления знаний, составления расписаний и, несомненно, является очень важной составляющей интеллектуальных систем. В данной работе рассматриваются понятия первичной импликаты и минимального абдуктивного объяснения, после чего изложен принцип нахождения множества минимальных абдуктивных объяснений с помощью первичных импликат, приводятся алгоритм SOL-резолюции для нахождения первичных импликат и алгоритм ImpAA для нахождения минимальных абдуктивных объяснений. Кроме того, предожен эвристический метод для сокращения поискового пространства в алгоритме SOL-резолюции, названный авторами методом выбора начального порядка литер в исходных дизъюнктах. Первичные импликаты Для организации абдуктивного вывода используется метод импликат, где под импликатой понимается следствие из формулы. Используются модификации этого понятия L, Ф-импликата и L, Ф-первичная импликата 3. Определение 1. Пример 1. Тогда a b, a b d являются L, Ф-импликатами формулы. Пример 2. Тогда a b является L, Ф-первичной импликатой формулы a b d не является L, Ф-первичной импликатой формулы. Решение задачи абдукции с помощью первичных импликат Определение 2. Определение 3 . Заметим, что на в определении 2 накладывается синтаксическое ограничение представляет собой конъюнкцию фактов. Определение 4. Пример 3. Заметим, что абдуктивное объяснение не должно быть противоречивым. Определение 5. Пример 4. Тогда Студент является минимальным абдуктивным объяснением относительно T. Существуют различные методы решения задачи абдукции. В данном случае рассматривается метод решения с помощью первичных импликат. В основе этого метода лежит принцип абдукции через дедукцию 4 Ф, применяя теорему о дедукции и аксиому контрпозиции, получаем Ф,. Доказана справедливость следующего утверждения 3. Утверждение. Пример 5. Для каждой из этих двух формул получаем соответствующее минимальное абдуктивное объяснение путем взятия отрицания a и b. Алгоритм ImpAA Для нахождения множества L, Ф-первичных импликат формулы применяется алгоритм SOL-резолюции, основанный на работах Ковальски и Кунера 5. Неформально суть его такова пусть формула Ф допускает дизъюнктивное представление S, тогда последовательно осуществляется резолюция формулы с дизъюнктами из S до того момента, пока не окажется, что полученный к данному моменту дизъюнкт D уже нельзя прорезольвировать ни с одним из дизъюнктов S. Для того чтобы не допустить вывод дизъюнктов, не являющихся первичными импликатами, в алгоритме используется механизм обрамления литеры, по которой имело место резольвирование 6. SOL-резолюция оперирует расширенными и структурными дизъюнктами. Определение 6. Пусть L множество литер ЛП1П. Обрамление литеры является способом запомнить, что по данной литере резольвирование уже было. Таким образом, если дизъюнкт содержит обрамленную литеру r, то это означает, что один из его родительских дизъюнктов содержит r. С логической точки зрения расширенный дизъюнкт не зависит от его обрамленных литер, то есть представляет собой дизъюнкт, составленный только из необрамленных литер данного. Целью обрамления являются организация последовательного поиска и обеспечение вывода только первичных импликат резольвирование дизъюнкта с дизъюнктами из Ф, содержащими литеру, по которой производилось резольвирование выше, бесполезно. Определение 7. Опишем кратко сам алгоритм. Первоначально из исходного дизъюнкта составляется структурный дизъюнкт, левая компонента которого является пустым множеством, а правая состоит из множества литер исходного дизъюнкта. Построенный структурный дизъюнкт подается на вход алгоритма SOL-резолюции, на выходе которого получается множество первичных импликат. Опишем действие алгоритма SOL-резолюции для произвольного узла дерева вывода. Со структурным дизъюнктом, связанным с этим узлом, можно выполнить два действия переместить первую литеру из второй компоненты в первую и прорезольвировать по первой литере со всеми подходящими дизъюнктами из базы правил, объединенной с начальным дизъюнктом . Процедура Skip перемещает первую литеру из второй компоненты в первую, после чего вызывается процедура Reduce, которая редуцирует вторую компоненту. Процедура Resolve перебирает все дизъюнкты из базы правил, объединенной с исходным дизъюнктом, если находит подходящий для резольвирования дизъюнкт, то осуществляются резолюция и редуцирование Reduce. Процедура Reduce удаляет из структурного дизъюнкта повторные литеры, а также все обрамленные литеры второй компоненты структурного дизъюнкта, которым не предшествует ни одна необрамленная литера. Алгоритм ImpAA Исходные данные clauses исходное множество дизъюнктов, observed наблюдаемый конъюнкт. Выходные данные result множество абдуктивных объяснений для observed . Начало. Шаг 1. Шаг 2. Результат выполнения процедуры множество implicates. Шаг 3. Добавляем explanation к result. Конец. Алгоритм SOLSolve Исходные данные clause дизъюнкт, для которого требуется найти множество L, Ф-первичных импликат ruleBase имеющаяся база правил lit множество литер, которые могут присутствовать в выводимых дизъюнктах. Выходные данные result множество L, Фпервичных импликат. Начало. Шаг 1. В качестве базы правил нужно взять имеющуюся базу правил, объединенную с clause. Шаг 2. Поиск всех первичных импликат с помощью выполнения шага 4. Шаг 3. Выбор из полученного на предыдущем шаге множества неповторяющихся дизъюнктов и запись их в result. Конец. Шаг 4. Поиск множества первичных импликат для поступающего на вход узла . Возвращается множество дизъюнктов, которые являются первичными импликатами дизъюнкта, образованного из необрамленных литер родительского структурного дизъюнкта topClause, и где резольвировать можно только по литерам из второй компоненты topClause. Для узла, в котором произошел вызов данного шага, выполнить шаг 5, получив множество дизъюнктов s1, и шаг 6, получив множество дизъюнктов s2. Возвратить s1 s2. Шаг 5. Рассмотрение 1 первой литеры из второй компоненты topClause. Если l lit, необходимо осуществить перенос литеры из второй компоненты topClause в первую, иначе Конец. Осуществить редукцию . Если вторая компонента topClause пуста, возвратить дизъюнкт, полученный из литер левой компоненты topClause. Иначе продолжить рекурсивный поиск для topClause выполнить шаг 4. Шаг 6. Резолюция первой литеры из второй компоненты со всевозможными дизъюнктами из базы правил. Осуществить редукцию всех полученных резольвент и с ними перейти к шагу 4. Шаг 7. Редукция поступающего на вход структурного дизъюнкта . Если в l, l литера l встречается дважды, то удаляется ее самое левое вхождение. Получаем l, l, l. Если какая-либо литера из a, a, a совпадает с некоторыми литерами из l, l, l, то удаляем из последнего множества эти литеры. Получаем l, l, l. Конец. Пример работы алгоритма SOL-резолюции Пример 6. Эвристический метод выбора начального порядка литер в исходных дизъюнктах в алгоритме SOL-резолюции Заметим, что уменьшение количества выведенных повторных дизъюнктов в алгоритме SOLрезолюции возможно за счет варьирования порядка литер в исходных дизъюнктах. На этом наблюдении основывается эвристический метод выбора начального порядка литер в исходных дизъюнктах. Метод заключается в упорядочении литер в дизъюнкте по возрастанию функции Rank, действующей из декартова произведения множества литер и множества множеств дизъюнктов во множество целых чисел. Пусть RuleBase множество дизъюнктов. Тогда ранг литеры r в RuleBase определяется следующим образом. Находятся дизъюнкты d, d, содержащие r. Тогда Пример 7. Вычислим значения функции Rank для литер a, a, b, b, c. Таким образом, на первых местах во второй компоненте расширенного дизъюнкта оказываются литеры, которые, по оценке авторов, приведут к порождению наименьшего числа дизъюнктов. Ранг 0 имеет та литера, по которой резольвирование вообще не происходит. Пример 8. В этом случае решение получается уже за 20 шагов. Ответ a b c, b c d, b c f, b c e, b c g. В заключение отметим, что абдуктивный вывод широко применяется в интеллектуальных системах различного назначения. В работе рассмотрен алгоритм ImpAA решения задачи абдукции с помощью L, Ф-первичных импликат. Собственно нахождение L, Ф-первичных импликат осуществляется по алгоритму SOL-резолюции. Недостатками этого алгоритма являются, вопервых, полный перебор, а во-вторых, в общем случае он находит повторные дизъюнкты. Авторы предложили эвристический метод выбора начального порядка литер в исходных дизъюнктах для сокращения поискового пространства. 