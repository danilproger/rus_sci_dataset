ПРОВЕРКА ДОПУСТИМОСТИ СХЕМЫ МАРШРУТИЗАЦИИ В СИСТЕМЕ RAPIDIO 

Предлагается алгоритм проверки схемы маршрутизации на допустимость в заданной системе RapidIO. Время работы алгоритма линейно зависит от количества маршрутов в проверяемой схеме..

 Система, построенная согласно спецификации RapidIO 1, состоит из оконечных устройств и коммутаторов, а также из соединяющих эти устройства двунаправленных физических каналов. Точки подключения каналов к устройствам называются портами. Каждое оконечное устройство обладает уникальным числовым идентификатором. Только оконечные устройства могут отправлять и принимать пакеты с полезными данными. Доставка отправленного пакета обеспечивается за счет возможностей коммутаторов перенаправлять пакеты коммутатор, на один из портов которого поступил пакет, на основании идентификатора пункта назначения выбирает выходной порт, куда перенаправляется пакет 2. Последовательная передача пакета между коммутаторами должна в конце концов привести к доставке пакета в пункт назначения. Хотя спецификация RapidIO не предписывает формат данных, на основании которых коммутатор принимает решение о перенаправлении, обычно используется таблица маршрутизации массив номеров выходных портов. Коммутатор использует идентификатор пункта назначения как смещение в этом массиве, по которому расположен требуемый номер выходного порта. Можно выделить следующие два типа коммутаторов, условно названных в данной статье коммутатор типа A и коммутатор типа B. У коммутатора типа A только одна таблица маршрутизации, и, следовательно, выбор выходного порта всегда однозначно определяется только одним идентификатором пункта назначения. У коммутатора типа B имеется отдельная таблица маршрутизации для каждого входного порта, что позволяет выбирать различные выходные порты для одного пункта назначения в зависимости от того, через какой порт поступил пакет. Последовательность каналов, через которые проходит пакет от отправителя до получателя, называется маршрутом между отправителем и получателем. Множество маршрутов для всех пар отправителей и получателей, между которыми требуется передавать данные, называется схемой маршрутизации. Описанные выше особенности коммутаторов накладывают ограничения на проходящие через них маршруты. Маршруты с общим пунктом назначения, входящие в коммутатор типа A, должны выходить из него через один порт. В случае коммутатора типа B то же верно для маршрутов с общим пунктом назначения, входящих через один порт. Если данные ограничения не соблюдаются, построить таблицы маршрутизации, соответствующие этим маршрутам, будет невозможно. Таким образом, проверить, что множество маршрутов некоторой схемы удовлетворяет ограничениям, накладываемым коммутаторами, можно путем построения таблиц маршрутизации для всех коммутаторов, задействованных схемой. Но при этом для хранения таблицы маршрутизации на каждом коммутаторе потребуется объем памяти, пропорциональный количеству оконечных устройств в системе. Пусть каждый маршрут задан в схеме маршрутизации в виде неупорядоченного набора каналов например, как результат пользовательского ввода или работы некоторого алгоритма. Но произвольный набор каналов необязательно является маршрутом. Маршрут должен удовлетворять следующим требованиям осуществлять доставку пакетов от устройства-источника к устройству-приемнику по единственному пути не включать каналы, не используемые при доставке от источника к приемнику не проходить дважды через один коммутатор не проходить более чем через 256 коммутаторов независимо от размеров системы 2. Схема маршрутизации, все маршруты которой удовлетворяют как этим требованиям, так и ограничениям, накладываемым коммутаторами, считается допустимой. В данной статье представлен алгоритм для проверки допустимости схемы, время работы которого линейно зависит от количества маршрутов в схеме, а объем используемой памяти не зависит от количества оконечных устройств в системе. Постановка задачи Обозначим множество коммутаторов типа множество коммутаторов типа множество оконечных устройств. множество всех коммутаторов, а множество всех устройств в системе. Будем представлять каждый двунаправленный канал в виде пары каналов, идущих в противоположных направлениях. Соответственно, каждый порт также будем представлять в виде входного и выходного порта. Каждому устройству сопоставим множество входных и множество выходных портов. Элементы множества каналов представляют собой кортежи вида, где, причем. Таким образом, канал связывает выходной порт одного устройства с входным портом другого. Будем обозначать множество каналов, входящих в устройство, и множество каналов, исходящих из него. Таким образом, систему можно рассматривать как ориентированный граф, в котором узлами являются устройства, а дугами каналы связи. В дальнейшем эти термины будут употребляться как равнозначные. Определение 1. Маршрутом из устройства-источника в устройство-приемник t E будем называть подмножество множества каналов, для которого выполняются следующие условия. R1. в маршруте есть только один канал, исходящий из устройстваисточника. R2. в маршруте есть только один канал, входящий в устройствоисточник. R3. в источник не входит ни один канал маршрута. R4. из приемника не исходит ни один канал маршрута. R5. в коммутатор может входить только один канал, принадлежащий маршруту если в коммутатор входит один канал маршрута, то из него также выходит один канал маршрута. R6. все устройства, через которые проходит маршрут, кроме источника и приемника, являются коммутаторами. R7. маршрут не может включать более 257 каналов. R8. Маршрут не содержит циклов. Определение 2. Определение 3. Маршруты и называются совместимыми на коммутаторе, если выполняется одно из условий маршруты не являются зависимыми на коммутаторе маршруты зависимы на коммутаторе и, то есть выходят из коммутатора через один канал. Определение 4. Рассмотрим множество и соответствие, сопоставляющее каждой паре подмножество множества каналов. Пару назовем схемой маршрутизации. Определение 5. Необходимо определить, является ли схема маршрутизации, заданная для некоторого графа системы, допустимой. Анализ задачи Условия R1R8 должны гарантировать, что маршрут представляет собой простую цепь, начинающуюся в и заканчивающуюся в. Теорема 1. Маршрут является простой цепью. Доказательство. Сначала докажем по индукции, что маршрут r всегда содержит единственную простую ориентированную цепь, соединяющую s и t. Пусть n количество каналов в простой цепи, исходящей из s и заканчивающейся на некотором устройстве d N. Пусть. Рассмотрим следующие случаи оконечное устройство тогда, согласно R6,. Таким образом, можно увеличивать длину простой цепи, пока ее конечным узлом не станет. После этого, в силу R4, дальнейшее удлинение простой цепи станет невозможным. Следовательно, построенная таким образом простая цепь всегда заканчивается в, и любой маршрут r содержит простую направленную цепь из s в t. Единственность построенной простой цепи из в вытекает из способа ее построения. Так как из выходит лишь один канал маршрута, как и из каждого задействованного коммутатора, то имеется лишь один способ построения простой цепи, выходящей из и входящей в. Более того, никакая другая цепь в маршруте существовать не может в силу R5, такая цепь не может начинаться или заканчиваться на коммутаторе, а в силу R1 и R6, единственное оконечное устройство, с которого может начинаться цепь, это. Тем не менее, условия R1R7 допускают наличие в маршруте каналов, не входящих в простую цепь, если эти каналы принадлежат циклам, проходящим только через коммутаторы. Но R8 запрещает наличие циклов в маршруте, следовательно, любой маршрут, удовлетворяющий условиям R1R8, является простой цепью, начинающейся в и заканчивающейся в. Теорема доказана. Теорема 2. Пусть множество маршрутов, попарно зависимых на заданном коммутаторе. Тогда отношение совместимости на множестве является отношением эквивалентности. Доказательство. Свойства рефлексивности и симметричности непосредственно вытекают из определения совместимости любой маршрут совместим сам с собой, и если маршрут совместим с маршрутом, то также совместим с. Докажем транзитивность рассматриваемого отношения. Пусть, и попарно зависимые на коммутаторе маршруты, причем совместим с и совместим с. Предположим, что несовместим с. Поскольку эти два маршрута зависимы на коммутаторе, они могут быть несовместимыми, только если выходят из коммутатора через различные каналы. В силу зависимости и совместимости и выходят из коммутатора через общий канал, а и выходят из коммутатора через общий канал. Так как маршрут не может выходить из коммутатора через два различных канала, то, и все три маршрута выходят из коммутатора через один канал, что противоречит предположению. Следовательно, и совместимы. Теорема доказана. Таким образом, отношение совместимости на множестве является отношением эквивалентности. Это позволяет утверждать, что можно проверить взаимную совместимость множества из зависимых маршрутов, выполнив всего проверок на совместимость отдельных маршрутов. Алгоритм проверки допустимости схемы Был разработан алгоритм, который одновременно выполняет проверку условий R1R8 и проверку маршрутов на совместимость. Алгоритм использует фиксированный объем данных для каждого устройства в системе. Начальные значения переменных curTarget и curRoute не должны совпадать с любым возможным для данной схемы пунктом назначения и маршрутом соответственно. Переменным in и out назначаются начальные значения в предположении, что никакой порт не может иметь такой номер. Для остальных переменных начальные значения не важны. R обозначает множество маршрутов схемы S. Ключевое слово fail означает завершение алгоритма и признание схемы недопустимой. Успешное завершение работы процедуры ValidateScheme означает допустимость проверяемой схемы. Для работы алгоритма необходимо, чтобы обрабатываемые маршруты были сгруппированы по пункту назначения. Алгоритм выполняет проход по всем каналам маршрута и для каждого задействованного маршрутом устройства записывает входной и выходной порты, используемые маршрутом, в переменные in и out . Если в переменной oldOut или oldOutsin коммутатора был записан выходной порт одного из предыдущих маршрутов с тем же пунктом назначения, то предыдущий и текущий маршруты проверяются на совместимость . После успешной проверки текущее значение out копируется в oldOut или oldOutsin в зависимости от типа коммутатора. Очевидно, что на совместимость проверяются только зависимые маршруты. В силу теоремы 2 используемый в алгоритме способ оценки совместимости текущего маршрута только с предыдущим зависимым с ним в конечном счете определяет совместимость всего множества зависимых на данном коммутаторе или входном порту коммутатора маршрутов. По теореме 1, выполнение условий R1R8 для множества каналов означает, что это множество представляет собой простую цепь. Покажем выполнение алгоритмом проверки условий R1R8. R1. Проверка наличия канала, исходящего из устройства-источника, выполняется в строке 15 установленный текущий маршрут говорит о том, что для устройства-источника была вызвана процедура SetOut, установившая выходной порт. Наличие нескольких исходящих каналов из источника определяется в строке 24. R2. Проверка наличия канала, входящего в устройство-приемник, выполняется так же, как и при проверке R1. Наличие нескольких входящих каналов в приемник определяется в строке 32. R3. Проверяется в строке 34. R4. Проверяется в строке 26. R5. Проверка того, что количество используемых входных каналов не превышает 1, выполняется в строке 32. Для выходных каналов аналогичная проверка выполняется в строке 24. Равенство количества входных и выходных каналов оценивается с помощью переменной unpaired, устанавливаемой в 0 перед обработкой маршрута. При первой записи используемого маршрутом порта коммутатора значение unpaired увеличивается в строке 56, а при последующей записи парного порта уменьшается в строке 54. После обработки всех каналов маршрута unpaired должна иметь значение 0 ненулевое значение означает отсутствие парности в одном или более коммутаторах. Эта проверка выполняется в строке 13. R6. Косвенно проверяется путем обеспечения невозможности задействовать иные оконечные устройства, кроме источника и приемника, за счет проверок в строках 26 и 34. R7. Проверяется в строках 57. R8. Так как маршрут должен содержать только простую цепь от источника к приемнику, в строках 1720 выполняется проход по этой цепи. Если количество каналов в цепи не совпадает с количеством каналов в маршруте, маршрут содержит цикл, что будет обнаружено в строке 21. Следовательно, временная сложность алгоритма составляет, где множество маршрутов схемы, а максимальная длина маршрута. Так как из R7 следует, то временная сложность составляет. Таким образом, проверка схемы маршрутизации на допустимость выполняется за время, линейно зависящее от количества маршрутов в схеме. Подытоживая, отметим, что в статье описывается алгоритм проверки допустимости схемы маршрутизации в заданной топологии системы RapidIO. Время работы алгоритма линейно зависит от количества маршрутов в схеме и не зависит от размеров системы. Объем используемой памяти линейно зависит от количества узлов в системе. Это позволяет использовать алгоритм для проверки интерактивно корректируемой схемы маршрутизации в реальном времени, например, подсказывая пользователю допустимость того или иного ввода. Кроме того, алгоритм может использоваться как подпрограмма в более общих алгоритмах автоматического или автоматизированного расчета схемы маршрутизации. 