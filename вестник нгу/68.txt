РАЗРАБОТКА СЕРВИСА ЗАДАНИЯ СЦЕНАРИЕВ ПРЕДЪЯВЛЕНИЯ СТИМУЛОВ   С ИСПОЛЬЗОВАНИЕМ МОДЕЛЬНО-ОРИЕНТИРОВАННОГО ПОДХОДА   

Современная физиология не может обойтись без методов количественного анализа данных. Необходимым условием для использования математической статистики, анализа сигналов и машинного обучения является на личие должным образом собранных, размеченных и подготовленных данных. С возможностью совместной обра ботки данных, собранных в разных условиях и в рамках разных протоколов экспериментов, появилась потреб ность в наличии структурированной метаинформации. В настоящее время существует множество программных  систем, позволяющих создавать, редактировать и запускать сценарии представления стимулов. Их проблемой  является сложность использования реализованного сценария как в рамках других систем, так и для аннотиро вания данных, полученных экспериментально. Целью работы является разработка сервиса, позволяющего зада вать сценарии представления стимулов с помощью графического интерфейса с возможностью сохранять мета информацию эксперимента в независимом от платформы формате и исполнять в закрытых системах.  В предлагаемом решении используется модельно-ориентированный подход. В основе платформенно-независимой  модели лежит открытый формат эксперимента PsychoPy. Для исполнения полученного сценария используется  платформа Neurobs Presentation. С помощью преобразования общей модели сценария эксперимента в модель  платформы и описания синтаксической структуры предметно-ориентированного языка Presentation автоматически  формируется программный код. Реализация данного подхода может быть расширена для других систем пред ставления стимулов. : модельно-ориентированный подход, кодогенерация, предметно-ориентированный язык, система предъявления стимулов. 

Количественный анализ данных является важным методом исследований в современной инструментальной физиологии. Высокой прогностической и диагностической значимостью обладают данные биоэлектрической активности головного мозга. Анализ данных количе ственной электроэнцефалографии кЭЭГ является перспективным направлением для приме нения математической обработки. В кЭЭГ используются такие параметры, как амплитуда, мощность, спектр, когерентность внутрии межполушарных взаимодействий и другие ха рактеристики осцилляторной активности головного мозга 1. Регистрация показателей может происходить в состоянии спокойного бодрствования с открытыми или закрытыми гла зами, при выполнении функциональных проб или когнитивных заданий. При создании экс перимента необходимо учитывать такие аспекты, как содержание и структура сценария, взаимодействие и синхронизация с аппаратными компонентами, формат выходных данных. В настоящее время существует ряд программных систем, позволяющих создавать, редак тировать и воспроизводить сценарии предъявления стимулов Cedrus SuperLab, Milli second Software Inquisit, Mitsar Psytask, Neurobs Presentation, Nottingham University PsychoPy, OkazoLab EventIDE, Psychology Software Tools E-Prime и др.. Большинство систем платные и позволяют сохранять сценарий либо в виде программы на собственном языке создания сценариев, либо в закрытом формате. Системы, в которых способом создания сценария является написание программы, обладают широкими возможностями исполне ния, но сложны для изучения и применения. Проблемой платных систем также является ограничение возможностей использования реализованного сценария как в рамках других си стем, так и для аннотирования данных, полученных экспериментально. Целью работы является разработка сервиса, позволяющего задавать сценарии предъявле ния стимулов с помощью графического интерфейса с возможностью сохранять метаинфор мацию о сценарии эксперимента в независимом от платформы формате и исполнять в систе мах с собственным языком описания сценариев. В предлагаемом решении используется модельно-ориентированный подход. В основе платформенно-независимой модели лежит открытый формат эксперимента системы PsychoPy. Для исполнения полученного сценария была выбрана платформа Neurobs Pre sentation. С помощью преобразования платформенно-независимой модели в модель языка Presentation и описания его синтаксической структуры автоматически формируется про граммный код. Реализация данного подхода может быть расширена для исполнения разрабо танного сценария в других системах предъявления стимулов с собственным скриптовым языком. Рассмотрим особенности создания, редактирования и сохранения данных экспериментов для систем задания сценариев предъявления стимулов табл. 1. Создание сценария эксперимента может происходить двумя способами с помощью собственного скриптового языка системы Presentation, Inquisit или с помощью графического интерфейса, функциональность которого иногда дополняют языком общего назначения или его расширением. Язык Inquisit похож на язык разметки и является декларативным. Он представляет собой набор именованных элементов стимулы, тестовые пробы, последовательности стимулов и т. п. и выражений присваивания для их параметров. Кроме констант, списков и ссылок на другие элементы, значениями параметров могут быть выражения арифметические, присваивающие и условные. Таким образом, потенциальная сложность языка может заключаться в описаниях параметров. В языке Presentation выделяются декларативная Scenario Description Language, SDL и процедурная Presentation Control Language, PCL части. Кроме того, в заголовке скрипта Presentation задаются настройки сценария Header. Декларативная часть языка позволяет описать набор элементов эксперимента и их параметров. В процедурной части есть возможность задать порядок предъявления элементов SDL, используя общие конструкции переменные, контейнеры, условия и циклы. Язык для описания сценариев Psytask включает в себя списки стимулов и проб, список предъявления проб и команд, обработку ответной реакции. Набор стимулов ограничен Обзор форматов, используемых основными системами предъявления стимулов Система Лицензия Способ задания сценария Формат сценария выходных данных E-Prime Комм. Графический интерфейс E-Studio, дополнительная функциональность реализуется с помощью языка E-Basic на основе Visual Basic формат для хранения и редактирования в E-Studio формат для исполнения в E-Run Inquisit Комм. Редактор для языка Inquisit текстовый файл скрипта EventIDE Комм. Графический интерфейс есть возможность использования XAML для графических элементов, дополнительная функциональность реализуется с помощью расширения языка C формат EventIDE Presentation Комм. Редактор языка Presentation и графический интерфейс для дополнительных настроек текстовый файл скрипта PsychoPy О. Графический интерфейс PsychoPy Builder редактор Python PsychoPy Coder файл формата XML, соответствующий XSD эксперимента файл программы на Python сериализованный Python объект Psytask Пр. Графический интерфейс загрузка файла сценария текстовый файл скрипта запись в базу данных SuperLab Комм. Графический интерфейс формат SuperLab Особенности систем предъявления стимулов с графическим интерфейсом Система Графическое представление последовательности предъявления Полнота графического интерфейса Универсальность системы E-Prime EventIDE PsychoPy Psytask SuperLab несколькими форматами, порядок показа линейный, без возможности рандомизации, за счет чего язык понятен и хорошо подходит для создания простых сценариев. Более универсаль ные предметно-ориентированные языки Inquisit, Presentation включают в себя понятия раз ных уровней от уровня предметной области функциональная проба до особенностей реализации цвет шрифта. Вместе с особенностями порядка предъявления стимулов рандо мизацией и обработкой реакции исследуемого такие языки будут достаточно сложными для людей, не знакомых с программированием. При создании сценариев с помощью графического интерфейса существующие системы используют формы для задания параметров. Кроме того, некоторые системы используют ви зуальное представление последовательности стимулов в виде потока работ PsychoPy, ориентированного графа EventIDE или древовидной структуры E-Prime . Системы E-Prime и EventIDE расширяют функциональность графического интерфейса с помощью расширений для языков общего назначения Visual Basic и C. Особенности графических систем предъявления стимулов показаны в табл. 2. Под полнотой понимается возможность задания любого реализуемого в системе сценария с помощью графического интерфейса без использования языка программирования. Универсальными названы системы со встроенной рандомизацией и возможностью проектировать нелинейные сценарии Сценарий в платных системах сохраняется в закрытом формате и может исполняться только внутри системы. В случае, когда сценарий является скриптом, его можно редактиро вать как текст. Форматы выходных данных чаще всего представляют собой набор значений delimiter separated values и хорошо подходят только для анализа показателей в рамках одно го исследования. Исполнение реализованного в определенной системе сценария невозможно без ручного переноса информации в другую систему. Различные аспекты сценария оформление стиму лов, настройки последовательности и времени предъявления, аппаратные особенности, фор мат вывода и пр. в большинстве случаев собраны вместе, затрудняя тем самым изучение и применение системы для создания и изменения сценариев. Кроме того, полезная для дальнейшей обработки данных метаинформация о сценарии эксперимента не может быть напрямую получена из закрытого формата эксперимента и из скрипта сценария. Для решения задачи платформенно-независимой разработки сценариев с использованием возможностей существующих систем предъявления стимулов графический интерфейс и функциональность и обеспечением модульной интеграции между ними наиболее целесо образно применить модельно-ориентированный подход 2 3. С архитектурой, управляемой моделями Model Driven Architecture, MDA, связывают стандарт MDA, разрабатываемый консорциумом Object Management Group с 2000 г. Со гласно методологии MDA модели являются главными элементами процесса разработки. Для конструирования программного приложения должна быть построена подробная, формально точная модель, из которой потом может быть автоматически получен исполняемый про граммный код. Под моделью понимается выборочное ограниченное представление некото рой системы, форма и содержание которого могут быть выражены с помощью набора понятий концептов. Для описания модели могут быть использованы различные нотации и форматы. Метамодель определяет абстрактный синтаксис языка моделирования. По стандарту Метаобъектного средства Meta-Object Facility, MOF различают четыре уровня моделирования M0M3. Языком описания верхнего уровня часто является Unified Modeling Language UML . В процессе модельно-ориентированной разработки можно выделить следующие шаги 4 1 создание модели предметной области, независимой от платформы Platform Indepen dent Model, PIM 2 создание модели платформы Platform Specific Model, PSM, которая определяет спе цифику конкретной реализации 3 преобразование PIM PSM, с помощью которой с каждым формальным понятием мо дели предметной области сопоставляется его реализация 4 генерирование необходимых артефактов. К каждому из шагов 13 можно возвращаться, расширяя модель. При этом изменения уже существующих элементов повлекут за собой изменения на следующих стадиях. В настоящее время существуют инструменты для применения стандарта OMG MDA . В работе использовалась свободно распространяемая система Eclipse Modeling Framework EMF 5. Проект EMF представляет собой платформу для моделирования с возможностью генерирования программного кода для создания инструментов и приложений на основе структурированной модели данных. В качестве модели верхнего уровня в EMF используется язык Ecore 6, который похож на UML, но формально не является расширением. Рассмотрим задачу разработки сценариев с точки зрения модельно-ориентированного подхода. На рис. 1 показаны разные уровни моделирования для платформенно-независимых PIM и платформенно-зависимых PSM моделей сценария эксперимента. В качестве модели верх него уровня в обоих случаях выступает Ecore. В терминах Ecore может быть описан физио логический эксперимент и эксперимент, реализованный в системе Presentation, которая вы ступает в качестве платформы. На уровне модели могут находиться сценарии конкретных экспериментов например, GoNoGo Task. В общей модели экземпляром эксперимента может быть его представление в виде потока работ, а в платформенно-зависимой скрипт языка Presentation. В качестве основы для платформенно-независимой модели была использована XML схема эксперимента системы PsychoPy . В соответствии со схемой сохраняются получаемые с помощью PsychoPy Builder эксперименты, при этом она достаточно общая и не содержит информации о деталях реализации. С помощью инструмента EMF была получена Ecore мо дель, соответствующая схеме на рис. 2. Платформенно-зависимая модель языка Presentation создавалась с помощью редактора Ecore моделей. Она содержит понятия языка, соответствующие его синтаксическим конст рукциям. На рис. 2. показаны концепты моделей верхнего уровня для описания структуры скрипта, выраженных с помощью Ecore. Работу системы можно представить в виде преобразований моделей рис. 3 1 получение экземпляра сценария 1 2 представление экземпляра сценария в виде экземпляра Ecore модели 1 2 3 преобразование платформенно-независимой модели к модели платформы Presentation 4 генерирование скрипта для исполнения на Presentation 3 4. Получение экземпляра сценария 1 происходит с помощью графического редактора PsychoPy. Далее, файл сценария в формате XML преобразуется к экземпляру обобщенной модели в формате Ecore с помощью сгенерированного Java кода. Преобразование 2 3 экземпляра обобщенной модели эксперимента в экземпляр модели эксперимента Presentation происходит на уровне M1. Для этого задается трансформация для моделей уровня M2. В предлагаемой реализации используется язык преобразования моделей Epsilon 7. Он выбран в силу того, что позволяет задавать трансформации Ecore-моделей и может запускаться в качестве независимого программного модуля. Трансформация пред ставляет собой набор правил, описывающих соответствие элементов обобщенной модели элементам платформы Presentation. Запуск преобразования начинается с корня XML-доку мента и рекурсивно вызывается для вложенных элементов с помощью механизма ленивого правила 8. Получение исходного кода происходит с помощью инструмента EMFText 9. На основе модели абстрактного синтаксиса и описания конкретного синтаксиса он позволяет получить ANTLR -парсер, кодогенератор и редактор для предметно-ориентированного языка рис. 4. Модель абстрактного синтаксиса представляется в формате Ecore. Модель конкретного син таксиса выражается с помощью файла в формате .cs, содержащего описание токенов, стилей подсветки для редактора и правил грамматики в форме Бэкуса-Науэра, где в качестве слу жебных символов используются элементы модели абстрактного синтаксиса и их атрибуты. Сервис представляет собой консольное приложение, написанное на языке Java и позво ляющее запустить цепочку преобразований исходного экземпляра сценария эксперимента, полученного с помощью интерфейса PsychoPy, в текст скрипта для исполнения на Presentation. На основе модельно-ориентированного подхода разработан сервис задания сценариев предъявления стимулов для физиологических экспериментов. Показана работоспособность данного подхода с помощью преобразования модели эксперимента в модель платформы и описания синтаксической структуры предметно-ориентированного языка Presentation гене рируется программный код. Полученный в результате запуска экземпляр модели сценария эксперимента может быть использован в качестве структурированного источника метадан ных о сценарии эксперимента. Таким образом, была осуществлена интеграция графического интерфейса PsychoPy и функциональных возможностей Presentation с помощью модельно ориентированного подхода. Использованный подход позволил организовать взаимодействие между различными сис темами за счет информации, выраженной в платформенно-независимой модели. Установле но, что для его применения к системам необходима информация о структуре сценария и ста бильность данной структуры для разных версий. Такие условия выполняются для систем с предметно-ориентированным языком создания сценариев. Применение подхода к системам с закрытым форматом не представляется возможным без получения дополнительной инфор мации. В дальнейшем планируется 1 расширение подхода для других систем предъявления стимулов, позволяющих зада вать сценарии с помощью предметно-ориентированного языка 2 реализация обратной трансформации получение экземпляров независимой от платфор мы модели на основе написанных скриптов Presentation, для чего нужно реализовать обрат ную трансформацию PSM PIM 3 добавление нового уровня моделирования для типовых функциональных проб закры тые и открытые глаза, классические протоколы. 