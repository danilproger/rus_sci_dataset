ПРОГРАММНЫЕ И АППАРАТНЫЕ СРЕДСТВА ИСПОЛЬЗОВАНИЕ ЯЗЫКА ОПИСАНИЯ ДИАГРАММ 

Обсуждается практическое применение языка DiaDeL для описания графо-подобных диаграмм на примере диаграмм состояний. Приводится пример известной диаграммы состояний телефона, автоматически построенной по описанию на предложенном языке. Язык -----позволяет формально определить графический синтак-----позволяет формально определить графический синтак позволяет формально определить графический синтаксис (нотацию) диаграмм заданного типа и связать нотацию с семантикой, заданной в форме набора классов.

Актуальность и эффективность практического применения двумерных графо-подобных диаграмм в настоящее время не ставятся под сомнение. Более того, большинство типов диаграмм имеет не только строго формализованную нотацию, но и семантику, что позволяет тем или иным образом интерпретировать их. Подобные диаграммы называются визуальными языками. Наиболее яркое применение они нашли в областях моделирования, проектирования и реализации программного обеспечения. Ранее нами был предложен язык описания диаграмм -ia-eL -iagram -efinition Language 13, основанный на предположении, что семантика каждой отдельной диаграммы задана в виде набора конкретных программных объектов определенных классов. Набор всех возможных классов объектов, которые могут появляться на диаграммах данного типа, называется семантической моделью, а набор объектов, соответствующих конкретной диаграмме, называется экземпляром ее семантической модели. Настоящая статья демонстрирует применение языка -ia-eL на примере построения диаграмм состояний с помощью системы, описанной в работах 1, 2. Существует множество различных диалектов диаграмм состояний. Из всех возможных выбраны диаграммы состояний языка UML 4, как наиболее показательные по ряду критериев диаграммы состояний очень важный и практически широко используемый тип диаграмм 5, 6 нотация позволяет продемонстрировать большинство возможностей языка -ia-eL существует полная и непротиворечивая спецификация семантики - существует реализованная семантическая модель -. Следует оговориться сразу, что в статье не приводится синтаксис языка -ia-eL, он рассмотрен в других статьях 1, 2. Основное назначение работы продемонстрировать выразительные способности и возможности языка. Первым шагом построения отображения диаграммы является анализ ее семантической модели. Цель анализа определить, удовлетворяет ли модель требованиям, предъявляемым языком -ia-eL. Весь процесс можно разбить на следую. Весь процесс можно разбить на следующие шаги. 1. Определение элементов, которые будут представлены на диаграмме, как фигуры или декорации. Для простоты будем называть их . 2. Определение элементов, которые будут представлены на диаграмме, как линии . 3. Определение корневого элемента, соответствующего самой диаграмме . 4. Проверка, что эти элементы предоставляют необходимую информацию в соответствии с требованиями -ia-eL а элемент-диаграмма и элементы-вершины, которые должны быть отображены, как контейнеры, предоставляют содержащиеся в них элементы-вершины в виде одного списка б элементы-вершины, которые должны на диаграмме иметь инцидентные элементы-связи, предоставляют их в виде одного списка в элементы-связи предоставляют элементвершину, инцидентную началу, и элемент-вершину, инцидентную концу. 5. Проверка, что всю остальную информацию, необходимую для отображения если таковая имеется, модель предоставляет не в виде списков или массивов, поскольку -ia-eL не поддержива-ia-eL не поддержива не поддерживает циклы. Семантическая модель диаграммы состояний отображена на рис. 1. Модель взята из официальной спецификации языка UML -. Для построеUML -. Для построе -. Для построения диаграмм состояний использовалась реализация модели EclipseUML v2.1 -. В ней все сущEclipseUML v2.1 -. В ней все сущ v2.1 -. В ней все сущv2.1 -. В ней все сущ2.1 -. В ней все сущности модели представлены интерфейсами, а все свойства имеют традиционный для Java вид, . Проанализируем представленную модель и пройдем по шагам описанного выше процесса. 1. Элементы-вершины это интерфейсы представляет состояние как простое, так и составное, представляет специальные вершины и представляет конечное состояние. 2. Элемент-связь это интерфейс представляет переход между состояниями. 3. Элемент-диаграмма это интерфейс представляет сам конечный автомат. 4. Проанализируем, предоставляет ли модель информацию в соответствии с требованиями -ia-ia-eL. Заметим, что информация должна предо. Заметим, что информация должна предоставляться с помощью вызова одного метода свойства или цепочки вызовов, которую можно записать через точки, например, . а. Как видно из диаграммы, модель поддерживает регионы внутри состояний и конечного автомата. Конечный автомат или состояние содержит список регионов, каждый из которых содержит вложенные состояния. В силу сжатости изложения мы не будем ставить цель отобразить регионы и примем допущение, что конечный автомат и составные состояния имеют ровно один регион, содержащий вложенные состояния. Следовательно, получить коллекцию вложенных состояний можно следующим вызовом, где это экземпляр, реализующий интерфейс или . б. Интерфейс базовый для всех элементов-вершин предоставляет отдельные списки исходящих и входящих элементов-связей. Следовательно, этому требованию модель не удовлетворяет. в. Интерфейс позволяет определить начало и конец перехода, используя свойства и . 5. Мы не будем описывать анализ всех данМы не будем описывать анализ всех данных, которые необходимо отобразить на диаграмме, ограничившись лишь тем, что не может быть обработано в секции для отображения согласно нотации. Заметим, что триггеры, которые инициируют переход, представлены списком ассоциация между и . Отобразить их необходимо в одну строку через запятую. Условие перехода ассоциация между и представляется набором объектов с корневым объектом класса эта часть модели на рисунке не представлена. Для конструирования из них строки условия требуется циклический обход. В силу ограничений подобную обработку невозможно написать в секции . Проведенный анализ показал, что экземпляры модели не могут быть использованы напрямую для отображения диаграммы состояний, и мы не можем изменить саму семантическую модель, поскольку она является внешним модулем для нашей системы. Решением в подобной ситуации может быть создание классов-оболочек, которые обертывают исходные объекты, предоставляют к ним доступ, а также предоставляют данные в удобном для обработки формате. Таким подходом является применение шаблона проектирования Адаптер, описанного в книге 9. Поскольку задача создания классов-оболочек является типовой и не представляет большого интереса, мы опустим описание ее построения, приведя лишь их структуру рис. 2 и краткие комментарии. Приведенная модель классов-оболочек построена на основании параметризованных классов. Базовый класс реализует доступ к объекту оборачиваемого класса оборачиваемый класс представляется везде параметром . Класс-оболочка для перехода позволяет получить триггеры и условие перехода сразу в виде строки. предоставляет доступ к инцидентным вершинам, как к объектам . Те, в свою очередь, предоставляют доступ ко всем инцидентным переходам через один список. Таким образом, решаются проблемы, обозначенные выше. Описание графических конструкций начнем с описания представления конечного состояния, которое изображается значком . Конечное состояние должно иметь фиксированные размеры, поэтому в качестве основной конструкции необходимо использовать декорацию. Она же будет отображать внешнюю окружность. Для отображения внутреннего круга прикрепим к основной декорации вспомогательную. Получится следующий программный код на языке -ia-eL По умолчанию все графические примитивы рисуются сплошным пером толщиной в 1 пиксель и закрашиваются белым цветом, поэтому здесь и далее значения по умолчанию в описании опускаются. Для правильного отображения конструкции ее необходимо связать с сущностью семантической модели. Вышеприведенный программный код связывает конструкцию с сущностью семантической модели и декларирует, что элементы-связи, которые должны быть отображены как ребра, инцидентные конечному состоянию, доступны через метод . Специальные вершины, так же как и конечное состояние, должны отображаться на диаграмме в виде значков фиксированного размера. Следовательно, для их представления необходимо использовать декорацию. Сложность заключается в том, что в семантической модели все специальные вершины представлены одной сущностью . В зависимости от типа определяется свойством, которым обладает экземпляр, его необходимо отображать, используя различные графические конструкции. В рамках данной статьи мы ограничимся отображением только следующих специальных вершин Поскольку отображаться они должны с помощью разных графических примитивов, то мы не можем взять за основу ни один из последних. Для решения этой проблемы используем следующий подход. Возьмем за основу декорацию без графического примитива и в центре прикрепим к ней декорации с различными графическими примитивами. В секции в зависимости от типа специальной вершины будем управлять видимостью прикрепленных декораций таким образом, чтобы на экране получались требуемые визуальные конструкции. Нам потребуется три вспомогательные декорации декорация в виде креста декорация в виде ромба декорация в виде круга или окружности приведена уже выше при описании представления конечного состояния. Ее можно использовать еще раз, расширив описанием шрифта для отображения текста. Таким образом, в описание, приведенное выше, необходимо добавить следующие строки Основная декорация, к середине которой крепятся все перечисленные выше конструкции Связь декорации с сущностью семантической модели Данный программный код написан в расчете только на отображение заявленных четырех типов, но его несложно расширить и на остальные типы специальных вершин. Самой сложной конструкцией у описываемой диаграммы является состояние. Состояние может быть простым рис. 3, и составным рис. 3, содержащим вложенные состояния, но должно отображаться одной конструкцией, поскольку в семантической модели это одна сущность. Более того, нотация UML-диаграмм состояний доUML-диаграмм состояний до-диаграмм состояний допускает перечисление внутри состояния действий, связанных с состоянием. Опишем сначала конструкцию, которая будет отображать на диаграмме состояние простым способом. А затем расширим ее так, чтобы она умела отображать состояние как в сложном, так и в простом варианте. Для представления состояния будем использовать фигуру, как конструкцию, позволяющую изменять свои размеры Для правильного отображения свяжем конструкцию с сущностью из обертки семантической модели и инициализируем в секции текст внутри конструкции названием состояния Этим небольшим программным кодом мы добились представления состояния в простом варианте. Проанализируем сложный вариант отображения рис. 4. Вся конструкция состоит из трех частей первая отображает имя состояния, вторая действия состояния, третья вложенные состояния. Следовательно, основную конструкцию можно описать как фигуру, состоящую из трех других фигур частей, расположенных вертикально. Первая часть будет отображать имя. Вторая часть, как и основная фигура, тоже состоит из трех конструкций, только они являются текстом. А третья часть является фигурой-контейнером, которая может содержать в себе любые конструкции-вершины диаграммы потому что составное состояние может содержать в себе не только другие состояния, но и специальные вершины, и конечное состояние. Итак, нам потребуется описать пять конструкций основную фигуру, три части и текст, из которого состоит вторая часть. Начнем с самого простого текста и первой части Вторая часть состоит из трех конструкций, расположенных вертикально. Для того чтобы отделить ее от первой части, укажем горизонтальную линию, рисуемую в самом верху фигуры в качестве ее графического примитива Третья часть содержит в себе все допустимые конструкции-вершины диаграммы. Содержащиеся конструкции могут быть расположены свободно внутри фигуры Модифицируем описанную ранее фигуру для простого варианта отображения состояния так, чтобы она состояла из трех представленных выше частей Определения для текста были убраны, поскольку мы больше не будем отображать внутри конструкции текст. Описание частей фигуры и их расположение добавлено. Значительные изменения претерпит и семантический мост, связанный с состоянием. Однако перед описанием изменений поставим еще одну задачу. Для того чтобы построенные диаграммы были компактней, не будем отображать части состояния в том случае, если они пусты. Таким образом, если у состояния нет вложенных состояний или других сущностей и нет связанных с ним действий, оно должно выглядеть, как в случае простого варианта отображения Теперь, когда состояние отображается составной фигурой и все вложенные состояния должны отображаться в третьей части, необходимо также описать семантический мост для нее, чтобы указать, как извлекать информацию из семантической модели о вложенных сущностях Обратите внимание, что семантический мост не связывает часть с конкретной сущностью, а ссылается на сущность родительской фигуры. Подобным образом указывается, что этот семантический мост должен быть использован в том случае, если фигура является частью другой фигуры. Пришло время описать графическое представление перехода. Переход должен отображаться следующим образом рис. 5. Конструкцию выше можно описать, как сплошную линию, к концу которой прикреплена открытая стрелка, а к середине текст. Объявлять новую конструкцию для текста необходимости нет, так как можно использовать уже объявленную конструкцию . Открытую стрелку опишем, как декорацию с графическим примитивом полилинией Описание конструкции для перехода будет основываться на линии с двумя прикреплениями Пара смежных вершин и входит в объявление дважды, поскольку графические связи в -ia-eL направленные. Свяжем линию соответствующей оболочкой из нашей модели-обертки Семантический мост для линии содержит объявления для определения инцидентных ее концам сущностей из модели и инициализацию метки на переходе. Для получения всех возможных триггеров, перечисленных через запятую, используется метод из обертки. Последним штрихом описания будет декларация самой диаграммы состояний и семантического моста для нее Получение коллекции сущностей, которые должны быть отображены на диаграмме, имеет несколько странный вид . Это обусловлено тем, что состояния и прочие сущности-вершины содержатся в диаграмме опосредованно, через регионы. Ранее, в разделе Анализ семантической модели, мы сделали предположение, что диаграмма и все составные состояния будут иметь ровно один регион, который и содержит все вложенные состояния и другие сущности-вершины. Используем приведенное выше -ia-eL-описание для построения экземпляра диаграммы состояний. Для этого нам понадобится экземпляр семантической модели, показанной на рис. 1, который будет отображен согласно описанию. В качестве экземпляра семантической модели возьмем машину состояний, моделирующую работу телефона -. Передав описание и экземпляр модели на вход системе автоматического представления диаграмм, мы получим результат, представленный на рис. 6. Построенная диаграмма соответствует графической нотации диаграмм состояний UML. Мы добились компактного представления состояний, т. е. отображаются только те секции состояния, которые содержат информацию для отображения. Диаграмма не лишена недостатков, но все они носят графический характер и являются недостатками системы визуализации. Следует также отметить, что вопрос укладывания построенных диаграмм лежит вне рамок языка -ia-eL, т. е. расположение вершин и ли-ia-eL, т. е. расположение вершин и ли, т. е. расположение вершин и линий, которое читатель видит на диаграмме, было выполнено вручную. В статье представлено практическое использование языка описания диаграмм -ia-eL на примере построения диаграммы состояний UML. Проанализирована входная семантическая модель, описаны на языке -ia-eL графические конструкции и их связь с элементами семантической модели. Приведена построенная диаграмма состояний. Пример использования языка -ia-eL показы-ia-eL показы показывает, что поставленные перед языком цели успешно достигнуты. Язык позволяет гибко определять различные графические конструкции и свойства их отображения, связывать конструкции с внешними сущностями и определять их конечное представление в зависимости от состояния представляемых сущностей. Платой за гибкость являются достаточно жесткие требования, предъявляемые к семантической модели. Однако их можно удовлетворить, разработав обертку для семантической модели, что в большинстве случаев не является сложной задачей для опытного программиста. Язык -ia-eL дает возможность определять конечное отображение конструкции в зависимости от состояния представляемого объекта. Это позволяет, с одной стороны, решить базовые задачи, такие как отображение имени или других данных, с другой стороны, создавать более сложные конструкции и подстраивать их представление под отображаемый объект, что вносит еще одну степень свободы в проектирование конструкций и связей между ними и сущностями семантической модели. Текущая версия реализации языка -ia-eL еще не может претендовать на промышленный уровень. Однако положенные в основу языка идеи обеспечивают его дальнейшее развитие. Концепция внешней семантической модели соответствует современному компонентному построению си стем. Текстовая форма языка дает возможность расширять его в дальнейшем новыми конструкциями в целях повышения удобства использования и предоставления новых возможностей. Эти и другие факты позволяют считать разработку языка -ia-eL востребованной и пер-ia-eL востребованной и пер востребованной и перспективной. 