СПОСОБ АВТОМАТИЗАЦИИ ПРОЦЕССА РЕФАКТОРИНГА 

Представлен способ автоматизации рефакторинга кода программы на языке Java при помощи языка спецификаций Maude, позволяющий проводить автоматическое доказательство корректности преобразованного рефакторингом кода, основываясь на семантике Java; создавать пользовательские рефакторинги на базе уже имеющихся.

Рефакторинг это изменение во внутренней структуре программного обеспечения ПО с це лью облегчить понимание работы ПО и упро стить его модификацию, не затрагивая наблюда емого поведения ПО 1. Наиболее часто под ре факторингом понимают процесс преобразования кода. Как следует из определения, ключевым мо ментом в применении рефакторинга является со хранение поведения ПО. Для проверки данного свойства необходимо формально описать и про грамму, подвергающуюся преобразованию, и сам рефакторинг. На сегодняшний момент существует множе ство различных способов формального описания рефакторинга и проверки сохранения поведения ПО после применения рефакторинга. Например, в работе 2 доказательством корректности пре образований кода является истинность набора пред и постусловий состояния программы в ра ботах с использованием аппарата теории гра фов это сравнение графа, полученного после преобразования программы и набора некоррект ных графов в работе 3 для доказательства ис пользуются строгие законы языка ROOL. Можно выделить следующие общие имеющихся способов формального опи сания рефакторинга. 1. Неполная спецификация целевого языка программирования как основа формализации ре факторинга, отсюда возможна некорректность проводимых преобразований кода. 2. Проведение доказательства корректности преобразований программы вручную, что трудо емко. 3. Отсутствие механизма для построения пользовательских рефакторингов, что ограничи вает уровень применимости подхода. На основе этих недостатков нами были сфор мулированы следующие к формаль ному описанию рефакторинга 1 базирование на спецификации целевого языка программирования 2 возможность автоматического доказатель ства корректности применения рефакторинга 3 возможность создания пользовательских ре факторингов. Исходя из представленных выше требований, нами предлагается способ описания рефакторин га, являющийся модификацией работы 4. В рам ках данного способа для формализации рефак торинга программ, написанных на объектно ориентированном языке Java, используется язык спецификаций Maude язык на основе логики переписывания rewriting logic. В нем любое по нятие, в том числе и рефакторинг, может быть описано тройкой, где множества sorts некоторых элементов операторы ope rators над множествами уравнения equa tions, задающие производимые операторами преобразования. В рамках проекта JavaFAN 5 для Maude в формальном виде была описана спецификация Java, что позволяет в полном объеме работать че рез Maude с семантикой Java Maude Java Seman tics MJS классами, переменными, объекта ми, их представлением в памяти и пр. Наше опи сание рефакторинга базируется на этой формали зованной спецификации Java. Maude является одновременно и интерпрета тором, т. е. все Maudeописания по умолчанию являются исполняемыми. Поэтому описание ре факторинга в Maude можно использовать и для автоматизации преобразований целевой про граммы, и для автоматического доказательства корректности этих преобразований. Рассмотрим подробнее, как выглядит к программе с учетом ис пользования Maude. На схеме рис. 1 можно выделить следующие этапы. 1. Javaпрограмма транслируется в Maudeопи сание при помощи средства JavaRL транслято ра кода Java в Maudeописание. Javaпрограмма представляется в Maude в соответствии с описанием MJS. JavaRL и MJS являются экспериментальны ми разработками в рамках проекта JavaFAN 5. 2. К транслированной программе применяет ся рефакторинг, описанный на языке Maude. Каждый рефакторинг представляется отдель ным модулем Maude. Пример описания рефакто ринга приводится ниже. 3. Делаются проверки корректности примене ния рефакторинга к программе. Если проверки пройдены, программа трансформируется, иначе возвращается неизмененная программа. Этот пункт является ключевым логика переписыва ния, на которой базируется Maude, и описание MJS, лежащее в основе каждого рефакторинга, обеспечивают формальную корректность прове денных над программой преобразований. 4. Программа транслируется обратно из кода Maude в код Java. Для предоставления возможности создавать пользовательские рефакторинги и облегчения ра боты по формальному описанию рефакторингов вводится концепция миниоператоров. Миниоператоры описывают часто повторяе мые в процессе рефакторинга действия над опре деленными элементами целевого языка програм мирования классами, функциями и т. д.. Важ ным свойством миниоператоров является сохра нение поведения программы, к которой они при меняются. Это достигается за счет реализации каждого оператора в рамках описания MJS. Миниоператоры делятся на три группы опе раторы запроса, проверки условий и мини трансформаций. Непосредственно при описании рефакторинга используются те или иные опера торы из каждой группы. Ниже приводятся сигнатуры некоторых опера торов на языке Maude. Реализация каждого опе ратора, основанная на MJS, здесь не приводится. рис. 2, получают опре деленный элемент целевого языка программиро вания например, класс, метод или поле по набо ру задаваемых параметров, например по имени элемента. Оператор получения метода с сигнатурой из класса с именем . Возвращает список . Так сделано для случая, если будет воз вращен identityэлемент, т. е. если искомо го метода не окажется в классе identityэлемент должен быть заключен в список. Identityэле мент это аналог NULLзначений в объектно ориентированном программировании. Оператор получения поля с именем из клас са с именем . Возвращает список . рис. 2, прове ряют элемент целевого языка программирования на выполнение определенного условия. Проверяет, является ли член класса статическим анализирует, есть ли ключевое сло во языка Java static в объявлении указанного поля или метода. Проверяет, является ли член класса константным анализирует, есть ли ключевое сло во языка Java final в объявлении указанного поля или метода. Оператор проверки использования в блоке кода поля . Возвращает натуральное число, определяющее, как используется поле 0 не ис пользуется, 1 пишется, 2 читается. рис. 2, изменяют свойства определенного элемента целе вого языка программирования. Оператор заменяет все обращения к полю в блоке кода на вызов метода . Возвраща ет трансформированный блок кода. Описанная выше концепция миниоператоров позволяет соз давать пользовательские рефакторинги рис. 3. Пользователь может на основе уже описанно го в Maude каталога рефакторингов и набора миниоператоров создавать новые рефакторинги. При этом новые рефакторинги добавляются в об щий каталог рефакторингов. Описание каждого рефакторинга является от дельным модулем Maude. В качестве примера ниже приводится описание рефакторинга Ин капсулировать Поле Encapsulate Field 1. Дан ный рефакторинг заменяет все прямые обраще ния к указанному полю определенного класса на обращения через методы set и get так называе мые сеттеры и геттеры. В листинге ниже жирным шрифтом выделены миниоператоры. Сам рефакторинг описывается оператором . Первый параметр имя класса, поле которого инкапсулируется второй пара метр имя инкапсулируемого поля. Затем идет равенство, в левой части которого стоит оператор, показывающий, что данный рефакторинг применятся к набору классов со стояния программы. В правой части равенства стоит условный оператор если выполняется набор предусловий рефакторинга, описываемый опера тором, то рефакторинг применяется к программе с помощью оператора если предусловия не выпол няются, возвращается исходный набор классов состояния программы. В приведенном листинге цифрами помечены предусловия в соответствии с номером условия в списке, приведенном ниже 1. Набор классов конфигурации не пуст Здесь identityзначение списка элемен тов 2. Существует класс с заданным именем 3. В этом классе существует поле с заданным именем Здесь identityзначение, возвращае мое миниоператором, если поля с задан ным именем нет в данном классе. 4. Не существует методов get и set для данного поля в данном классе 5. Инкапсулируемое поле не является стати ческим или константным Чтобы запустить MJSпредставление Javaпро граммы на выполнение в Maude, используется за пись, где набор классов программы, некоторое выражение. создает началь ное состояние, включающее в себя и континуа цию, в которой будет следующим к исполнению выражением. Континуацию можно понимать как стек, в который помещаются выполняемые ин струкции. Результатом выполнения программы будет значение атрибута финального состояния программы. Ниже для наглядности доказательство приво дится по шагам. В реальности Maude выполняет доказательство автоматически. Применение рефакторинга Инкап сулировать Поле не меняет поведения програм мы. Иначе говоря где все классы программы сле дующее к выполнению выражение в программе имя класса и поля в этом классе, к ко торому применяется рефакторинг. Если оператор возвращает, то возвращается неизмен ный набор классов . Следовательно, в данном случае теорема доказана. Если же возвращает, то тогда известно, что в есть класс с именем, содержащий нестатиче ское, неконстантное поле с именем и не имею щий для данного поля методов доступа сеттера и геттера. Доказательство осуществляется по следовательным применением равенств из ли стинга выше На данном шаге по имени находится класс, поле которого инкапсулируется, и в этот класс при помощи миниоператора добавляются методы доступа к этому полю. Да лее для каждого класса состояния программы, включая, выполняется следующая последова тельность На ее выходе определено тело каждого метода каждого класса . Затем проверяется условие В случае, если в указанном теле идет обраще ние к полю класса, тело метода модифициру ется если значение этого поля изменяется, обра щение к полю заменяется при помощи мини оператора на вызов сеттера если значение поля читается на вызов геттера. Оператор обновляет список классов состоя ния программы, обновляя измененное тело мето да в нужном классе. Как можно заметить, здесь все преобразования производятся только миниоператорами, а значит, поведение программы после применения данного рефакторинга остается неизменным. В работе представлена концепция по автома тизации рефакторинга кода на языке Java при помощи языка спецификаций Maude. Было вве дено и рассмотрено понятие миниоператоров, об легчающее формальное описание рефакторингов и позволяющее создавать пользовательские ре факторинги. В качестве примера дано описание рефакторинга Encapsulate Field на языке Maude. Через последовательное применение к программе равенств из данного описания рефакторинга по казано, что рефакторинг проводится корректно. В дальнейшем предполагается выделить на основе семантики языка Java полный набор миниоператоров по работе с кодом, описать их в Maude. Описать при помощи миниоператоров каталог рефакторингов Фаулера 1 в Maude. Ис следовать возможность применения композиции рефакторингов к программе. Построить инстру мент для ведения пользователем каталога рефак торингов, а именно создания своих собственных рефакторингов на основе набора миниоператоров и имеющегося базового каталога. 