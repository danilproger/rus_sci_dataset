ИСПОЛЬЗОВАНИЕ АВТОМАТИЗИРОВАННОЙ  КЛАССИФИКАЦИИ ИЗМЕНЕНИЙ  ПРОГРАММНОГО  КОДА В  УПРАВЛЕНИИ  ПРОЦЕССОМ  РАЗРАБОТКИ ПРОГРАММНОГО  ОБЕСПЕЧЕНИЯ 

Описывается метод автоматизированной классификации изменений в контексте контроля развития программного кода, основанный на статистической кластеризации метрик изменений исходного кода. Показано применение автоматизированной классификации изменений для оптимизации процесса просмотра исходного кода и автоматизации контроля изменений на ответственных стадиях разработки. Приведен способ построения отчета по параметрам процесса разработки.

Наиболее важным активом проектов по разработке программного обеспечения является исходный код системы. Большинство современных проектов хранит всю историю изменений исходного кода в специальном хранилище, которое называется системой контроля версий. Однако эта информация доступна только тем участникам проекта, которые технически подготовлены для анализа исходного кода, т. е. в основном разработчикам, в то время как над проектом работают еще и тестировщики, менеджеры и другие специалисты, которым может быть полезна информация, полученная из исходного кода в виде списков реализованной в конкретной версии функциональности, различных отчетов и т. п. Более того, анализ истории изменений исходного кода затрудняется большим объемом входной информации. В частности, хранилище исходного кода содержит массу мелких и незначительных изменений, которые осложняют поиск важных, с точки зрения анализирующего, изменений. Автоматизированная классификация изменений в качестве вспомогательного инструмента увеличивает производительность анализирующего при выполнении задач, связанных с анализом истории программных систем. В частности, использование автоматизированной классификации позволяет отфильтровать несущественные, по мнению анализирующего, изменения системы. Разработчик или технический лидер команды разработчиков может выделить изменения, которые привели, например, к реализации новой функциональности и сосредоточиться на них. С помощью автоматизированной классификации изменений технический лидер может автоматизировать запрет некоторых типов изменений на определенных стадиях разработки. Например, настроить инструмент автоматизированной классификации изменений так, чтобы при внесении изменения по реализации новой функциональности на стадии тестирования формировалось автоматическое уведомление о недопустимом изменении для технического лидера и автора данного изменения. В работе приводится несколько вариантов использования автоматизированной классификации изменений исходного кода участниками проекта, не связанными непосредственно с разработкой программного обеспечения. Автоматизированная классификация изменений дает возможность тестировщику получать информацию об изменениях, в которых реализуется новая функциональность, исправляются ошибки в виде исходного кода или текста комментария, ассоциированного с изменением. Менеджеру проекта метод классификации изменений позволит строить отчеты с распределением изменений по типам. Таким образом, применение автоматизированной классификации изменений исходного кода способствует повышению скорости и качества просмотра изменений кода, а также предоставляет дополнительные механизмы контроля состояния процесса разработки. Применяемый в работе метод классификации изменений базируется на кластеризации метрик изменений исходного кода алгоритмом средних Мак-Кина1,2. Адекватность классификации подтверждается в ходе эксперимента, описанного в работе 3. Получено значение коэффициента согласия Кохена 4, равное 0,79, которое лежит на границе значительной и превосходной степени согласованности экспертного и автоматизированного методов классификации 5. Автоматизированная классификация изменений может быть полезной всем членам команды разработки. Ниже подробно описаны возможные варианты использования инструмента, реализующего автоматизированную классификацию изменений программного кода всеми участниками проекта. Рядовой разработчик программного обеспечения часто сталкивается с необходимостью просмотра большого количества изменений. Например, при подключении к проекту, который уже имеет некоторую историю, или по возвращении из отпуска или командировки. В таких случаях ему приходится внимательно читать комментарий к каждому изменению, а если информации в комментарии недостаточно, то и просматривать содержимое изменения. Затраты времени на такой процесс могут быть существенными. Автоматизированная классификация изменений избавит разработчика от необходимости погружаться в детали каждого изменения. Ему достаточно выбрать набор типов изменений, который его интересует, и просмотреть изменения, соответствующие данному типу. На рис. 1 изображена схема просмотра изменений с выбранным фильтром по типу изменения. Автоматизированная классификация изменений пригодится разработчику для локализации ошибки, внесенной в код в определенный период времени. В этом случае разработчику будет достаточно выделить типы изменений, потенциально влияющие на выбранный модуль, и установить конкретное изменение, нарушившее работоспособность кода. Задачами технического лидера команды разработчиков являются, во-первых, регулярный обзор исходного кода и, во-вторых, контроль изменений, вносимых на текущей стадии разработки. Обзор исходного кода чрезвычайно полезная практика, состоящая в просмотре исходного кода на предмет поиска ошибок и проблем дизайна. Его выполнение позволяет выявить и разрешить большое количество проблем на ранней стадии разработки, пока исправление еще не требует больших затрат времени. Контроль изменений, вносимых на текущей стадии разработки, состоит в недопущении изменений, потенциально способных дестабилизировать систему на ответственной стадии процесса. По этим соображениям, например, недопустима реализация новой функциональности на финальных стадиях подготовки продукта к выпуску. Рассмотрим задачу обзора исходного кода. Одной из основных мер поддержания качества кода на высоком уровне является постоянный просмотр изменений, вносимых в код разработчиками. Команда программистов средних размеров генерирует большое количество изменений, что может приводить к физической неспособности технического лидера просмотреть все изменения. В таблице приведены результаты подсчета количества изменений, внесенных в систему контроля версий, за период, приблизительно равный одному месяцу, для трех проектов графического клиентского приложения для Subversion для Windows TortoiseSVN 6, клиент-серверной системы мониторинга флота Navi-Manager 7, разрабатываемой автором данной статьи в компании Транзас Технологии, и графической оболочки для Linux и Unix KDE 8. В некоторых проектах количество вносимых в исходный код изменений может быть очень большим. В этой ситуации технический лидер выбирает наиболее важные изменения, основываясь лишь на тексте комментариев к ним. Однако методика отбора изменений, не основанная на анализе кода, ведет к тому, что важным изменениям может быть не уделено должное внимание. Это, в свою очередь, приводит к потере контроля над качеством продукта. Выходом из этой ситуации является использование автоматизированной классификации изменений. Просмотр кода с использованием дополнительной информации о типе каждого изменения дает возможность отсеивать неинтересные техническому лидеру изменения для более подробного изучения важных изменений. Рассмотрим задачу контроля изменений, вносимых на текущей стадии разработки. В процессе реализации программный проект проходит несколько стадий. Например, при подготовке к выпуску версии объявляется состояние проекта, при котором запрещается внесение любых изменений в коде, кроме исправлений найденных ошибок. Эта стадия предназначена для стабилизации версии перед выпуском. Далее, когда все найденные ошибки исправлены, проект переводится в состояние, в котором разрешено внесение изменений только для исправления критичных ошибок. В качестве контроля обязателен просмотр каждого изменения еще одним членом команды перед внесением его в систему контроля версий. В этом состоянии версия исходного кода проекта находится в течение всего времени поддержки ее для заказчика. Каждая стадия ограничивает процесс разработки определенным набором действий. В частности, в течение стадий и от разработчиков ожидается деятельность по исправлению ошибок в коде, а не реализации новых функций. Автоматизированная классификация изменений позволяет автоматизировать процесс контроля внесения изменений на текущей стадии разработки. Достаточно предоставить информацию о допустимых на текущей стадии разработки изменениях. На рис. 2 показана возможность работы модуля по обнаружению нежелательных изменений. В процессе работы над проектом специалистам по тестированию приходится взаимодействовать с разработчиками для уточнения состояния проекта. Тестировщикам часто не хватает информации относительно новой функциональности, реализованной в очередной версии программного обеспечения. Иногда единственный достоверный способ выяснить полный список новых функций в конкретной версии программного обеспечения состоит в полном просмотре изменений кода за интересующий период. В этой ситуации применение автоматизированной классификации уменьшает время на проведение операции за счет отсеивания изменений, классифицирующихся как нечто кроме реализации новой функциональности. Менеджер проекта заинтересован в высокоуровневых показателях процесса работы. Информация о том, какая часть изменений производится в рамках реализации новой функциональности, по сравние. Существует несколько методов классификации изменений программного кода. Среди них можно выделить следующие группы 10 неформальные методы автоматизированная классификация изменений посредством анализа комментариев 11, 12, метод поиска и определения типа рефакторинга 13 методы анализа синтаксиса изменений эвристическое сравнение синтаксических деревьев версий 14 и анализ разницы версий при помощи встраиваемых в исходный код тегов 15. Метод автоматизированной классификации изменений 3, описываемый в настоящей работе, основан на кластеризации значений метрик изменений исходного кода при помощи метода МакКина 1, 2. В результате его работы производится разбиение множества изменений на заданное число кластеров, каждый из которых соответствует определенному типу изменений. Изменение кода программной системы трактуется в работе как отображение множества исходных данных в другое множество модифицированных данных В некоторых современных системах хранения исходного кода каждому состоянию исходного кода последовательно сопоставляется неотрицательное целое число, которое называется ревизией или версией программного кода. Поэтому каждое изменение исходных данных можно описать следующим образом Каждое изменение может быть отнесено экспертом к некоторому множеству типов изменений, где тип изменения . При этом представляет собой множество типов изменений, специфичное для каждого конкретного проекта. Состав множества определяется экспертом в зависимости от специфики проекта. Во множество обычно входят такие типы изменений, как реализация новой функциональности, рефакторинг, исправление ошибки и т. д. Задача отнесения изменения к тому или иному типу изменений трудоемка и требует высокой квалификации эксперта, так как нет четких критериев оценки типа изменения. Введем функцию интерпретации изменений, отображающую множество изменений во множество их типов В данном методе предлагается автоматизировать процесс выделения типов изменений при помощи кластеризации метрик изменений. В процессе кластеризации строится множество кластеров изменений такое, что каждое изменение относится к некоторому кластеру . нению с рефакторингом и исправлением ошибок, позволит оценить эффективность работы над проектом. На рис. 3 показано распределение изменений по типам для проекта Navi-Manager за один месяц стадии реализации новой функциональности. Можно сделать вывод, что проект Navi-Manager движется недостаточно быстро из-за того, что основные ресурсы команды разработчиков тратятся в основном на исправление ошибок, а не на реализацию основной функциональности. В настоящей работе предлагается использовать метод классификации изменений программного кода, который автоматизирует процесс разделения семантически различных изменений на основе значений метрик исходного кода. В качестве примеров можно привести следующие семантические типы изменений далее типы изменений реализация новой функциональности, рефакторинг 9, исправление ошибки, косметическое изменеВведем функцию автоматизированной классификации изменений, отображающую множество изменений во множество их типов Здесь функция автоматизированной классификации есть композиция функций кластеризации и интерпретации кластеров Функция кластеризации отображает множество изменений в множество кластеров. Функция интерпретации кластеров отображает множество кластеров в множество типов изменений . Функция кластеризации может быть построена с помощью метода кластеризации МакКина. Кластеризацию изменений будем осуществлять на основе некоторых метрик изменений . Определим понятие метрики изменения через понятие метрики программного обеспечения. Метрика программного обеспечения software metric это мера, позволяющая получить численное значение некоторого свойства программного обеспечения или его спецификаций 16, например, количество строк исходного файла, цикломатическая сложность 18, количество ошибок на строку кода, количество классов и интерфейсов, связность и другие. Тогда метрику изменения программного обеспечения можно определить как разность значений метрики измененного кода и метрики исходного кода . Зададим набор метрик программного обеспечения Тогда для каждого изменения можно построить набор метрик изменения Тогда это точка в -мерном пространстве кластеризации. Мерой расстояния между точками в этом пространстве выберем евклидово расстояние Теперь разбиение на кластеры может быть задано следующим образом где величина, определяющая меру близости для включения объектов в один кластер. Пусть известно число кластеров, выбран набор метрик и мера расстояния между точками пространства кластеризации принята евклидовой. В соответствии с методом кластеризации МакКина алгоритм кластеризации изменений следующий. 1. Произвести начальное разбиение множества объектов случайным образом 2. Принять номер итерации 1. 3. Определить центры кластеров по формуле 4. Обновить множества распределения объектов по кластерам min 5. Проверить условие где операция взятия симметрической разности множеств Если условия выполнены, то завершить процесс, иначе перейти к шагу 3 с номером итерации 1. Приведенный алгоритм позволяет автоматизировать процесс разбиения множества изменений на кластеры. В каждый кластер группируются наиболее схожие друг с другом изменения. Подбор подходящего количества кластеров и построение функции интерпретации кластеров производится экспертом на основе выборочного анализа изменений, принадлежащих каждому кластеру. Эти задачи значительно менее трудоемки, чем исходная задача, так как на практике имеет смысл различать лишь небольшое число типов изменений. В процессе построения функции интерпретации кластеров экспертом анализируется изменение исходного кода и комментарий, сопровождающий изменение. В результате устанавливается, какому из типов соответствует данный кластер . При невозможности сопоставления кластера изменений экспертному типу следует повторно обратиться к выбору метрик для кластеризации. Для оценки согласованности автоматизированной и экспертной классификации в работе 3 используется коэффициент Кохена 4. Коэффициент Кохена представляет собой меру согласия, с которой два эксперта конкурируют в своих сортировках элементов по взаимно исключающим категориям. Эксперта в данном контексте может представлять человек или множество людей, которые коллективно распределяют элементов, или некоторый алгоритм, который распределяет элементы на основе некоторого критерия. Выражение для расчета коэффициента согласия Кохена следующее где относительное наблюдаемое согласие между экспертами вероятность обусловленности этого согласия случайностью. Если эксперты находятся в абсолютном согласии между собой, тогда 1. Если же согласие между экспертами отсутствует но не по причине случайности, тогда 1 По результатам эксперимента 3 получено значение 0,79, которое лежит на границе значительной и превосходной степени согласованности двух методов классификации 5. Описанный в работе метод может быть использован участниками практически любого проекта по разработке программного продукта. Инструмент, разработанный для применения метода на практике, в момент публикации поддерживает только один тип системы контроля версий Subverison 19 и языки программирования С, C, для которых возможен расчет метрик 16, 17 цикломатической сложности 18 эффективного количества строк кода без учета пустых строк и комментариев общего количества классов и структур . Использование автоматизированной классификации изменений программного кода в процессе разработки проекта Navi-Manager позволило сократить время на просмотр исходного кода и повысить его качество, оперативно разрешать запросы на список новой функциональности в конкретных версиях без привлечения разработчиков, а также выявить существующую проблему эффективности разработки. В результате применения автоматизированной классификации изменений исходного кода для анализа проекта Navi-Manager был достигнут значительный уровень согласованности экспертной и автоматизированной классификации. При использовании метода проявляется проблема смешанных изменений, сочетающих в себе разнородные модификации кода. Настоящим методом не всегда возможна корректная классификация таких изменений. Нужно заметить, что наличие смешанных изменений на практике нежелательно и даже вредно. При их наличии усложняется процедура просмотра кода и другая работа с историей программного продукта. Выделение смешанных изменений в отдельный тип в процессе кластеризации и решение других проблем метода является целью дальнейших исследований. Еще одно направление дальнейших исследований анализ устойчивости метода кластеризации и учет эволюции характера изменений в программном коде при анализе длительных промежутков времени разработки проекта. Преимущества описанного метода классификации изменений по сравнению с другими методами классификации изменений состоят в следующем для анализа используется исходный код, а не, например, комментарий, сопровождающий изменение. Оценка по исходному коду адекватна в отличие от классификации комментариев к изменениям, ведь комментарии могут не в полной мере соответствовать характеру изменений 20 множество метрик программного кода выбирается в зависимости от того, по каким аспектам изменений предполагается группировка при кластеризации задается лишь результирующее количество групп. Следовательно, для каждого отдельно взятого проекта предложенный метод позволяет выделить специфичные множества изменений, которые затем интерпретируются как те или иные семантические группы изменений классификация изменений производится с помощью формальных статистических методов. В данной работе было предложено использовать автоматизированную классификацию изменений программного кода в управлении процессом разработки программного продукта. Применение автоматизированной классификации позволяет повысить эффективность и качество процесса обзора исходного кода, а также дает возможность автоматизации контроля изменений, вносимых на ответственных этапах разработки. Предлагается применять автоматизированную классификацию изменений программного кода для предоставления списка новой функциональности в конкретной версии продукта для тестировщика, а также построения отчетов распределения изменений по типам для менеджера проекта. 