МЕТОДИКА СОСТАВЛЕНИЯ КОНТЕКСТНЫХ ТРЕБОВАНИЙ  К ПРОГРАММНЫМ СИСТЕМАМ ЛОГИЧЕСКОГО УПРАВЛЕНИЯ  

 современные методики составления формальных требований к поведению программ не дают инженеру механизмов, позволяющих структурировать разрозненную информацию о будущей системе. Работа посвящена одному из обязательных этапов формальной проверки корректности программных систем логического управления — составлению спецификации требований. Результаты: предложена методика составления контекстных требований к поведению программ логического управления при помощи схем целей. Методика строится на упорядочивании темпоральных причинно-следственных связей между событиями системы и контекста ее функционирования. Формально требования задаются на языке линейной темпоральной логики. Практическая значимость: методика демонстрируется на примерах разработки требований к двум системам логического управления.

Программные системы логического управления относятся к классу реагирующих систем 1. Их основная функция реагировать на воздействия внешнего окружения других программных компонент, оборудования или пользователей. Такие системы характеризуются бесконечным поведением, а не преобразованием входных данных в выходные. К настоящему времени формальная проверка корректности реагирующих систем достигла впечатляющих успехов разработаны формальные основы доказательства корректности реализованы программные пакеты верификации крупные разработчики программных систем включили совокупность методов верификации, называемых Model checking проверка модели, в технологический цикл проектирования программ. В то же время проблема выбора, формирования множества тех требований к поведению реагирующей программы, которые необходимо проверять, остается открытой. Эта проблема является неформальной нельзя построить алгоритм, генерирующий требования к поведению программы из технического задания на ее разработку. Какие требования к реагирующей программе должен сформировать разработчик для доказательства ее корректности Из интуитивных соображений естественно предположить, что формально должны проверяться требования к поведению программы, гарантирующие в совокупности абсолютно правильное ее функционирование. Однако известно, что, за исключением тривиальных случаев, невозможно выразить формально требование полной, абсолютной правильности функционирования программы вследствие того, что это понятие не формализуемо. Это обстоятельство соответствует общему принципу, согласно которому не может быть выполнена никакая полная формальная проверка корректности алгоритмов. Следует, однако, констатировать, что в настоящее время не существует приемлемой инженерной методики спецификации требований к поведению систем логического управления, помогающей разработчику принять решение. В статье рассматривается проблема составления и формализации требований к программным системам логического управления. Мы предполагаем первичность требований требования строятся до того, как разработана программная система. Любая методика составления требований к системам логического управления должна структурировать информацию об их поведении. Существующие классификации формул темпоральной логики 24 направлены на выявление классов формул, исключающих ошибки, типичные для взаимодействующих параллельных процессов безопасность, живость, отсутствие блокировок, справедливость. Такие классификации не дают ответа на вопрос, как формировать требования, отражающие функционирование реагирующей системы, из технического задания. В практических рекомендациях предлагается выбирать требования по функциональным иерархиям, построенным из общих соображений. Например, в работе 5 функциональную иерархию составляют разделы информационные потоки, описание процессов, конструкции данных, словарь данных. Такое обобщение задает лишь направление выбора требований, но не дает механизмов их построения. Предлагаемое в работе решение основано на следующем наблюдении. Задачей реагирующей системы является поддержание шаблонов взаимодействия с окружением в том контексте, в котором функционирует система. Взаимодействие системы с ее окружением в общем случае может быть разнообразным. Рассмотрим класс требований к поведению реагирующей системы, определяемый темпоральными отношениями причины и следствия между событиями. Этот класс требований назван контекстным. Цель данной работы разработать методику, позволяющую выразить контекстные требования к поведению реагирующей системы на языке линейной темпоральной логики Linear Temporal Logic LTL посредством анализа темпоральных отношений причины и следствия между всеми событиями, инициируемыми системой и ее окружением. На практике требования не удается построить сразу, поскольку приходится структурировать большой объем слабо систематизированной информации о будущей программной системе. В качестве основы используется одна из методик составления требований к программам методика схем целей problem frame approach, разработанная М. Джексоном 6. С ее помощью требования к программе строятся из технического задания на разработку программы и всех других возможных источников итеративно, путем систематизации отношения между системой и объектами ее окружения. Методика схем целей была изначально разработана для выявления статических отношений, типичных для программ обработки данных. Ее использование для формирования темпоральных требований к реагирующим программам требует модификации. Именно модификация методики М. Джексона в целях формирования требований к поведению реагирующих программ составляет предмет данной работы. Модифицированная методика опробована на примерах разработки спецификации требований к системе управления лифтом и системе управления энергоснабжением судна. Идеи методики схем целей основываются на принципах, сформулированных Э. Хоаром и Ж.-Р. Абраилем при разработке Z-спецификаций. Приведем их. Разрабатываемая программа есть будущий объект реального мира, в котором она должна реализовать некие цели. Чтобы определить эти цели, мы должны изучить будущую программу с разных ракурсов, используя техническое задание и информацию из других источников, подобно тому, как мы разглядываем новый предмет. Информация о каждой цели собирается в одной схеме. Язык схем является графическим. В схему включаются объекты реального мира, взаимодействующие при реализации цели, а также феномены будущей программной системы события, переменные, константы, отношения, разделяемые во время взаимодействия. Для того чтобы цель была реализована программой, к ней необходимо предъявить соответствующее требование. Требование также указывается на схеме. Разработка требования начинается с составной схемы, отражающей общие представления о цели, потом последовательно составная схема и соответствующее требование уточняются, насыщаются деталями. Уточнение завершается, если схема приведена к одной из так называемых элементарных. М. Джексон выделил пять целей, к которым, с его точки зрения, сводится большинство целей программ. Эти цели отражают шаблоны отношений, реализуемых программами чаще всего. Именно такие цели описываются элементарными схемами. Например, элементарная схема TRM определяет функцию преобразования системой заданных входных данных. Остальные элементарные схемы можно найти, например, в работе 6. Множество типов таких целей М. Джексон оставил открытым. Чтобы продемонстрировать возможность определения темпоральных отношений между событиями с помощью методики М. Джексона, зададим цель обработки события вызова лифта системой управления лифтом на языке схем целей. Вызов поступает из кабины лифта или с площадки этажа. Схема этой цели в терминологии М. Джексона представлена на рис. 1. Требование обработки вызова можно сформулировать так Всегда, если поступил вызов, то лифт когда-нибудь прибудет на данный этаж и остановится. На схемах требование формулируется коротко на естественном языке в овале с пунктирной границей. Требование задается к главному объекту схемы машине. Машиной М. Джексон назвал функцию будущей программной системы в соответствии с данной целью. Машина задается на схеме прямоугольником с двумя вертикальными чертами . Машина не обязана реализовываться как отдельный модуль системы. Чтобы реализовать цель, машина взаимодействует с другими объектами внешнего мира. Они определяются на схеме в прямоугольниках. На рис. 1 к объектам, кроме машины, относится и, объединяющий пользователей, двигатель, шахту лифта, этажи здания. При реализации цели объекты связываются друг с другом по интерфейсам. Интерфейсы изображаются на схеме прямыми сплошными линиями. Через интерфейсы объекты обмениваются феноменами. Феноменами в методике М. Джексона могут быть статические отношения, параметры, константы, события. Феномены определяются на интерфейсах надписями в формате Объектфеномен. На рис. 1, например, КД двигаться означает, что Контроллер движения дает команду двигателю лифта начать движение. На пунктирных прямых линиях, связывающих объекты и требования, установлены конкретные значения параметров, которые входят в развернутую формулировку требования. Пунктирная линия со стрелкой направлена к объекту, который ограничивается требованием. Например, на рис. 1 требование определено относительно следующих булевых переменных этаж вызван с площадки или из кабины лифта, лифт находится на этаже, дверь лифта открыта. Развернутое требование к ограничению пропуска этажа хотелось бы задать следующим образом Всегда, если поступил вызов, то когда-нибудь в будущем лифт доедет до этого этажа и откроет двери . Согласно оригинальной методике, схема на рис. 1 уже есть элементарная схема Required Behavour RBV. Элементарная схема RBV определяет требуемое поведение системы перечислением множества событий на рис. 1, и . Разные темпоральные отношения, заданные на одинаковом множестве событий, не будут различаться на схемах целей по методике М. Джексона. Он рекомендует такие отношения определять отдельно, вне схем, другими средствами, например системой переходов 6. Далее в этой работе методика схем целей будет модифицирована так, чтобы с ее помощью задавать контекстные темпоральные требования. В частности, мы будем использовать в качестве феноменов только события и цепочки событий, а также фиксировать темпоральные отношения между событиями. Сформируем контекстные требования к поведению программной реагирующей системы как требования к причинно-следственным отношениям между системой и окружением. Пропозициональная LTL является расширением классической логики высказываний. Ее формулы строятся на множестве атомарных высказываний при помощи булевых операций и темпоральных операторов Until, NextTime по следующей грамматике Кроме того, для сокращения записи вводятся дополнительные темпоральные операторы оператор будущего и глобальный оператор где true. Семантика формул LTL задается на бесконечных словах 1, представляющих вычисления реагирующей системы. Определим два типа темпоральных отношений причины и следствия отношения отклика и предшествования. Рассмотрим сначала элементарные отношения, когда причиной-стимулом является одно событие и следствием-реакцией также одно событие. Мы будем отслеживать источники событий при формировании отношений и требований. Важно, чтобы события контекста входили либо только в причину, либо только в следствие. Отношение, когда по стимулу контекста когда-нибудь в будущем система должна обеспечить реакцию, назовем отношением отклика. Оно формализуется на языке LTL так, . Отношение отклика часто встречается в требованиях к программным системам логического управления, например Всегда, если пользователь вызвал лифт, то когда-нибудь в будущем лифт прибудет на этаж вызова. Отношение отклика становится нереализуемым, если переставить источники стимула и реакции если источником стимула выступает система, а источником реакции окружение, то такое отношение отклика требует гарантии специфического поведения окружения. Но система не может заставить окружение выполнить то или иное действие. Рассмотрим другое отношение отношение предшествования если когда-нибудь в будущем возникнет реакция, то до этого момента возник стимул . Этот тип отношения на языке LTL формулируется так Событие контекста может участвовать в отношении предшествования либо как стимул, либо как реакция. Для единообразного масштабирования и общности формул будем ограничивать появление стимула в отношениях отклика специальным событием и появление реакции в том же отношении при помощи события . В отношениях предшествования при помощи события ограничивается только появление реакции, в частности, во введенных ранее элементарных отношениях и . Зафиксируем это явно, переписав формулы элементарных отношений Далее, давая примеры возможных формулировок требований на естественном языке, будем для простоты полагать, . Чтобы сформировать контекстные требования, необходимо учесть отношения отклика и предшествования в структурах взаимодействий, отражающих различные фазы функционирования программных систем логического управления. Такие фазы выбраны из практики работы систем, например, их можно найти в работах 7, 8. Наиболее часто встречается глобальная фаза отношение должно гарантироваться на протяжении всей работы системы в каждом состоянии. Также часто распространена регулярная фаза, когда отношение необходимо требовать каждый раз в некотором режиме работы системы, ограниченном специфическими событиями. Начальная и финальная фазы появляются реже. Типичным примером начальной фазы является следующая ситуация. При запуске системы пользователю требуется установить некоторые настройки, которые во время работы системы не меняются. В финальной фазе система переходит по некоторым параметрам в невозвратный режим и в этом режиме должна особым образом обрабатывать события контекста. При задании контекстных требований каждой фазы на языке LTL мы абстрагируемся от семантики и сосредоточимся на формальном описании взаимодействий с помощью последовательностей событий. Требование к глобальной фазе задает выполнение отношения отклика или предшествования в каждом состоянии поведения системы. На естественном языке требование к глобальной фазе для отношения отклика можно описать так Всегда, если появился стимул контекста, то когда-нибудь в будущем возникнет реакция системы для отношения предшествования Всегда реакция возникает непосредственно после появления стимула. Например, приведенное выше требование обработки лифтом вызовов должно выполняться в глобальной фазе. Формализуются требования глобальной фазы следующим образом Здесь и далее в формулах фаз формула это формула либо, либо . Чтобы первый блок событий не состоял из непрерывного блока реакций, формулу глобальной фазы с отношением предшествований необходимо умножить на . Требование выполнения отношения отклика предшествования в финальной фазе можно сформулировать так После первого события, определяющего финальную фазу, всегда гарантируется, что по стимулу когда-нибудь в будущем наступит реакция, или формально где событие фиксирует начало финальной фазы. Требование отношения отклика в начальной фазе естественно сформулировать так Каждый стимул, поданный до конца начальной фазы, будет когда-нибудь обработан а требование с отношением предшествования Каждой реакции, поданной до конца начальной фазы, непосредственно предшествует стимул. Запишем эти требования формально где событие фиксирует завершение начальной фазы. Чтобы избежать первого блока событий реакций, формулу с отношением предшествования также необходимо предварить . В начальной фазе влияние ограничения событием становится существенным. При формировании контекстного требования начальной фазы к исходному ограничению добавляется ограничение наличия начальной фазы . Требование отношения отклика в регулярной фазе будет таково Всегда, если установлено событие и когда-нибудь в будущем произойдет событие, то на каждый стимул, поступивший до события, когда-нибудь будет выполнена реакция. Запишем LTL-формулу требования для обоих отношений где начало и завершение режима определяются событиями и соответственно. Эти требования построены в предположении, что переменные, независимы. В общем случае соответствующие события могут задаваться булевыми выражениями и быть зависимыми. Тогда для проверки адекватности требований обязателен дополнительный анализ. Определенные выше требования заданы относительно конечных цепочек событий с отношениями отклика и предшествования. Требования, формируемые в условиях бесконечного поведения контекста, должны быть представлены формулами LTL следующего вида где задает одно из контекстных требований к конкретной фазе функционирования системы, определенной выше, а характеризует требование к бесконечному поведению контекста. В частности, известные классические требования с условиями справедливости в нашей терминологии являются требованиями с бесконечным поведением контекста. В рамках предложенной структуры контекстные требования легко масштабируются на случай более сложных отношений отклика и предшествования, когда стимул и или реакция задаются цепочками событий, с соответствующими ограничениями, . Для этого нужно определить расширенный вариант отношений отклика и предшествования на языке LTL Формулы контекстных требований задаются по шаблонам, указанным выше, в соответствии с конкретной фазой эксплуатации системы. Классификация введенных контекстных требований на языке LTL представлена на рис. 2. В этом разделе будут разработаны элементарные схемы контекстных требований и определена процедура их формирования. Цели, реализуемые контекстными требованиями см. рис. 2, идентичны. Общую их структуру можно сформулировать так Система должна гарантировать выполнение некоторого отношения в конкретной фазе функционирования. Чтобы упростить методику составления требований для таких целей, разобьем их на две взаимосвязанные цели. Цель отношения устанавливает необходимое отношение Система должна гарантировать выполнение некоторого отношения. Другая цель устанавливает контекстное требование Система должна гарантировать цель отношения в конкретной фазе функционирования. В соответствии с этими целями построим два типа элементарных схем. Схемы отношений, следуя методике определения целей М. Джексона, будем представлять графически, однако семантика графических элементов и связей будет другой. Элементарные схемы отношений представлены на рис. 3, . Объекты, инициирующие события-стимулы, связаны с требованием пунктирной прямой, а реакции прямой со стрелкой. Чтобы различать схемы отношений отклика от схем отношений предшествования, установлен порядок объектов, инициирующих стимулы и реакции. На графической схеме отношения отклика блок с объектами, инициирующими стимул, находится выше блока с объектами, инициирующими реакцию. На схеме отношения предшествования порядок следования блоков противоположный см. рис. 3, . Чтобы задавать последовательности стимулов, введены точки сбора цепочки событий. Порядок следования стимулов определяется порядком следования объектов в соответствующем блоке сверху вниз. Если стимул в цепочке стимулов следует раньше, то объект, инициирующий стимул, расположен на схеме выше объекта, инициирующего . Для реакций введены аналогичные обозначения. Элементарные схемы контекстных требований задаются для определенных выше фаз функционирования. Эти схемы иерархические, т. е. они ссылаются на элементарные схемы отношений. Ссылка обозначается овалом со сплошной границей рис. 4. Иерархические схемы были использованы М. Джексоном в работе 6, хотя впоследствии не применялись. На элементарных схемах контекстных требований устанавливается порядок следования событий, определяющих фазы. На рис. 4 приведена схема для регулярной фазы, остальные схемы строятся аналогично. Событие начала фазы предшествует отношению, фаза завершается событием, такой порядок восстанавливается по порядку расположения прямоугольников объектов, инициирующих соответствующие события, и ссылки на отношение сверху вниз. Теперь определим процедуру формирования контекстных требований при помощи схем целей для отношения отклика для отношения предшествования процедура аналогична. 1. Когда в техническом задании либо в прочей доступной информации обнаруживается некоторое событие окружения, влияющее на поведение системы, то необходимо исследовать, не является ли оно реакцией или стимулом для действий системы. 2. Если событие окружения является стимулом и есть реакция системы, то необходимо зафиксировать цель гарантии соответствующего отношения отклика в элементарной схеме см. рис. 3, . Дополнительно отношение должно быть исследовано на влияние цепочки стимулов или реакций. 3. Необходимо проанализировать, в какой из фаз функционирования система должна гарантировать полученное отношение. Результат анализа фиксируется в элементарной схеме рабочей фазы см. рис. 4. 4. По полученным элементарным схемам определяется LTL-формула, выражающая соответствующее контекстное требование. Если согласно предложенной процедуре не удалось установить контекстное требование, то следует действовать по оригинальной методике схем целей. Одним из частных случаев, не описываемых ни одной из предложенных элементарных схем, будет требование с бесконечным поведением окружения. Продемонстрируем уточнение целей и построение LTL-формулы контекстного требования по схеме для цели обработки вызовов см. рис. 1 системы управления лифтом. Событие ВД вызов на интерфейсе между Внешним доменом и Контроллером движения подается окружением. Оно стимулирует систему начать обслуживание, т. е. инициирует отношение отклика как стимул. Простейшей реакцией системы было бы прибытие лифта на этаж. Однако при поступлении вызова из кабины лифта эта реакция может быть уточнена. Именно нажав кнопку этажа в кабине лифта, пользователь предполагает, что лифт, подъезжая к этому этажу, остановится, не проехав мимо. То есть реакция системы управления на вызов из кабины состоит в последовательности событий лифт не на этаже вызова до тех пор, пока наступят события лифт на этаже вызова, и двери открыты. Отношение отклика должно выполняться в каждом состоянии системы. На рис. 5 определены схемы обработки вызова из кабины лифта для отношения отклика рис. 5, и для глобальной фазы рис. 5, с учетом переменных, введенных ранее. Получим LTL-формулу по схеме на рис. 5. Элементарная схема отношения отклика на рис. 5, содержит один стимул между объектом Пользователь, кабина лифта и требованием, и одну реакцию между требованием и объектом Двигатель лифта Реакция ограничена последовательностью событий . Таким образом, имеются все данные для построения LTL-формулы отношения отклика, . Поскольку отношение задано в глобальной фазе см. рис. 5, то требование обработки вызова из кабины лифта задается формулой Представленная в этом разделе модификация методики схем целей позволяет решить задачу систематизации построения формальных темпоральных требований к причинным зависимостям программных систем логического управления. Рассмотрим, как контекстные требования соотносятся с другими шаблонами темпоральных взаимодействий, описанными в литературе, а также оценим влияние контекстных требований на корректность двух реализованных систем с известным техническим заданием. Для апробации описанной выше методики составления контекстных требований были проанализированы системы управления лифтом и энергоснабжением судна 7, 9. Они выбраны потому, что для них были доступны как техническое задание, так и полный текст программного кода, реализующего системы управления. Программный код тщательно протестирован разработчиками этих систем. Система управления лифтом использовалась Д. Кнутом для обучения разработке сопрограмм, для нее разработан интерпретатор. Система управления энергоснабжением судна была установлена на вновь построенное судно Вайгач, которое отправилось на ходовые испытания в Белое море, поэтому имелась возможность проверить адекватность найденных нами ошибок в коде программ. Структура спецификации контекстных требований рассматриваемых систем такова. Из 13 контекстных требований к системе управления лифтом одно требование включает условие с бесконечной цепочкой контекста, тогда как основная часть требования не задает связи с контекстом, 3 требования задают отношение предшествования, а 9 отношение отклика. При составлении требований к системе управления энергоснабжением судна 7 из 36 контекстных требований 16 требований это контекстные требования с отношением предшествования, 20 требований контекстные требования с отношением отклика. В цепочки событий в требованиях к системе управления энергоснабжением судна входило до 9 событий-реакций стимулов. Все требования с отношением отклика включают условие с бесконечными цепочками контекста. В результате LTL-формулы требований содержали до 10 условий справедливости. По программным кодам каждой из двух систем управления были построены модели на языке Promela и произведена верификация с помощью верификатора SPIN 10 относительно разработанных спецификаций. В результате проверки удалось выявить несколько ошибок. В системе управления лифтом одна ошибка связана с нарушением контекстных требований отклика, в частности, обработки вызова. Ошибка является следствием того, что в некоторых ситуациях лифт не может покинуть этаж вызова. Эта ошибка демонстрирует невозможность применить разработанную Д. Кнутом программу 9 в качестве реальной системы управления лифтом. Для обучения разработке сопрограмм в код модели лифта в работе 9 искусственно введены такие ограничения на последовательности событий, которые в реальности из-за недетерминированности чередования процессов реализовать невозможно. В системе управления энергоснабжением судна при верификации найдено три критические ошибки. Одна из ошибок связана с нарушением требования выхода из защищенного режима. В результате очень редкого возможного поведения датчиков двигателя система бесконечно часто переключается из рабочего в защищенный режим, полностью блокируя управление. Для судна Вайгач ошибки были подтверждены в процессе ходовых испытаний, которые проводились параллельно и независимо от формальной верификации системы управления энергоснабжением. Отличие контекстных требований от других работ, также определяющих шаблоны темпоральных отношений реагирующих систем, состоит в отсутствии у последних семантики функционального назначения этих систем. В работе 11 впервые предложена классификация шаблонов темпоральных взаимодействий с практическими целями. Классификация 11 составлялась, чтобы решить задачу перехода от описания темпоральных требований на естественном языке в формулы LTL, CTL и в регулярные выражения. Эти шаблоны выбирались исходя из наиболее часто встречающихся структур требований в доступных источниках. Привязка требований к функциональности системы в работе 11 не проводилась. Тем не менее значение этой работы достаточно велико. Большинство из последующих работ по практическим классификациям темпоральных требований, например 1214, лишь расширяют результаты работы 11 для вероятностных, количественных и прочих зависимостей. Если контекстное требование нашей классификации будет задано на естественном языке в соответствии с шаблонами 11, 15, то оно может быть транслировано в LTL-формулу по методике работы 11. Однако некоторые контекстные требования не могут быть определены при помощи шаблонов 11, в частности, если длина цепочки событий реакции или контекста более двух. Отметим также, что работа 11 содержит несколько ошибок трансляции словесной формулировки требований в формулы темпоральной логики. Если такую трансляцию проводить по предложенной в данной работе методике формирования контекстных требований, то ошибок можно избежать. Из 217 требований, рассмотренных в работе 11, 83 требования относятся по структуре связей к классу контекстных требований с отношением отклика, 13 требований к классу контекстных требований с отношением предшествования. В работе предложен новый класс требований к поведению реагирующих программных систем класс контекстных требований, определяемых через отношения отклика и предшествования между событиями, возникающими в разрабатываемой программной системе и ее окружении. Контекстные требования формально определены на языке LTL. Для структуризации информации об отношениях при составлении контекстных требований модифицирована известная методика схем целей, предложенная М. Джексоном. По предложенным элементарным схемам контекстных требований можно построить LTL-формулы контекстных требований. Сравнительный анализ показал, что контекстные требования структурно являются расширением наиболее употребляемых шаблонов темпоральных требований, описанных в литературе. Предложенная методика позволяет систематически составлять контекстные требования из технического задания и дополнительной информации о разрабатываемой системе. Как показал опыт верификации двух программных систем управления, невыполнение таких требований может быть критическим для приложений. 