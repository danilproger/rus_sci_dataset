ОБ ОБНАРУЖЕНИИ АЛГЕБРАИЧЕСКИХ МАНИПУЛЯЦИЙ  С ПОМОЩЬЮ ОПЕРАЦИИ УМНОЖЕНИЯ 

известно, что реализации криптографических алгоритмов подвержены атакам по сторонним каналам. Одной из наиболее эффективных является атака по привнесенным помехам с последующим линейным или дифференциальным анализом ошибок. Атака заключается в нестандартном воздействии на криптографическое устройство в целях внесения помех в его работу. Модель такой атаки получила название алгебраической манипуляции. Целью работы являются исследование и развитие одного из методов защиты от рассматриваемой атаки. Результаты:  исследуемая контрмера заключается в построении нелинейного помехоустойчивого кода, кодирующей функцией которого выбирается операция умножения в конечном поле. Разработаны и описаны два варианта модификации кодовой конструкции, основанные на расширении случайной величины и на разбиении информационного сообщения. Данные модификации позволяют варьировать такие параметры кода, как скорость и вероятность обнаружения атаки, во многих случаях уменьшая избыточность кода. При этом вторая модификация также позволяет снизить аппаратные затраты на реализацию кодека. Практическая значимость: полученная гибкая и просто реализуемая кодовая конструкция обнаруживает любую ошибку в передаваемой информации с заданной вероятностью даже при условии коррелированности значения ошибки и кодируемых данных.

Использование линейных помехоустойчивых кодов является эффективным методом борьбы с искажениями, возникающими в канале 1. Естественным требованием для обеспечения высокого уровня защищенности от помех является условие согласованности параметров используемого кода с характеристиками канала. Если же характеристики канала не могут быть точно определены например, для каналов со случайной структурой, кодирование линейным кодом в общем случае является неэффективным. Случайная структура канала может быть обусловлена многими факторами, имеющими как естественную, так и искусственную природу. Примерами естественных воздействий, приводящих к изменению характера возникающих ошибок, являются, например, случайное изменение состояния канала, накопление статического заряда, воздействие заряженных частиц, износ оборудования. Искусственные методы изменения характеристик канала часто заключаются в нестандартном физическом воздействии на канал. Примерами таких воздействий являются электромагнитное излучение, когерентное излучение например, лазер, подавление и зашумление данных 2. Уязвимость классических методов защиты со стороны каналов со случайной структурой может быть использована злоумышленником. В частности, преобразование исходного канала, с которым согласована информационная система, в канал со случайной структурой может быть осуществлено с помощью атак по сторонним каналам, называемых атаками по привнесенным ошибкам 2, 3. Целью данного типа атак является вычисление секретных параметров систем обработки данных, например ключей шифрования. Как правило, атаки состоят из двух этапов атакуемое устройство канал подвергается нестандартному внешнему физическому воздействию, после чего производится анализ результатов работы устройства. На основе полученных данных злоумышленник зачастую способен либо напрямую восстановить значение секретных ключей, либо заметно уменьшить мощность перебора. Для работы с каналами со случайной структурой были разработаны классы нелинейных кодов надежные коды и коды, обнаруживающие алгебраические манипуляции 47. Требование нелинейности обусловлено тем, что у любого -ичного линейного кода существует как минимум 1 необнаруживаемых ошибок, соответствующих кодовым словам, где размерность кода. Это приводит к ситуации, когда, имея возможность определенным образом воздействовать на канал, злоумышленник способен провоцировать такое его состояние и возникающую конфигурацию ошибок, при котором ошибки и атаки не могут быть обнаружены. Существуют классы нелинейных кодов, которые не имеют необнаруживаемых ошибок, любая ошибка обнаруживается с ненулевой вероятностью. Надежные нелинейные коды предназначены для обнаружения ошибок как естественного, так и искусственного происхождения при условии, что злоумышленник источник ошибок в канале не обладает знанием о передаваемых данных 4, 5. Надежные коды гарантируют заданную ненулевую вероятность обнаружения любой конфигурации ошибок. Нелинейные коды, обнаруживающие алгебраические манипуляции, позволяют обнаруживать любые ошибки с заданной вероятностью даже при условии, что злоумышленник обладает знанием о передаваемой информации 4, 6. Это обеспечивается за счет рандомизации результата кодирования. Рассмотрим следующую модель атаки 6, 7 злоумышленник способен контролировать значение ошибок, возникающих в канале ошибка аддитивна злоумышленник способен контролировать передаваемое информационное сообщение. Такая модель атаки называется сильной. Сильной модели атаки соответствует атака, при которой злоумышленник не только способен генерировать заданную ошибку, но и имеет возможность контролировать значение кодируемого сообщения. В этой ситуации злоумышленник, зная информационное сообщение, вычисляет получаемое кодовое слово, после чего выбирает значение ошибки, при внедрении которой текущее кодовое слово преобразуется в другое кодовое слово. Даже надежные нелинейные коды не могут гарантировать защиту от такой модели атаки. Для защиты от сильных атак были предложены защищенные коды, обнаруживающие алгебраические манипуляции strongly secure algebraic manipulation detection codes, strongly secure AMD codes. Для краткости будем называть их AMD-кодами. Очевидно, что процесс кодирования должен иметь недетерминированный характер. В противном случае злоумышленник гарантированно вносит необнаруживаемую ошибку. Естественным путем решения этой проблемы является привнесение случайности в процесс кодирования, когда каждому сообщению соответствует множество кодовых слов, а выбор конкретного кодового слова из этого множества определяется некоторой случайной величиной, которую злоумышленник не способен контролировать. В этом случае, зная информационное сообщение, злоумышленник способен вычислить набор кодовых слов, одно из которых, в зависимости от значения случайной величины, может стать результатом кодирования. Далее атакующий выбирает значение ошибки, которое имеет наименьшую вероятность обнаружения для заданного набора возможных кодовых слов. Другими словами, выбирается такая ошибка, которая не будет обнаружена при наибольшем количестве значений случайной величины для заданного исходного сообщения. Для построения AMD-кодов используются различные математические объекты коды аутентификации, разностные структуры, помехоустойчивые коды 4, 7. Одной из наиболее исследованных и эффективных конструкций AMDкодов является конструкция, основанная на полиномах. Наиболее полно этот класс AMD-кодов описан в работе 6, где значительная часть предлагаемых конструкций являются оптимальными в смысле вероятности обнаружения ошибки. Далее будут рассматриваться систематические коды над полями характеристики 2. Кодовые слова систематического AMD-кода представляют собой конкатенацию информационного сообщения 2, некоторой случайной величины 2 и значения нелинейной функции, 2 . Сами AMD-коды определяются как коды, для которых не существует такой конфигурации ошибок и такого значения, при возникновении которых равенство выполнится при всех возможных значениях . Данное равенство называется уравнением маскирования ошибки УМО. Легко заметить, что проверка выполнения этого равенства является аналогом вычисления синдрома принятого слова линейного кода. Способность AMD-кода обнаруживать ошибки напрямую зависит от вида его УМО максимальное количество решений УМО относительно среди всех возможных комбинаций, и будет максимальным количеством необнаруживаемых кодом ошибок. Вероятность обнаружения ошибки ограничена снизу выражением которое непосредственно следует из сценария сильной атаки. Одной из конструкций AMD-кодов является конструкция, основанная на умножении в конечном поле 8. Кодовое слово такого AMD-кода выглядит следующим образом где, 2 т. е., операция умножения выполняется в поле 2, а символом обозначена операция конкатенации. УМО такого кода выглядит следующим образом Легко заметить, что максимальное количество решений данного УМО относительно при фиксированных и равно единице, так как Правая часть последнего выражения при фиксированной величине ошибки представляет собой константу если случайная величина равна этой константе, то привнесенная ошибка, останется необнаруженной. Случайная величина распределена равномерно, следовательно, вероятность обнаружения любой ошибки при фиксированном равна Тут необходимо обратить внимание на то, что данный код неприменим при 0, что накладывает ограничение на множество обнаруживаемых ошибок. Кроме того, это противоречит определению AMD-кодов, которое дано в работе 6. Однако стоит отметить, что в некоторых других работах например, в 7 AMD-код определяется как код, который гарантированно обнаруживает ошибки только в информационной части кодового слова, т. е. когда 0. Данное определение обусловлено требованиями многих практических задач, в которых важна целостность только информационной части кодового слова 7. Далее будем рассматривать лишь вероятность обнаружения ошибки, у которой 0. Необходимо указать, что о целесообразности использования умножения в поле для обнаружения ошибок в каналах со случайной структурой писали еще В. И. Коржик и Л. М. Финк 8. Предложенный ими универсальный метод стохастического кодирования для каналов со случайной структурой обеспечивает более низкую вероятность обнаружения ошибок. Кроме того, в их модели подразумевается, что приемник и передатчик имеют точно синхронизированную случайную величину, что ограничивает область применения данного метода кодирования. Использование AMD-кода, основанного на умножении, позволяет обеспечить максимально возможную вероятность обнаружения ошибки даже при условии искажения случайной величины. Случайная величина является частью кодового слова, передается по каналу и не требует дополнительной синхронизации передатчика и приемника. Основным недостатком данной кодовой конструкции является отсутствие гибкости при выборе параметров кода 7. Фактически, размер информационного сообщения полностью определяет длину кода 3, размер случайной величины бит, а также вероятность обнаружения ошибки 1 1 2 . Ниже будут представлены два варианта модификаций данной конструкции, которые предоставляют большую гибкость при выборе параметров кода. Наиболее естественным методом модификации описанной конструкции является использование случайной величины из меньшего поля Галуа, т. е. 2, . Для выполнения умножения формируется вектор путем дополнения двоичного представления элемента нулями, т. е. выполняется отображение где, есть двоичное представление элемента поля . Полученный элемент большего поля используется для выполнения операции кодирования согласно оригинальной конструкции. Кодовое слово выглядит следующим образом т. е. длина кода уменьшается на бит. На приемной стороне перед проверкой УМО полученная из канала случайная величина 2 еще раз подвергается отображению Вероятность обнаружения сильной атаки ограничена снизу выражением Рассмотрим формулу 1. Мощность множества значений случайной величины, стоящая в знаменателе дроби, равна 2 . Необходимо определить значение числителя дроби из 1. Легко заметить, что для данной модификации исходной кодовой конструкции числитель дроби приобретает вид т. е. добавляется условие, что для получаемого решения УМО должен существовать прообраз среди 2 . Дополнительное ограничение на мощность множества приводит к тому, что обнаруживающая способность кода становится неравномерной. Если для оригинальной конструкции значение числителя было равно 1 для всех возможных и 0, то при данной модификации некоторая часть комбинаций и 0 приведет к решениям УМО, которые не имеют прообраза относительно отображения, т. е. значение числителя будет равно 0. Таким образом, часть ошибок будет обнаруживаться с вероятностью 1 0 2 1, в то время как остальные с 1 1 2 1 2, где через обозначена вероятность обнаружения конкретной ошибки при сильной атаке. Таким образом, вероятность обнаружения сильной атаки для данной кодовой конструкции 1 2 . Как видно, данная модификация кодовой конструкции AMD-кодов, основанной на умножении в поле, предоставляет возможность гибкого выбора длины кода и соответствующей вероятности обнаружения сильных атак. Зависимость вероятности обнаружения сильной атаки от размера случайной величины аналогична оригинальной конструкции. Аппаратная сложность реализации данной модификации соответствует сложности оригинальной кодовой конструкции. Вторым вариантом модификации оригинальной кодовой конструкции является следующий пусть в противном случае либо уменьшается разрядность случайной величины, либо размер информационного вектора увеличивается до необходимого значения за счет добавления, например, нулей. Далее информационный вектор делится на частей по бит, где 2, 1, . Каждый на основе случайной величины подвергается процедуре кодирования согласно оригинальной конструкции, т. е. получаем набор из кодовых слов т. е. выполняется процедур кодирования сообщений на основе фиксированной случайной величины . Далее полученные промежуточные кодовые слова объединяются в одно слово следующим образом Полученное кодовое слово имеет длину 2 . На приемнике данное кодовое слово раскладывается в кодовых слов после чего выполняется проверок их УМО. При обнаружении ошибки хотя бы в одном кодовом слове весь набор признается ошибочным. Рассмотрим вероятность обнаружения сильных атак с помощью данной модификации AMD-кода. Вероятность обнаружения сильной атаки равна 1 2 . Очевидно, что чем больше блоков и, соответственно, кодовых слов подвергается атаке, тем меньше вероятность того, что ошибка не будет выявлена предполагается, что вероятность успешной атаки меньше единицы. Таким образом, с позиции злоумышленника наиболее разумно атаковать один из блоков . При этом вероятность успеха атаки будет максимальна. Рассмотрим эту вероятность, так как именно она определяет нижнюю границу . Атаку одного из блоков можно рассматривать как атаку одного из кодовых слов оригинальной конструкции с параметрами 2, 2, 2, 3 . Получаем, что вероятность обнаружения сильной атаки одного блока 1 2 . Отсюда вероятность обнаружения сильной атаки кодового слова ограничена снизу Необходимо отметить, что тот факт, что все кодовых слов получены на основе одной и той же случайной величины, не может быть использован для успешной атаки кодового слова при данном методе декодирования. Если бы решение о наличии ошибок принималось независимо на уровне каждого блока, а не на уровне целого слова, то в этом случае злоумышленник был бы способен проводить атаку с более высокой вероятностью успеха. Для этого он бы для каждого из случайно выбирал некоторые неповторяющиеся числа которые считал бы соответствующим значению . Исходя из рассчитывались бы такие значения ошибок, чтобы выполнялось УМО. Таким образом, злоумышленник смог бы перебрать возможных значений случайной величины. В этом случае вероятность успешного внедрения ошибки в один из блоков т. е. успешная атака кодового слова при таком методе декодирования равнялась бы 2 при 2 и 1 при 2 . Соответственно, вероятность обнаружения ошибки на уровне кодового слова при 2 была бы равна 1 2 . Данная модификация позволяет достигнуть тех же характеристик, что и первая модификация. Аппаратная реализация умножения в конечном поле имеет квадратичную зависимость от степени расширения поля. Благодаря этому данная модификация позволяет значительно снизить сложность кодека за счет того, что умножение вычисляется в меньшем поле. Схема одного из вариантов реализации кодера приведена на рисунке. На схеме изображено умножителей в поле 2 . Их количество может варьироваться от 1 до в зависимости от требуемой производительности. При умножители будут использоваться повторно для различных, что приведет к увеличению временных затрат кодирования. При сложность реализации кодера будет максимальна и составит порядка, в то время как в других конструкциях, где умножение выполняется в 2, она имеет порядок, что сопоставимо со сложностью данной модификации. В данной работе описан класс AMD-кодов, основанный на умножении в конечном поле. Приведена вероятность обнаружения сильных атак с помощью данного кода. Предложены две модификации этой конструкции, которые обеспечивают гибкость при выборе характеристик кода за счет варьирования размера случайной части в кодовом слове. Вероятность обнаружения сильной атаки для обеих модификаций имеет такую же зависимость от размера случайной величины, как и вероятность для оригинальной конструкции. Аппаратная сложность реализации второй модификации может быть значительно уменьшена за счет повторного использования имеющихся умножителей. 