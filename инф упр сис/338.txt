ПРИМЕНЕНИЕ ГРИД-СИСТЕМ   ПРИ РАЗВЕРТЫВАНИИ WEB-САЙТА 

1 Рассматривается построение отказоустойчивой распределенной грид­системы по обработке запросов к web­сайту.

Очень часто создание web-сайта под webсайтом в данной статье подразумевается служба, которой может пользоваться как человек через GUI-интерфейс интернет-браузера, так и компьютер через набор API-вызовов, используя такие протоколы, как REST, SOAP начинается с создания одной страницы в Интернете. Постепенно к ней добавляются другие. Происходит переход сайта от статичной архитектуры при статичной архитектуре сайт представляет собой набор htmlстраниц к использованию динамической системы управления контентом, сайтом 1. Сайт разрастается, и CMS уже не справляется с потоком запросов. Далее сайт, как правило, переносится из хостингкомпании компания, предоставляющая услуги размещения сайтов на своих серверах на собственный сервер, предоставляемый ему полностью, и уже он начинает обрабатывать httpзапросы пользователей. Программисты с системными администраторами и инженерами развертывают необходимые для работы сайта службы. Обычно это система управления базами данных СУБД как правило, MySQL, web-сервер например, Apache и интерпретатор языка webпрограммирования например, PHP. На некоторое время ситуация стабилизируется, СУБД обрабатывает запросы, выдает их интерпретатору, далее страница через web-сервер выдается пользователю. Но рано или поздно наступает ситуация, при которой нагрузка превышает допустимые значения для новой системы. Следующим шагом является установка системы распределения нагрузки. Для этого используется легкий web-сервер например, сервер Nginx разработки Игоря Сысоева или LightHttpd. Первоначальная задача проектирования гридсистемы состоит в выборе программного обеспечения ПО для установки на ее узлах. Программное обеспечение должно отвечать следующим требованиям быть бесплатным. При построении гридсистемы расходы планируются только на оборудование и оплату труда сотрудников, при самостоятельном построении только на оборудование иметь открытый исходный код для внесения в него при необходимости изменения иметь развитое сообщество community для решения проблем, возникающих в процессе развертывания и эксплуатации системы быть хорошо документировано. В качестве сервера баз данных для построения грид-системы была выбрана СУБД MySQL, так как она является наиболее приспособленной для применения в среде web. Не секрет, что для исполнения приложений клиента на большинстве хостинг-площадок провайдеры предоставляют небольшое количество ресурсов как вычислительных, так и дисковых. Поэтому для данного применения необходима высокоэффективная СУБД, обладающая при этом высокой надежностью большинство web-приложений и сайтов должны работать в режиме 247. По всем этим причинам MySQL стала незыблемым стандартом в области СУБД для web, а теперь в ней развиваются возможности для использования ее в любых критичных бизнес-приложениях, т. е. MySQL конкурирует на равных с СУБД таких производителей, как Oracle, IBM, Microsoft и Sybase. Основные преимущества MySQL многопоточность, поддержка нескольких одновременных запросов оптимизация связей с присоединением многих данных за один проход записи фиксированной и переменной длины ODBC -драйвер гибкая система привилегий и паролей гибкая поддержка форматов чисел, строк переменной длины и меток времени интерфейс с языками C и Perl, PHP быстрая работа, масштабируемость совместимость с ANSI SQL бесплатность в большинстве случаев хорошая поддержка со стороны провайдеров услуг хостинга быстрая поддержка транзакций через механизм InnoDB . В качестве web-сервера было выбрано ПО Apache. Основными достоинствами Apache считаются надежность и гибкость конфигурации. Оно позволяет подключать внешние модули для предоставления данных, использовать СУБД для аутентификации пользователей, модифицировать сообщения об ошибках и т. д. Поддерживает IPv6. Apache имеет развитые механизмы обеспечения безопасности и разграничения доступа к данным. Основными являются ограничение доступа к определенным директориям или файлам механизм авторизации пользователей для доступа к директории по методу http-авторизации modauthbasic и digest-авторизации mod authdigest ограничение доступа к определенным директориям или всему серверу, основанное на IPадресах пользователей запрет доступа к определенным типам файлов для всех или части пользователей, например запрет доступа к конфигурационным файлам и файлам баз данных наличие модулей, реализующих авторизацию через СУБД или PAM. Преимущества Apache также заключаются в модульной организации, стабильности и быстродействии. При наличии соответствующих аппаратных средств и настройке оно может выдерживать самые высокие загрузки. Yahoo, Altavista, GeoCities, Hotmail основаны на различных версиях этого сервера. В качестве сервера распределения нагрузки балансировщика для построения грид-системы был выбран Nginx рис. 1 из-за большей по сравнению с Apache производительностью. Основные преимущества http-сервера Nginx обслуживание статических запросов, индексных файлов, автоматическое создание списка файлов, кэш-дескрипторов открытых файлов акселерированное проксирование с кэшированием, простое распределение нагрузки и отказоустойчивость акселерированная поддержка удаленных FastCGI-серверов с кэшированием, простое распределение нагрузки и отказоустойчивость модульность, фильтры, в том числе сжатие gzip, докачка byte-ranges, SSI-фильтр, преобразование изображений несколько подзапросов на одной странице, обрабатываемых в SSIфильтре через прокси или FastCGI, выполняются параллельно один главный процесс и несколько рабочих, рабочие процессы работают под непривилегированным пользователем на 10 000 неактивных http-соединений расходуется около 2,5 MБ памяти минимум операций копирования данных выполнение разных функций в зависимости от адреса клиента ограничение доступа в зависимости от адреса клиента и по паролю Basic-аутентификация ограничение скорости отдачи ответов ограничение числа одновременных соединений и запросов. Eucalyptus позиционируется как открытое open source решение для организации доступа к вычислительным ресурсам с возможностью динамического масштабирования системы и балансировки нагрузки 2. Важно заметить, что Eucalyptus на данный момент является единственным доступным бесплатным открытым решением построения вычислительного кластера рис. 2 при создании грид-системы для web-сайта. Также одним из методов эффективного повышения вычислительной мощности системы и увеличения скорости обработки запросов является развертывание грид-системы рис. 3, в которой вычислительные элементы помещаются в облако, где действует система предоставления ресурсов по требованию. Облачные рассеянные вычисления cloud computing технология обработки данных, в которой компьютерные ресурсы и мощности предоставляются пользователю или серверу как интернет-сервис 3. Пользователь имеет доступ к собственным данным, но не может управлять и не должен заботиться об инфраструктуре, операционной системе и собственно программном обеспечении, с которым он работает. Термин облако используется как метафора, основанная на изображении Интернета на диаграмме компьютерной сети, и как абстракция сложной инфраструктуры, за который скрываются все технические детали. На данный момент существует разнообразное ПО для построения облачной системы. Одно из них система Eucalyptus см. рис. 3. В облаке присутствуют разные типы узлов. В самом низу иерархии находится контроллер узла. Он запускается на каждом физическом сервере, подключенном к облаку, и отвечает за запуск, работу и остановку виртуальных машин. Контроллер кластера управляет контроллерами узлов, определяет, на каких узлах будут запущены виртуальные машины. Контроллер облака устанавливается на машине, имеющей доступ к внешней сети можно установить его на фронтсервере системы и выступает в роли головного интерфейса для доступа к облаку. Обрабатывает пользовательские запросы на запуск виртуальных машин и собирает данные о загруженности узлов от контроллеров кластеров. Для начала необходимо определить, какие именно вычисляющие элементы будут помещены в облако. Во время работы web-сайта самыми ресурсоемкими задачами являются обработка SQL-запроса СУБД 4, а также интерпретация программы на языке web-программирования. Значит, в облако необходимо поместить сервера СУБД MySQL и web-сервера Apache. Задачи по выдаче статической информации картинки, css-стили, скрипты на языке Javascript можно переложить на быстрый web-сервер, например Nginx иди LightHttpd. Это и есть решение задачи классификации трафика на статический и динамический. Nginx также может балансировать нагрузку между вычисляющими web-серверами. Рассмотрим основные типы узлов предлагаемой системы. 1. Сервер распределения нагрузки может быть построен на базе легких http-серверов, таких как Nginx, LightHttpd и др. Он выполняет функции по распределению запросов на статические и динамические. Статические запросы сервер выполняет сам отдавая статический контент, а динамические передает вычисляющим узлам. Сервер распределения нагрузки может быть размещен как на физической машине, так и в облаке, но обязательно со статическим IP-адресом и портом, куда будут поступать http-запросы от браузеров пользователей. 2. Web-сервер вычисляющий узел виртуальная машина, расположенная в облаке, на которой установлен программный web-сервер Apache. Он интерпретирует программный код сайта, написанный на языках web-разработки таких как PHP, Perl. При выходе из строя одного из вычисляющих узлов сервер распределения нагрузки будет посылать запросы на другие. Таким образом достигается отказоустойчивость системы. При необходимости дополнительных ресурсов есть возможность добавления нового узла. Если же добавочная нагрузка небольшая относительно нагрузки всего кластера web-серверов, то облако а именно контроллер кластера само выделит необходимые ресурсы. Подключение нового узла имеет смысл только при явной перегруженности всего облака. Предлагаемая архитектура такова, что ресурсы для вычисляющих узлов выделяются автоматически, по требованию. За этим следит контроллер кластера. 3. Головной master сервер СУБД получает SQL-запрос и транспортирует его одному из slaveсерверов. 4. Подчиненный slave сервер СУБД выполняет SQL-запрос и возвращает результат Apacheсерверу. 5. Хранилище данных NAS содержит репозитарий с программным кодом сайта. Его каталог монтируется к вычисляющим web-серверам. Также он задействуется разработчиками для обновления ПО. 6. Контроллер кластера управляет контроллерами узлов, определяет, на каких узлах будут запущены виртуальные машины. Он построен на базе ПО Eucalyptus, так же как и контроллер облака. 7. Контроллер облака именно он осуществляет централизованное управление облаком через контроллеры кластеров. Рассмотрим цикл работы web-сайта. Сначала разработчики создают программную часть webсайта, они коллективно работают с системой SVN. Subversion SVN 1 свободная централизованная система управления версиями, созданная в 2000 г. компанией CollabNet Inc. Каталог с программой монтируется каждым из webсерверов в качестве папки для данного сайта. После того как http-запрос пользователя это может быть запрос главной страницы сайта попадает на 80-й порт сервера распределения нагрузки, он определяет, какому из вычисляющих узлов в данном случае это web-сервер Apache направить его для обработки. В качестве базового используется алгоритм выбора наименее загруженного в данный момент сервера. Далее запрос идет на вычисляющий узел. Он соединяется с мастерсервером СУБД и отправляет ему SQL-запрос, после чего мастер-сервер аналогичным образом определяет, какому из своих подчиненных вычислительных узлов направить запрос для вычисления. После обработки SQL-запроса результат обработки возвращается мастер-серверу СУБД, а затем вычислительному узлу webсерверу, который его инициировал. Вычисляющий web-сервер интерпретирует программный код дальше. В результате интерпретации пользователь получает html-страницу. Далее браузер пользователя делает запросы к фронт-серверу серверу распределения нагрузки. Он на основе типа запроса запрос на статический или динамический контент определяет, передавать ли запрос вычисляющему узлу или выполнять его самостоятельно. Во втором случае фронт-сервер самостоятельно находит запрашиваемый ресурс картинка, css-файл, js-файл и выдает его браузеру пользователя. За счет меньшей ресурсоемкости сервера Nginx нагрузка на вычисляющие узлы значительно снижается. Предложенная архитектура дает возможность построить быструю, отказоустойчивую и масштабируемую распределенную систему обработки большого количества запросов для web-сайта. Данные параметры распределенной системы достигаются благодаря применению метода классификации трафика и помещению вычисляющих узлов в облако, а стоимость решения снижается благодаря использованию открытого ПО. 