УПРАВЛЕНИЕ  В СОЦИАЛЬНО-ЭКОНОМИЧЕСКИХ СИСТЕМАХ ВЕРОЯТНОСТНЫЙ ЖАДНЫЙ АЛГОРИТМ ПОИСКА ДЛЯ  РЕШЕНИЯ ЗАДАЧ ТЕРРИТОРИАЛЬНОГО ПЛАНИРОВАНИЯ 

Описывается опыт создания вероятностного жадного алгоритма поиска и применения его при решении задачи формирования промышленно-сырьевых узлов в ходе осуществления геолого-экономического районирования территорий. Производительность созданного алгоритма сравнивается с производительностью популярного решателя задач линейного и целочисленного программирования IBM ILOG CPLEX.

Геолого-экономическое районирование является методом территориального анализа, позволяющим оценивать структуру и размещение минерально-сырьевых ресурсов и перерабатывающих мощностей исследуемого региона. В ходе районирования происходит выделение кластеров взаимоувязанных сырьевых, промышленных объектов и объектов инфраструктуры, кластеры именуются и наносятся на геолого-экономическую карту. Одной из целей этого процесса является снижение затрат на разработку месторождений за счет совместного использования инфраструктуры и перерабатывающих мощностей. Это позволяет, в частности, производить добычу на тех месторождениях, которые самостоятельно разрабатывать неэффективно. Районирование это многоуровневая задача, исходными данными для которой являются месторождения, объекты перерабатывающей отрасли и инфраструктуры. Первый уровень районирования заключается в формировании так называемых промышленно-сырьевых узлов ПСУ. Под понимается группа сближенных месторождений, обладающих одинаковым набором полезных ископаемых и единой технологией получения первого товарного продукта. Упрощенно, ПСУ это одно или несколько месторождений и центр обогащения руды. Одним из наиболее употребляемых критериев при формировании ПСУ является обеспечение максимального интегрального дохода от освоения ресурсов недр 1, 2. Интегральный доход от создания одного узла представляет собой экономический эффект от переработки руды, добываемой на месторождениях, входящих в состав узла, в узловом обогатительном предприятии центре узла с учетом затрат на транспортировку руды. Таким образом, формирование ПСУ сводится к выделению на заданной территории такого набора узлов, чтобы суммарный интегральный доход по всем этим узлам был максимален. Пусть множество месторождений, а множество возможных точек размещения узловых обогатительных предприятий в том числе и уже действующих. Количество месторождений обозначим, а количество возможных точек обработки . В предлагаемой модели каждое месторождение характеризуется следующими параметрами потенциальной стоимостью всех минеральных ресурсов месторождения, запасами месторождения в натуральных единицах, суммарными затратами на добычу всех минеральных ресурсов и эксплуатационными затратами на переработку всех минеральных ресурсов месторождения . Капитальные затраты на переработку, т. е. вложения в строительство или модернизацию обогатительного предприятия, будем считать пропорциональными планируемой нагрузке на это предприятие, а именно суммарным ресурсам всех месторождений, входящих в узел, центром которого предприятие является. В том случае, если в точке еще нет предприятия, капитальные затраты на его создание вычисляются следующим образом где коэффициент пропорциональности, а предикат, выражает факт вхождения месторождения в узел, центр которого находится в точке . Если в точке уже находится предприятие, то капитальные затраты определяются разницей между объемом ресурсов, который планируется включить в узел, и текущим объемом ресурсов, назначенных этому предприятию. Пусть текущий объем ресурсов, назначенных предприятию. Тогда для существующего предприятия в точке Недостатком такого способа оценки затрат является то, что в случае, когда в некотором оцениваемом варианте решения существующему предприятию предлагается назначить меньше ресурса, чем ему назначено фактически, затраты, вычисленные по формуле, становятся отрицательными. Другими словами, к целевой функции задачи оптимизации прибавляется некоторая величина, эквивалентная возврату уже сделанных вложений в это предприятие. В решаемой задаче такой эффект нежелателен, поэтому окончательное выражение для затрат будет иметь следующий вид Таким образом, каждая возможная точка создания узла характеризуется коэффициентом, выражающим зависимость капитальных вложений в предприятие от суммарного ресурса, который должен быть предприятию назначен, и текущим объемом ресурсов, назначенных предприятию для точек, в которых нет предприятий, очевидно, 0. Предполагается также, что задана матрица транспортных затрат, элемент которой соответствует затратам на перевозку всех ресурсов месторождения в точку . Введем два вида независимых переменных бинарную переменную, соответствующую факту создания узла с центром в бинарную переменную, соответствующую факту вхождения месторождения в узел с центром в . Тогда задачу поиска такого множества узлов, что интегральный доход по всем узлам максимален, можно записать следующим образом максимизировать 1 при ограничениях 2а 2б Ограничение 2а выражает требование того, что месторождение может относиться не более чем к одному ПСУ, а ограничение 2б обеспечивает целостность набора независимых переменных задачи месторождение может входить в узел только с таким возможным центром, который является действительным центром в текущем решении. Упростим целевую функцию. Заметим, что выражение состоит только из параметров исходных объектов обозначим его через . Внесем переменную внутрь выражения max это допустимо, учитывая ограничения на значения . Саму функцию max представим в виде набора переменных, на значения которых наложены соответствующие ограничения и приняв во внимание, что в практической интерпретации задачи, неотрицательны. Наконец, заметим, что с учетом 2б . Тогда задачу можно переписать следующим образом максимизировать при ограничениях Данная задача оптимизации представляет собой задачу целочисленного даже булева линейного программирования и на практике решается обычно с применением промышленных пакетов оптимизации IBM ILOG CPLEX, GUROBI Optimizer, MOSEK и т. п.. Для оценки применимости промышленных пакетов оптимизации и, в общем, оценки трудоемкости данного вида задач для классических методов решения задач целочисленного линейного программирования был проведен вычислительный эксперимент. Оценивалось время решения задачи для сгенерированных случайным образом наборов исходных данных двух размерностей 100 и 200. В каждой размерности было оценено время для 400 наборов данных. Эксперимент выявил существенную разницу во времени нахождения решения. Для основной массы наборов решение находилось относительно быстро, но для некоторых время поиска решения было в сотни раз больше. Проще всего проиллюстрировать результаты эксперимента с помощью порядковых статистик. В табл. 1 показаны результаты запусков решателя IBM ILOG CPLEX для наборов разного размера с различными требованиями к точности получаемого результата. Времена работы решателя на исходных наборах были отсортированы по возрастанию, в таблице приведены некоторые процентили этой последовательности. Столбец Допустимая погрешность отражает требование к максимальной разнице между оценкой оптимального решения сверху получаемой обычно через решение ослабленной задачи со снятым ограничением целочисленности и наилучшим на данный момент решением. То есть при допустимой погрешности 5 процесс решения останавливается, если разница между оценкой оптимального решения сверху и наилучшим известным решением становится менее 5 от наилучшего известного решения. Из таблицы видно, что для практических задач, типичные размерности которых не превышают 200, применение CPLEX оказывается вполне оправданным. Однако задача формирования ПСУ обладает двумя особенностями, которые вынуждают искать альтернативные пути решения. Особенностями этими являются размерность типовая около 300 объектов и повышенные требования к скорости получения решения. Последняя особенность связана с тем, что формирование ПСУ представляет собой интерактивный процесс, в ходе которого приведенная задача математического программирования решается с различными исходными данными, а результаты сопоставляются. Вместе с тем, учитывая такой характер решения задачи, находимое решение не обязательно должно быть оптимальным. В совокупности указанные особенности допускают применение для решения задачи формирования ПСУ эвристических алгоритмов. Вероятностные жадные алгоритмы поиска Greedy Randomized Adaptive Search Procedures GRASP эвристика, нашедшая применение при решении задач комбинаторной оптимизации 38. Применение GRASP представляет собой итеративный процесс, каждый шаг которого состоит из двух фаз фазы конструирования, где происходит формирование допустимого решения, и фазы локального поиска, когда исходное решение улучшается до локально-оптимального. Наилучшее решение сохраняется и является результатом работы алгоритма в целом. На фазе конструирования допустимое решение формируется поэлементно, причем семантика элемента тесно связана с моделью решаемой задачи. В задачах поиска пути таким элементом может быть переход из вершины в вершину, в задачах назначения одно назначение и т. п. На каждом шаге фазы конструирования один элемент добавляется в создаваемое решение. Выбор осуществляется на основе упорядочения всех элементов, которые могут быть добавлены допустимых элементов по значению некоторой функции оценки . Эта функция показывает привлекательность выбора соответствующего элемента с точки зрения получения наилучшего исходного решения задачи. Эвристика является адаптивной в том смысле, что на каждом шаге фазы конструирования кандидаты заново упорядочиваются по значению функции . Вероятностный компонент связан с тем, что выбирается не всегда наилучший в смысле значения функции кандидат, но один из ограниченного списка наилучших кандидатов. Этот список в исходном описании эвристики получил название список кандидатов Restricted Candidate List RCL. Факт выбора случайного элемента на каждом шаге позволяет получать в конце фазы конструирования различные решения, увеличивая охват исследуемой части пространства решений. Рассмотрим один из популярных методов выбора кандидата. Пусть задан параметр 0, 1, пусть множество элементов, которые могут быть присоединены к решению на очередном шаге max, min, и решается задача поиска максимума. Тогда RCL будет формироваться как, а добавляемый элемент выбираться из RCL случайным образом. Параметр, таким образом, управляет степенью жадности и случайности алгоритма. При значении 0 алгоритм становится жадным детерминированным, а при 1 полностью случайным. Другим распространенным способом формирования RCL является задание максимального размера RCL . В этом случае в RCL всегда отбираются лучших кандидатов вне зависимости от конкретных значений. Полученное таким образом решение, скорее всего, не будет локально оптимальным по отношению к какому-либо естественному для задачи определению окрестности, поэтому применение фазы локального поиска практически всегда способно это решение улучшить. Для применения GRASP к задаче следует определить представление ее решения, алгоритм фазы конструирования решения и понятие окрестности, с использованием которого будет производиться локальный поиск. Пронумеруем все месторождения натуральными числами от 1 до, а все точки возможного размещения предприятий от 1 до . Будем кодировать текущее назначение месторождений к центрам в виде массива из элементов, причем значение элемента с индексом соответствует индексу центра того узла, в который входит месторождение, или 0, если месторождение не включено ни в один узел. Кроме того, в массиве, состоящем из элементов, будем для каждой точки возможного размещения предприятия запоминать значение суммы С учетом информации, находящейся в этих двух массивах, операции включения месторождения в узел и исключения месторождения из узла будут выполнимы за O1. Под элементами, которые могут быть добавлены в решение на очередном шаге фазы конструирования, понимаются факты назначения месторождения определенному центру включения в узел, причем на каждом шаге рассматриваются лишь еще не включенные в узел месторождения. Функция оценки вычисляется как эффект в целевой функции от такого включения. Выражение для оценки включения месторождения в узел с центром в будет записываться так, min0, min0, . Для ускорения фазы конструирования применяется расширенная очередь с приоритетами, в которой находятся все элементы, активные на данном шаге. Очередь упорядочена по значению функции для элементов таким образом, что первым элементом очереди является элемент с наибольшим значением, т. е. самый предпочтительный кандидат на включение в конструируемое решение. Расширение же интерфейса очереди заключается в обеспечении ею операции удаления произвольного элемента не обязательно с наибольшим значением . В алгоритме используется RCL фиксированного размера, для его формирования выбирается элементов из с наибольшими значениями . На каждой итерации фазы конструирования после выбора элемента, добавляемого в решение, с оценкой, осуществляется согласованная корректировка, и . А именно, из очереди исключаются те элементы, которые в качестве распределяемого месторождения содержат . Изменяются приоритеты в для элементов, представляющих собой присоединение к еще не входящих в узлы месторождений, устанавливается равным, а увеличивается на . Сложность одного шага алгоритма оценивается как O log . Пусть массив назначений месторождений решения, а массив назначений месторождений для решения . Решение входит в окрестность, через которую определяется процедура локального поиска, если выполняется одно из условий и различаются значением одного компонента 1 в для какой-либо одной пары месторождений, включенных в в узлы, номера узлов поменяны местами, 1. На каждой итерации поиска происходит переход к тому решению из окрестности, для которого целевая функция принимает наибольшее значение. Эксперименты с GRASP производились на ПК с процессором Pentium Dual-Core CPU 2.2ГГц. Аналогичная конфигурация использовалась и в экспериментах с CPLEX. Алгоритм был реализован на языке C, в качестве очереди приоритетов использовался класс relaxedheap из библиотеки Boost. Машинный код получен с помощью Microsoft Visual Studio 2005 Express Edition, режим оптимизации O2. Наборы для экспериментального исследования и сравнения алгоритмов были сгенерированы случайным образом. Для части наборов с помощью решателя IBM ILOG CPLEX были получены точные решения, однако для некоторых наборов данных получение точного решения на стендовом ПК было затруднено из-за исчерпания виртуальной памяти. В отличие от CPLEX, существенной разницы во времени решения с помощью GRASP для наборов одинаковой размерности не выявлено при одинаковых параметрах алгоритма. Пример результата одного из экспериментов приведен в табл. 2. Размер исходного набора данных 200 точное решение, полученное с помощью CPLEX за 27 с, 5335,11. Было произведено 10 запусков алгоритма GRASP с различными начальными значениями генератора случайных чисел. Для каждого запуска было установлено ограничение в 1000 итераций. Размер RCL был установлен равным 32. В таблице показано, в скольких запусках, на какой итерации алгоритма и за какое время было достигнуто решение, превышающее значение, указанное в первой колонке. Видно, что хотя оптимальное решение для этого набора данных получено не было, алгоритму удавалось находить решения, отличающиеся от оптимального на 0,1 . В статье описан вероятностный алгоритм поиска GRASP для решения задачи дискретной оптимизации, возникающей при оптимальном формировании ПСУ на заданной территории. Построенный алгоритм, протестированный на наборах данных, сгенерированных случайным образом, показал способность к быстрому нахождению решений, близких к оптимальным. 