СПОСОБЫ РЕЛЯЦИОННОГО МОДЕЛИРОВАНИЯ  ИЕРАРХИЧЕСКИХ СТРУКТУР ДАННЫХ 

Данные различных предметных областей часто имеют связи иерархического характера. Наиболее надежным способом хранения информации до сих пор являются реляционные базы данных. Реляционный способ моделирования в чистом виде не поддерживает иерархические типы данных. Распространенность иерархических структур в задачах автоматизации обосновывает актуальность поиска способов эффективного отображения древовидных данных в реляционную модель. В статье рассматриваются способы представления структур иерархического типа в реляционных базах данных и типовые запросы к этим структурам хранения. Описаны критерии количественной оценки способов хранения и их сравнительные характеристики.

В области баз данных обычно различают три вида проектирования концептуальное, логическое и физическое 1, 2. Логическое проектирование позволяет выделить и обобщить типовые способы, независимые как от предметных областей концептуальное проектирование, так и от деталей реализации и операционных сред физическое проектирование. Проектировщику часто приходится сталкиваться с древовидными структурами, представляющими собой граф без циклов. В общем случае моделирование сводится к многоуровневой связи главный подчиненный, предок потомок, общий конкретный. Реляционный способ моделирования не обладает какими-либо специализированными механизмами для адекватного представления иерархической информации. Распространенность иерархических структур в реальном мире обосновывает актуальность поиска способов эффективного отображения древовидных данных в реляционную модель. При рассмотрении общих способов представления древовидных структур в реляционных базах данных в качестве примера использована СУБД Microsoft SQL Server для типовых операций используется синтаксис MS SQL Server 2005. Вместе с тем все предложенные способы являются независимыми от реализации, поскольку описываются на уровне логического проектирования и могут быть воспроизведены на других СУБД, поддерживающих реляционную модель. Графы широко используются для моделирования различных концепций теории программирования 3, 4. Основные понятия описаны в специальной литературе 58, здесь перечислены только определения, используемые далее в тексте статьи. Дерево это связный ациклический граф 5. Связность означает наличие путей простой цепи между любой парой вершин, ацикличность отсутствие циклов, т. е. между любыми парами вершин имеется только по одному пути. Граф порядка называется помеченным, если его вершинам присвоены некоторые метки, например, номера 1, 2, . Пара вершин и графа является смежной, если множество, является ребром. Произвольный помеченный граф порядка можно представить в виде квадратной бинарной матрицы, где на пересечении -й строки и -го столбца стоит 1, вершины и смежны, или 0 в противном случае. Такое представление называется матрицей смежности 5. Граф является ориентированным орграф, если все его ребра ориентированы, т. е. смежные вершины разделены на начальную и конечную. Ориентированное ребро называется дугой. В ориентированном дереве имеется только одна вершина с нулевой степенью захода в нее не ведут дуги, она называется корнем дерева, а все остальные вершины имеют степень захода 1 в них ведет ровно по одной дуге. Вершины с нулевой степенью исхода из которых не исходит ни одна дуга называются концевыми вершинами или листьями. Если в дереве существует путь из вершины к вершине, то вершина называется предком вершины, а вершина потомком вершины . Путем из вершины к вершине называется последовательность вершин, где для всех, узел является предком узла . Длиной пути называется число, на единицу меньшее числа составляющих этот путь вершин. Высотой вершины называется длина самого длинного пути из этой вершины до какого-либо листа. Высота дерева совпадает с высотой корня. Глубина вершины определяется как длина пути который единственный в дереве от корня до этой вершины. -арное дерево ориентированное это ориентированное дерево, в котором число исходящих дуг для любой вершины не превосходит . Вершина графа также имеет часто используемый синоним узел. Д. Кнут приводит следующие критерии сбалансированности деревьев. -арное дерево является сбалансированным, если выполнены следующие условия 7, с. 515 каждый узел имеет не более потомков каждый узел, за исключением корня и листьев, имеет не менее 2 потомков корневой узел, если он не является листом, имеет не менее двух потомков все листья расположены на одном уровне имеют одинаковую глубину. Более краткое определение сформулировано Г. Адельсон-Вельским и Е. Ландисом 8, с. 248. Дерево является сбалансированным тогда и только тогда, когда для каждого узла высота его двух поддеревьев различается не более чем на 1. Дерево называется идеально сбалансированным, если для каждой его вершины количества вершин в любом поддереве различаются не более чем на 1 8, с. 228. В настоящей статье рассматриваются только ориентированные деревья. В реляционной модели матрица смежности может быть представлена в виде множества списка пар с номерами идентификаторами, кодами вершин, где каждая пара определяет ориентированную дугу между вершинами. Способ представляет собой интуитивно понятную организацию иерархии в виде таблицы с замкнутой на саму себя связью рефлексивная связь. Корневые вершины отличаются от других пар пустой NULL ссылкой на предка. В приведенном примере рис. 1, табл. 1, 2 это поле Код вышестоящей территории. Число необходимых элементов для представления матрицы в виде списка и соответствующих ему строк таблицы будет равно порядку графа числу вершин графа, так как в каждую вершину, кроме корневой, входит только одна дуга. Обозначим это число элементов как, где число вершин в дереве 1 Для выполнения часто используемых выборок требуется поддержка рекурсивных запросов. Если СУБД не умеет выполнять такие запросы, то выборки придется строить с использованием других механизмов, например, временных таблиц или хранимых процедур и функций. Рассмотрим примеры запросов. Колонка level отображает глубину узла выбранного поддерева. Результат выборки поддерева Результат выборки предков Результат проверки вхождения узла Входит Запрос похож на выборку поддерева с последующим подсчетом количества выбранных узлов. Результат подсчета количества потомков узла 2 Результат определения абсолютного уровня 2 В этом способе дерево представляется вложенными подмножествами. Корневой уровень включает в себя все подмножества узлы первого уровня. Узлы первого уровня в свою очередь включают в себя все узлы второго уровня и т. д. Например, иерархия административно-территориального деления муниципалитета может выглядеть следующим образом рис. 2. В терминах реляционной модели схема будет выглядеть, как на рис. 3 пример заполнения в табл. 3. В способе Подмножества каждый элемент, кроме ссылки на непосредственных потомков, содержит ссылки и на потомков всех последующих уровней иерархии табл. 4. Если представить граф в матричном виде, то на пересечении -й строки и -го столбца стоит 1, если вершины и смежны, если существует путь от к длиной, или 0 в остальных случаях. Назовем такую матрицу смежности расширенной табл. 5. Очевидно, что по сравнению с обычной матрицей смежности см. табл. 2 расширенная матрица содержит избыточные значения 1. Количественная оценка избыточности будет напрямую зависеть от сбалансированности дерева. В случае совершенно несбалансированного дерева все вершины находятся на одном пути между корнем и единственным листом. Пусть вершины пронумерованы от 1 корень до лист. В этом случае расширенная матрица будет целиком заполнена выше главной диагонали. Количество элементов списка и строк таблицы будет равно сумме арифметической прогрессии от 0 из листа не исходят дуги до 1 из корня есть пути во все вершины кроме него самого 12 . 2 В случае идеально сбалансированного -арного дерева каждая вершина, согласно определению, будет иметь не менее 2 и не более путей к потомкам, где высота вершины. Распределение элементов по уровням показано в табл. 6. Количество внешних вершин не может превышать, 3 где высота дерева. Тогда количество элементов списка и строк таблицы можно оценить так 2. 4 Таким образом, оценка избыточности будет зависеть от сбалансированности дерева и варьироваться от 4 в наилучшем случае до 2 в наихудшем. Избыточность данных приводит к необходимости дополнительной поддержки их целостности императивно, триггерами, перезаписывающими список и уровни предков данного узла при его вставке или перемещении. Для операции удаления достаточно декларативной ссылочной целостности каскадное удаление. Типовые запросы показывают преимущества, полученные от избыточности хранения запросы стали короткими и простыми, не содержат соединения с другими таблицами, что обеспечивает их эффективность на любой СУБД. Результат выборки поддерева Результат выборки предков Результат проверки вхождения узла Входит Результат подсчета количества потомков узла 2 Результат определения абсолютного уровня 2 Согласно теории графов, для обхода дерева существует три способа можно проходить узлы в префиксном, в инфиксном и в суффиксном порядке. Префиксный порядок обхода дерева рекурсивно определяется так сначала корень дерева, потом узлы левого поддерева в префиксном порядке, наконец, узлы правого поддерева в префиксном порядке. Пример обхода в префиксном порядке приведен на рис. 4. Хранение маршрута обхода дерева в префиксном порядке также встречается у Джо Селко 9, однако там способ носит не соответствующее его сути название Вложенные множества nested sets. Каждый квадрат на рис. 4 обозначает узел, цифра в левом его углу является порядковым номером этапа маршрута при входе в узел, а цифра справа номером при выходе, когда тем же способом пройдены все потомки. Соответствующая структура таблицы показана на рис. 5, а пример содержания в табл. 7. Нетрудно заметить, что номера потомков всегда располагаются в интервале между соответствующими номерами предка, сколь угодно дальнего. Храня порядок обхода дерева, этим свойством можно воспользоваться в типовых запросах, избежав рекурсии. Оценка избыточности хранения по сравнению со способом Список смежности очевидна вместо одного номера вершины предка каждый элемент матрицы будет хранить упорядоченную пару номеров 2. 5 Избыточность хранения делает необходимым пересчет порядка обхода при добавлении новых или перемещении существующих узлов удаление можно игнорировать. В триггере придется реализовать последовательный порядок обхода. Но, например, если добавляется элемент самого нижнего уровня, то придется пересчитать все номера выше или правее, что может быть сравнимо с затратами на пересчет маршрута по всему дереву. Если нумеровать входы и выходы из узлов с некоторым интервалом, например 100 или 1000, что в значительной степени зависит от предварительных оценок количества хранимых узлов дерева, то вставка новых элементов будет происходить без полной перенумерации всех последующих. В запросе не вычисляется глубина узла. Добавление этой функции приведет к введению выполняющегося для каждого элемента агрегирующего подзапроса см. листинг 15. Результат выборки поддерева Выборка всех предков симметрична предыдущему запросу относительно BETWEEN. В запросе не вычисляется глубина узла. Результат выборки предков Результат проверки вхождения узла Входит Результат подсчета количества потомков узла 2 Результат определения абсолютного уровня 1 Суть способа заключается в хранении пути от вершины до данного узла в явном виде и в качестве ключа. Например, ранее приведенная на рис. 2 иерархия территорий могла бы выглядеть следующим образом, схожим с нумерацией частей, разделов и глав в книге табл. 8. Данный способ является наиболее наглядным с точки зрения кодификации элементов каждый узел получает значение, которое пригодно для непосредственного восприятия пользователем, сам код и его части несут смысловую нагрузку. Подобные свойства являются важными в классификациях, предназначенных для широкого использования, например, в стандартизованных справочниках территорий ОКАТО, отраслей экономики ОКВЭД, NAICS, медицинских диагнозов МКБ международный классификатор болезней и во многих других областях. Оценка избыточности хранения аналогична таковой для способа Подмножества расширенная матрица смежности содержит те же элементы рис. 6. Ограничив максимальное количество уровней иерархии и число прямых потомков, можно обойтись без разделителей, используя символьные коды с фиксированной разбивкой на группы разрядов. Пустые лидирующие разряды в группе заполняются нулями. Однако запросы не всегда могут быть эффективно реализованы на уровне СУБД, так как, например, поиск подстроки вызывает сканирование таблицы вместо поиска по ключу или его начальному фрагменту. В запросе не вычисляется глубина узла. Результат выборки поддерева В запросе не вычисляется глубина узла. Результат выборки предков Результат проверки вхождения узла Входит Результат подсчета количества потомков узла 2 Результат определения абсолютного уровня 3 В качестве критериев сравнения приведенных способов предлагается использовать следующие характеристики сложность схемы базы данных запросы на извлечение данных запросы на изменение данных избыточность хранения данных поддержка целостности данных. Сложность схемы базы данных определяется как количество достаточных для реализации таблиц, ссылок связей между ними и колонок, содержащих данные о структуре графа матрице смежности. Запросы на извлечение данных характеризуются количеством необходимых соединений. Наиболее сложным вариантом является рекурсивный запрос, в котором число соединений в цикле соответствует глубине иерархии. Например, выборка поддерева с пятью уровнями будет осуществляться в цикле из пяти итераций, результат каждой из которых соединяется с предыдущим. Запросы на изменение данных, такие как вставка и удаление узлов, характеризуются необходимостью дополнительных операций со связанными узлами и обновлением избыточных данных. Поддержка целостности данных характеризуется необходимостью дополнительного императивного кода триггеров помимо декларативной ссылочной целостности. Сведя перечисленные характеристики в одну общую таблицу табл. 9, мы получим сравнительную картину, предназначенную для выбора одного из способов реализации. В статье рассмотрены основные способы организации иерархических структур в реляционных базах данных и их характеристики. Важно отметить, что нет плохих или хороших способов проектировщик сможет сделать выбор оптимального решения, исходя из условий конкретной задачи на основании предлагаемого множества критериев. Несмотря на относительно небольшое количество шаблонов логического уровня по сравнению, например, с объектно-ориентированным проектированием, где их выделено более 40 10, систематизация таковых в применении к базам данных является необходимым шагом как для индустриализации процесса проектирования, так и для обучения. Предлагаемую классификацию способов плоского представления иерархических данных предполагается использовать в исследованиях, финансируемых грантом Федерального государственного бюджетного учреждения Российский фонд фундаментальных исследований 1308-01250. 