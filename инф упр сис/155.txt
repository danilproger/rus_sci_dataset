СИСТЕМНЫЙ АНАЛИЗ ИССЛЕДОВАНИЕ ПРОБЛЕМ ИНТЕГРАЦИИ   В РАСПРЕДЕЛЕННЫХ СИСТЕМАХ   УНАСЛЕДОВАННЫХ ПРИЛОЖЕНИЙ   С ИСПОЛЬЗОВАНИЕМ АСИНХРОННОГО ПИ-ИСЧИСЛЕНИЯ 

Рассматриваются проблемы организации распределенных систем унаследованных приложений, использующих сторонние компоненты для управления интеграцией и последующим внутренним взаимодействием. Исследуется возможность устранения блокировок, которые возникают при взаимодействии приложений, применяющих разные типы связи. В качестве формальной модели исследования применяется асинхронное пиисчисление. Предложен набор рекомендаций для организации рассматриваемых систем.

Развитие технологий создания распределенных систем в последние годы во многом определено возрастающими требованиями бизнеса. Современные распределенные системы используют приложения сторонних поставщиков информационных услуг, которые реализуют типовые подзадачи более эффективно. Такой подход позволяет улучшить качество решения задач и минимизировать сопутствующие расходы. С развитием рассматриваемого подхода сформировалось новое направление в инженерии программного обеспечения ПО, лежащего в основе таких систем. Объектом нашего исследования является процесс интеграции гетерогенных приложений сторонних поставщиков информационных услуг в распределенную систему и управление их взаимодействием. При проектировании таких систем возникает необходимость создания универсальной архитектуры, позволяющей подключать приложения со скрытой внутренней организацией. Также возникает необходимость в инструментах адаптации рассматриваемого класса приложений для их использования в процессах проектируемой распределенной информационной системы. Очевидно, что сторонние приложения можно использовать не только в качестве поставщиков специализированных услуг, но и для эффективного решения задач интеграции приложений и управления распределенной системой. Целью работы является исследование проблем блокировок при взаимодействии интегрируемых в распределенную систему унаследованных приложений, ориентированных на разные типы связи 1, 2, что в свою очередь поможет решить задачу автоматизации создания промежуточного ПО, направленного на управление взаимодействием в таких системах. Сформулируем общие требования к архитектуре системы на основе интегрированных приложений, использующих для управления интеграцией и последующим внутренним взаимодействием сторонние сервисы 1 управление интеграцией, реализация канала, трансляция данных, маршрутизация сообщений, хореография процессов и прочее управление взаимодействием должны быть вынесены в промежуточное ПО 2 клиенты системы, т. е. приложения, интегрируемые в общую среду, должны быть слабо связаны с промежуточным ПО 3 промежуточное ПО должно через соответствующие адаптеры предоставлять возможность взаимодействовать с клиентом на основе любого типа связи 4 адаптер клиента должен минимально необходимо расширять функционал клиента 5 взаимодействие клиент клиент должно поддерживать все возможные модели связывания. Интеграция на уровне приложения 2, 3 в рамках рассматриваемой архитектуры является исключительным случаем и требует подробного исследования. Отметим, что такая архитектура подразумевает связывание не приспособленных для того клиентов, комбинирование продиктованных их природой связей при необходимости соблюдать условия, накладываемые особенностями исследуемой области. На этом уровне интеграции возникают проблемы во взаимодействии друг с другом приложений, ориентированных на разные типы связи. Для того чтобы исследовать возможность устранения блокировок, которые, как будет показано далее, возникают между разносвязанными приложениями, необходимо рассмотреть используемые типы связи и построить математическую модель системы на основе таких типов. Исходя из особенностей исследуемой области можно утверждать, что интегрируемые компоненты не зависимы друг от друга и полностью реализуют свой функционал. При построении архитектуры в рамках рассматриваемого класса систем необходимо учесть следующее условие промежуточное ПО с помощью соответствующих адаптеров должно обеспечивать взаимодействие клиентов, ориентированных на разные типы связи. Перечислить все существующие и перспективные технологии связи не представляется возможным, однако, как показано в работе 4, можно считать достаточным рассмотрение приведенных в работе шести типов связи 1 сохранная асинхронная связь 2 сохранная синхронная связь 3 нерезидентная асинхронная связь 4 нерезидентная синхронная связь с синхронизацией по приему 5 нерезидентная синхронная связь с синхронизацией по доставке 6 нерезидентная синхронная связь с синхронизацией по ответу. Для исследования возможности взаимодействия интегрируемых приложений необходимо промоделировать парные сочетания приведенных типов связи. Для исследования поведения взаимодействующих приложений предлагается использовать асинхронное пи-исчисление 57. В статье 8 представлено формализованное описание процессов, отражающих приведенные в работе 4 типы связи, а также показано, что из 36 возможных сочетаний типов связи 12 сочетаний приводят к блокировке работы системы. В качестве примера возьмем пару типов связи, на основе которой, как будет показано далее, можно продемонстрировать вариант взаимодействия с блокировкой процессов. Введем сообщение, отправителем которого является процесс, а получателем процесс ссылка на процесс Отправитель нерезидентная синхронная связь с синхронизацией по ответу где процесс, следующий за синхронизацией взаимодействия. Получатель нерезидентная синхронная связь с синхронизацией по доставке где процесс буфера процесс счетчика состояния получателя процесс получателя процесс, предшествующий обработке сообщения процесс, следующий за обработкой сообщения Для исследования возможностей совместной работы интегрируемых приложений с учетом сформулированных требований к архитектуре необходимо построить модель взаимодействия формализованных выше процессов. Рассмотрим в качестве примера с блокировкой процессов пару нерезидентная синхронная связь с синхронизацией по ответу нерезидентная синхронная связь с синхронизацией по доставке. Для моделирования взаимодействия выбранных процессов с учетом описанных выше условий введем процесс, отражающий работу промежуточного программного обеспечения, выполняющего транслирующую функцию с учетом выбранных типов связи В результате процесс системы будет состоять из трех параллельных процессов процессу для продолжения работы перехода к процессу необходима синхронизация по одновременно процесс продолжает работу процесс, при этом . Процесс сильно конгруэнтен процессу существует отношение сильной бисимуляции 9 между процессами и, вследствие чего процесс недостижим. Для выработки рекомендаций для построения рассматриваемого класса систем необходимо исследовать возможность решения выявленных блокировок. Для обеспечения и управления взаимодействием приложений используется посредник специальное ПО промежуточного уровня. Специфика рассматриваемого класса систем накладывает ограничения на изменения системы, а именно, исходя из сложности внесения изменений в компоненты, решение проблемы блокировок может быть достигнуто только благодаря изменению промежуточного ПО. Однако стоит отметить, что существуют исключительные условия принципиального характера, вынуждающие вносить минимальные изменения в интегрируемые компоненты. Причиной возникновения блокировок при связывании компонентов рассматриваемого класса систем является невозможность осуществить синхронизацию отправителя инициатора связывания с получателем. В вариантах связываний с отправителями, работающими по правилам синхронной связи, отправитель сразу после отправки сообщения блокируется до получения извещения определенного типа от получателя. В случае, если получатель настроен на асинхронную или синхронную связь, но с извещением неподходящего типа, отправитель никогда не получит необходимое для продолжения работы извещение. Единственный вариант связывания с блокировкой и отправителем, работающим по правилам асинхронной связи, связывание отправителя с асинхронной сохранной связью с получателем с нерезидентной асинхронной связью. Обеспечение сохранной связи с таким получателем невозможно. Причина та же самая буфер отправителя, обеспечивающий сохранную связь, не может осуществить синхронизацию с получателем, а значит гарантировать отправителю доставку отправленного сообщения. Определены три типа синхронизации по приему, по доставке и по ответу. Типы синхронизации характеризуются моментом отправки извещения сообщения, снимающего блокировку отправителя получателем. Отправку извещения можно считать следствием смены состояния получателя, перехода к обработке полученного сообщения или завершения обработки и перехода к обработке последующего сообщения. При этом извещение по ответу, отправляемое получателем в момент времени после доставки сообщения, является достаточным для снятия блокировки отправителя с синхронизацией по приему. Для устранения выявленных блокировок необходимо обеспечить синхронизацию отправителя с получателем. С учетом ограничений рассматриваемого класса систем решение должно достигаться за счет изменения поведения посредника ПО промежуточного уровня. Посредник должен гарантированно отправлять извещение, необходимое для синхронизации. При этом момент отправки извещения не должен опережать действительный переход получателя в соответствующее состояние. Таким образом, необходимым для устранения блокировки требованием к получателю является способность возвращать на запрос посредника состояние обработки сообщения. Рассмотрим решение блокировки на примере связывания отправителя, работающего по правилам нерезидентной синхронной связи с синхронизацией по ответу, с получателем, поддерживающим нерезидентную синхронную связь с синхронизацией по доставке. Ранее было показано, что такое связывание приводит к блокировке отправителя. Отправителю, процессу, для продолжения работы перехода к процессу необходима синхронизация по одновременно получатель, процесс, продолжает работу процесс, при этом . Процесс, продолжение работы отправителя, недостижим. Рассмотрим состояние системы, предшествующее синхронизации процесса с процессом Процесс система в состоянии, предшествующем синхронизации процесса с процессом Процесс система в заключительном состоянии. Процесс недостижим. Процессу для продолжения работы перехода к процессу необходима синхронизация по . Пусть . Расширим так, чтобы обеспечивалась необходимая синхронизация Необходимую синхронизацию может обеспечить только процесс . Расширим необходимым поведением Обеспечиваемая расширенным процессом синхронизация должна происходить после завершения обработки запроса процессом . Добавим в процесс ожидание сообщения о достижении процессом необходимого состояния Необходимым требованием к получателю является способность к фиксации и возвращению состояния, достаточного для синхронизации в рассматриваемом случае это состояние, соответствующее завершению обработки запроса. Интегрируемое приложение может реализовывать необходимое поведение, в противном случае требуется минимальное расширение унаследованного приложения. В рассматриваемом сочетании достаточно расширить поведение или задействовать имеющийся функционал получателя так, чтобы подпроцесс получателя возвращал состояние, соответствующее завершению обработки Подставим в процесс вместо и процесс вместо Процесс процесс c измененным поведеc измененным поведе измененным поведением не имеет блокировок. Расширим процесс в соответствии с Расширим процесс в соответствии с Система не имеет блокировок. Проблема синхронизации решена расширением поведения посредника и минимальным расширением поведения получателя . Аналогичным образом с помощью предложенного подхода решаются выявленные блокировки возможных сочетаний типов связи 8. В настоящей работе были исследованы проблемы интеграции компонентов в распределенных системах, использующих для управления интеграцией и последующим внутренним взаимодействием сторонние сервисы. Были сформулированы требования к архитектуре такого класса систем, а также описаны возможные типы связи интегрируемых в систему компонентов. Для исследования возможностей совместной работы интегрируемых компонентов с помощью асинхронного пи-исчисления была построена математическая модель взаимодействия компонентов, поддерживающих описанные типы связи. В результате моделирования выявлены варианты с блокировкой процессов 8. В завершение работы на математической модели системы было показано решение выявленных блокировок. На основе проведенного исследования можно сделать вывод, что взаимодействие компонентов, ориентированных на разные типы связи в системах рассматриваемого класса, удовлетворяющих поставленным требованиям, при условии предложенных изменений возможно, а следовательно, возможно решение задачи автоматизации создания промежуточного программного обеспечения, направленного на управление взаимодействием в таких системах. 