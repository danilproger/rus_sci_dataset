МЕТОДЫ РАСШИРЕНИЯ ЯЗЫКОВ ПРОГРАММИРОВАНИЯ  (ЧАСТЬ 1) 

1 Приводится обзор методов расширения современных языков программирования, определенных автором и использованных для построения классификации расширений по способам интеграции и исполнения кода расширений. Рассматривается применение расширений в реальных системах программирования с примерами исходного кода на расширенных языках, анализируются достоинства и недостатки каждого из обсуждаемых методов. Рассмотрены наиболее простые и часто использующиеся методы интеграции кода расширений в основной код, не требующие изменений в базовой системе программирования.

В современных проектах разработки программного обеспечения довольно часто возникает потребность в создании специализированного инструмента программирования для решения задач, связанных с определенной предметной областью 1. Современные языки программирования общего назначения например, C, C, Object PasC, Object Pas, Object PasObject Pas PasPascal, Java предоставляют разработчику широкий спектр возможностей, однако их применение в определенной предметной области может оказаться неудобным и неэффективным. То есть универсального языка программирования, одинаково результативного для применения в любой области, не существует 14. В этом случае наиболее действенным является применение специально предназначенных для узкого класса задач предметно-ориентированных языков 2. Однако разработка специализированного языка программирования является трудоемким и затратным процессом, не всегда возможным в условиях отдельно взятого проекта. Кроме того, зачастую, наряду со специализированными возможностями, от языка программирования одновременно требуется широкий спектр функциональных возможностей, присущих языкам общего назначения 3. Но не нужно торопиться изобретать велосипед достаточно его усовершенствовать. В результате многолетней истории создания языков программирования появились развитые языки общего назначения, обладающие многими достоинствами, предоставляющие всю необходимую базовую функциональность и имеющие богатую инструментальную поддержку. В силу этих причин вместо разработки совершенно нового языка программирования во многих случаях лучшим решением является применение различных способов совмещения кода на основном языке программирования общего назначения с кодом специализированных расширений, другими словами, реализация расширения уже существующего языка программирования. Данный обзор сделан с целью сформировать представление о многообразии специализированных средств в современных языках и системах программирования, а также сориентировать разработчика ПО в выборе подходящих методов при необходимости реализовать собственные расширения языков программирования. В общей сложности автором определено восемь методов расширений языков программирования четыре метода интеграции кода расширений в языки программирования и четыре метода исполнения кода расширений. Кроме этого, в последнем разделе приводится пример предметно-ориентированного расширения традиционного языка программирования средствами решения задач с данными в табличной форме 5, с обоснованием выбора подходящих в этом случае методов расширения базового языка БЯ. Данное расширение реализовано автором 6 на базе средств программирования системы ЭРА эфемеридные расчеты в астрономии 7 и применяется для решения задач эфемеридной астрономии. По мнению автора, в общем случае, согласно имеющейся практике, можно выделить несколько основных способов совмещения интеграции разных языковых конструкций в одной программе и классифицировать в соответствии с ними расширения современных языков программирования. Предлагается также использовать термин более конкретно, или применительно к каждому из таких способов. Классификация расширений по методу их интеграции в БЯ представляет собой список следующих категорий здесь они приведены в порядке усиления выразительности языковых средств, использующихся для описания специализированных расширений. 1. Расширенные возможности реализуются отдельно, обычно на другом языке, и доступны в программе на БЯ через интерфейс API. 2. Расширения БЯ реализованы на том же языке и доступны через определенное подмножество БЯ. 3. Конструкции другого языка вносятся в текст программы на БЯ как есть, но в виде строкового значения, передающегося в качестве параметра в интерфейсе API для его интерпретации. 4. Базовый язык расширен новыми языковыми конструкциями. Заметим, что в реальных системах программирования для расширения языковых возможностей редко применяется какой-то один метод. Чаще всего используется комбинация двух и более методов. Это простейший прямолинейный способ введения расширений в БЯ в том смысле, что расширение выразительных возможностей БЯ не происходит но появляются новые функциональные возможности расширенные возможности вводятся в текст программы обычными вызовами функций, подпрограмм, манипуляцией с объектами, модулями, т. е. посредством интерфейса API, выраженного в конструкциях БЯ. Реализация же самих расширенных возможностей выполняется отдельно от основной программы, чаще всего на другом языке программирования, и предоставляется в виде готового исполняемого кода, как правило, без исходного текста в виде объектных модулей библиотек или DLL а в некоторых случаях встраивается в систему исполнения run-time system. В этом случае код реализации расширений связывается вместе с объектным кодом основной программы статически, на этапе сборки приложения компоновщиком linklinker, а в случае реализации расширений в виде DLL динамически, путем вызовов функций из DLL во время исполнения программы средствами операционной системы. Это достаточно распространенный способ введения расширенных возможностей в язык программирования общего назначения, и мы убедимся в этом, рассмотрев несколько примеров, приведенных в данном разделе. В качестве недостатков данного метода следует отметить ограниченность выразительных средств расширений, представленных лишь внешними переменными и функциями, а также накладные расходы на исполнение внешних функций и передачу параметров, порой существенные. Реализация стандартных библиотек C 8 выполнена по описанному выше принципу функциональность библиотек реализована разработчиком компилятора C например, компанией Microsoft специально для целевой платформы и поставляется отдельным компонентом в виде исполняемого кода для компоновки с текстом пользовательской программы, использующей его через интерфейс API. Чтобы применить функциональность этих библиотек, пользователь в своей программе должен вставить ссылку на специальные модули, содержащие описание интерфейса API. Тогда необходимые модули подключатся к исходному коду пользовательской программы компилятором и компоновщиком. Модули с описанием интерфейса API могут быть доступны в виде исходного кода на том же БЯ программирования в данном случае, на C или опять же лишь в бинарном виде. Реализация функциональности стандартных библиотек C может быть выполнена частично на C, частично на ассемблере т. е. не на C или в виде бинарного кода. Реализация стандартных библиотек C зависит от целевой платформы и у каждого разработчика компилятора своя. Рассмотрим другой пример. В Microsoft Access есть возможность программирования на языке Visual Basic for Applications VBA для автоматизации манипуляций с объектами баз данных БД. В среде программирования на VBA есть условия для подключения с реализацией разных дополнительных возможностей, расширяющих функциональность программ на VBA. Например, можно подключить входящую в стандартную поставку Microsoft Access библиотеку Объектов доступа к данным Data Access Objects DAO, предоставляющую API для типичных операций с таблицами и запросами в реляционной БД. В примере 1 9, гл. 16, программа 16.5 показано использование интерфейса библиотеки DAO в программе на VBA для изменения структуры таблицы в реализации приложения Игра в доминирование. Строки пронумерованы для удобства рассмотрения програм много кода. В этом примере проиллюстрировано удаление и добавление полей в таблицу с использованием интерфейса DAO. В книге 9, гл. 16 подробно описано, какие элементы интерфейса DAO объекты и методы использовались в коде удаления полей строки 1315 и в коде создания новых полей строки 1721 Удаление поля производится с помощью метода, в качестве параметра которого указывается имя удаляемого поля. Добавление нового поля производится следующим образом. Создается новый объект, обладающий необходимыми характеристиками заданным именем поля, типом и размером данных. После этого с помощью метода созданный объект добавляется в семейство объекта, содержащее все поля таблицы . Подобным образом организована возможность работы с БД и в других средах программирования. Например, в Borland Delphi 6.0 для работы с БД в программах на Object Pascal можно использовать библиотеку BDE, а при программировании в Microsoft Visual Studio 2005 библиотеку ADO.NET с объектно-ориентированным интерфейсом API. Для доступа к интерфейсу ADO. NET в программе на языке C, например, необходимо подключить модуль, реализация которого поставляется в виде библиотеки динамической загрузки . В Microsoft VisuMicrosoft Visual Studio 2005 такая же возможность поддержи такая же возможность поддерживается и для программ на языках C, J, Jscript, Visual Basic VB. Рассмотрим пример программного кода на C с использованием библиотеки ADO.NET 10. В этом примере создается соединение с БД с помощью объекта типа строки 13, 14, затем через специальный объект устанавливается доступ к таблице Поставщики и загружается набор записей в объект типа строки 1737. Далее аналогичным образом в этот же набор записей подгружается содержимое таблицы Продукты строки 4150. После этого с помощью метода коллекции ссылок объекта типа создается ссылка на таблицу Продукты из таблицы Поставщики по ключевому полю КодПоставщика строки 5764. Из этого примера видно, что при всем удобстве объектноориентированного интерфейса к дополнительным возможностям управления БД из программы на языке общего назначения программирование таким способом достаточно утомительно. Оно трудоемко и требует написания большого количества строк кода только с подготовительными действиями строки 1353, 5763, несмотря на то, что целью является выполнение над БД достаточно простого действия строка 64. Просматривать, отлаживать и модифицировать такой длинный фрагмент кода неудобно. Выше мы рассмотрели случаи, когда расширения реализуются заранее и предоставляются пользователю вместе с инструментами программирования как отдельный компонент для встраивания в код пользовательской программы на этапе сборки или исполнения в виде DLL. Но бывает, что подобная реализация расширений выполненная отдельно и доступная через API встроена в систему исполнения, например в интерпретатор приложений. Именно таким способом в системе ЭРА 7 выполнена интеграция специализированных предметно-ориентированных функций действий и функций преобразования данных их функциональность заранее реализована на языке Object Pascal и встроена в инструментальное средство, выполняющее трансляцию и интерпретацию программ на языке СЛОН см. ч. 2 статьи. До сих пор мы говорили о случае, когда расширенные возможности предоставляются пользователю программисту в составе средств программирования. Однако у рассматриваемого метода совмещения реализаций программного кода на разных языках через интерфейс API есть еще один вариант использования когда в качестве расширения пользовательской программы используется тоже пользовательский программный код написанный этим же или другим программистом на другом языке. Это легко представить в случае, когда один или несколько программистов разрабатывают части общего приложения на разных языках программирования и хотят соединить эти части вместе. В частности, распространенным примером является потребность совмещения программного кода, разработанного на разных языках, в целях миграции програм много обеспечения, разработанного некоторое время назад, например на языке FORTRAN, Pascal или C. Такой код может понадобиться встроить, например, в программу на C. Для этого в языке C предусмотрена специальная рас ширенная декларация внешней компоновки со спецификатором того языка, на котором реализована внешняя функциональность. В частности, на C декларации внешнего связывания в стиле C будут выглядеть следующим образом 11. Отметим, что при использовании внешнего связывания с функциями на другом языке программирования требуется соблюдать соответствующие соглашения по передаче параметров и включать необходимые опции сборки. Это достаточно простой технически способ внедрения расширений в БЯ общего назначения реализовать специализированные возможности на том же БЯ и предоставить их пользователю программисту в виде подмножества БЯ, наделенного предметно-ориентированной семантикой и определенного набором правил формальных требований, которым должен следовать пользователь для работы с данными специальными возможностями. Однако этот метод не всегда эффективен. В случаях, когда семантика расширений и семантика основного языка достаточно сильно или полностью несовместимы, выбор данного метода может повлечь введение таких ограничений на употребление выразительных средств БЯ, которые приведут к неудобству программирования, к увеличению объема ручного кодирования и, как правило, к неэффективности исполнения такого кода. А для исходного кода будут характерны плохая читабельность и трудность сопровождения. Примером эффективного использования рассматриваемого метода введения расширений является язык SystemC. Язык SystemC, созданный на основе языка C и специальных библиотек классов CC, предоставляет средство описания параллельных вычислений в целях построения моделей программно-аппаратных комплексов с различной степенью точности. Это средство широко используется в разработке систем на кристалле Systemon-Chip SoC . В стандарте SystemC определен набор правил и ограничений, которым должен следовать разработчик программ на C, чтобы получить правильный код на SystemC, а также разработчик реализации библиотеки SystemC. В библиотеку SystemC входит набор классов, функций и макросов, позволяющих оперировать в программе на C специализированными предметно-ориентированными понятиями, определяющими составные элементы building blocks моделируемой системы. В качестве примера рассмотрим фрагмент кода из документации по SysSystemC 14. В данном фрагменте кода описана архитектура и функциональность асинхронного устройства, выполняющего инкремент входного сигнала при каждом его изменении. Благодаря нотации SystemC в исходном коде наглядно представSystemC в исходном коде наглядно представ в исходном коде наглядно представлены понятия из области описания устройств цифровой обработки сигналов. Предоставляемая OSCI реализация библиотек SystemC характериSystemC характери характеризуется эффективным исполнением программ на SystemC. Дополнительным плюсом данной реа. Дополнительным плюсом данной реализации, поскольку пример 4 написан на синтезируемом подмножестве SystemC, является то, что рассматриваемый код пригоден для дальнейшей обработки инструментальными средствами синтеза важной стадии дизайна аппаратного обеспечения. И все-таки, хотя данный метод и приближает нас к желаемому выражению расширенных возможностей в терминах целевой задачи в рамках единой системы программирования, ему присущи общие для первых двух методов недостатки избыточность программного кода, вытекающая из ограничений выразительных средств базовой системы программирования отсутствие языкового контроля слабая поддержка редактором исходного текста. Эти недостатки были отмечены еще в статье о парадигме LOP 2. В этом случае программный код на специализированном языке записывается в виде строкового значения в тексте программы на БЯ программирования, и эта строка передается как параметр через интерфейс API доступа к библиотеке реализации расширений. Например, так можно записать запрос на языке SQL и использовать его в качестве параметра объекта DAO в программе на VBA в Microsoft Access см. пример 1, строки 10, 11 или аналогичным образом исполнить инструкцию на языке DDL, как показано в примере 5 9, гл. 16, программа 16.4. В строке 9 создана простая инструкция DDL удаления таблицы, а в строке 12 она исполнена с помощью метода объекта типа . Далее, в строках 1620 сформирована более сложная инструкция DDL создания таблицы с новой структурой, включающая параметры, взятые из основной программы, имена полей таблицы, полученные с помощью функции . Эта инструкция исполнена в строке 21. Коротко о языке DDL Для изменения схемы данных создан DDL, Data-Definition Language. Инструкции на языке DDL позволяют выполнять действия по изменению схемы данных и структуры объектов данных, например создавать и удалять таблицы добавлять и удалять из таблиц поля и индексы создавать и удалять связи между таблицами. В интерфейсе DАО имеется набор специальных объектов, который является интерфейсом для доступа к средствам DDL. Таким образом, с помощью объектов DАО можно управлять структурой таблиц и схемой данных, не составляя самих инструкций на языке DDL. Другими словами Аналогичные действия можно выполнить, пользуясь объектно-ориентированным интерфейсом DАО 9, гл. 16. Рассмотрим еще один пример использования строки запроса SQL в программе на языке общего назначения на этот раз на языке C 15. В этом примере сначала формируется строка запроса SQL с параметром строки 36, затем подставляется нужное значение параметра строка 7, далее запрос исполняется строка 8, и, наконец, полученный в результате набор данных подвергается обработке строки 913. Преимуществом рассматриваемого метода введения расширений является возможность записать в виде строки любую конструкцию расширения, в том числе даже не имеющую ничего общего с конструкциями БЯ, и при этом для поддержки работы таких расширений не нужно вносить изменения в имеющиеся инструментальные средства программирования на БЯ. Вместо этого для реализации таких расширений необходимо разработать библиотеку функций, включающую разбор и интерпретацию строк, описывающих конструкции расширений. Разработка выполняется средствами БЯ программирования. В зависимости от структуры обобщенного строкового описания конструкции расширения реализация такой функции может быть как относительно простой, например, основанной на принципе разбора регулярных выражений, так и сложной, требующей реализации более сложного синтаксического анализа. Однако у такого подхода есть и серьезные недостатки 15 конструкции расширений не являются частью языка, а вводятся в программу с помощью вспомогательных конструкций в виде обрамленной в кавычки строки расширения и явных вызовов функций для ее формирования и интерпретации передача параметров между основным кодом на БЯ и кодом расширения не контролируется компилятором отсутствует специализированная типизация возвращаемого значения функции интерпретации расширения, поскольку результат работы этой функции представлен в виде объектов БЯ, а не в виде объектов, соответствующих специфическим понятиям данного расширения см. пример 6, строки 1012 невозможно осуществить проверки времени компиляции для такого рода расшире ний. 