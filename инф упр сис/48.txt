О ВЕРИФИКАЦИИ  ПРОСТЫХ  АВТОМАТНЫХ  ПРОГРАММ НА  ОСНОВЕ  МЕТОДА   

Излагается применительно к простым автоматным программам (их поведение описывается одним конечным автоматом) техника верификации, которая базируется на темпоральных логиках и называется Model Checking. Для автоматных программ удается автоматизировать процесс построения модели программы, подлежащей верификации. Verification of simple automata-based programs (whose behavior can be described with a singe finite automaton) is considered. The applied verification technique is based on temporal logics and is known as Model Checking. For automata-based programs it is possible to automate the process of building program model subject to verification.

 это автоматизированный подход, позволяющий для заданной модели поведения системы с конечным возможно, очень большим числом состояний и логического свойства требования проверить, выполняется ли это свойство в рассматриваемых состояниях данной модели. Алгоритмы для обычно базируются на полном переборе пространства состояний модели. При этом для каждого состояния проверяется, удовлетворяет ли оно сформулированным требованиям. Алгоритмы гарантированно завершаются, так как модель программы конечна. Принципиальная схема приведена на рис.1. В проблематике верификации 1 сформировалось два направления аксиоматическое и алгоритмическое. При использовании первого из них разрабатывается набор аксиом, с помощью которого может быть описана как сама система, так и ее свойства 2. Основу второго направления составляет метод . Перечислим достоинства этого метода 1. Эффективность. Программы для верификации моделей способны работать с большими пространствами состояний благодаря концепции упорядоченных двоичных разрешающих деревьев 3, которая также упоминается в данной работе. 2. Возможность генерации контрпримеров. Перечислим ограничения рассматриваемого метода. 1. Поддержка только моделей с конечным числом состояний. Поэтому для большинства классов систем с бесконечным числом состояний необходимо выполнять формальную верификацию системы математическое доказательство свойств самой программы, а не ее модели. 2. Ограниченность верификации. С использованием метода проверяется модель системы вместо реальной системы. Таким образом, любое применение метода настолько же качественно, как и сама модель системы. Кроме того, с помощью этого метода проверяются не любые свойства модели, а только темпоральные. 3. Для многопроцессорных систем размер пространства состояний в худшем случае пропорционален произведению размеров пространств состояний их индивидуальных компонент. Этот эффект называется проблемой показательного экспоненциального взрыва состояний state-space explosion problem. В рамках данной работы рассматривается автоматное программирование программирование с явным выделением управляющих состояний 4, 5, поэтому ограничения 1 и 3 в нашем случае несущественны. Отметим, что настоящая работа выполнялась параллельно с работой 6, которая появилась после знакомства ее авторов с автоматным подходом. Технология автоматного программирования использует такие модели 7, как автомат Мили 8, автомат Мура 9 и смешанный автомат, которые легко интерпретируются с помощью модели Крипке. Автоматную программу будем называть простой, если ее поведение описывается одним конечным автоматом. Первым шагом в процессе верификации автоматной программы является преобразование графа переходов исходного автомата в модель Крипке, для которой удобно формулировать проверяемые свойства программ. В данной работе отдается предпочтение автомату Мили, который при необходимости всегда может быть преобразован в автомат Мура. Исследования в данной области моделирование автомата и конвертация еговмодель Крипке проводились в работах 1013. При этом конвертация была сопряжена со следующими проблемами трудности с выполнением композиции автоматов неоднозначность интерпретации формулы языка 14 в исходном автомате. При решении первой проблемы, как правило, возникала вторая. Для ее решения применялась модификация языка . Методы моделирования, рассматриваемые в настоящей работе в частности, редуцированная схема, проводят изменение семантики языка для того, чтобы воспрепятствовать экспоненциальному росту числа состояний. При этом пути, построенные в качестве сценариев для -формул, однозначно преобразуются из модели в автомат Мили. Это удобно, особенно если моделирование производится совместно с исполнением автомата, его визуализацией и отладкой 15,16. Кроме того, при использовании автоматного программирования число управляющих состояний относительно невелико. Это позволяет не применять в данной работе специальные техники для сжатия автоматов с большим числом состояний упорядоченные двоичные разрешающие диаграммы, а использовать достаточно простые и наглядные алгоритмы, которые работают быстро при небольшом числе состояний, один из которых будет дополнен алгоритмом генерации сценариев. Перечислим основные положения данной работы. 1. В автоматных программах 4,5 поведение специфицируется с помощью конечных автоматов. В настоящей работе применяются спецификации, состоящие изодного автомата Мили. В общем случае модель может состоять из нескольких взаимодействующих автоматов. Для верификации таких систем применяется композиция исходных автоматов или моделей Крипке. 2. Использование подхода для таких программ связано с преобразованием автомата Мили в структуру Крипке модель Крипке, так как она, в отличие от автомата, приспособлена для верификации. 3. Использование структуры Крипке предполагает применение темпоральной логики длязаписи требований, которые должны быть проверены. В настоящей работе при написании программ верификации требования описываются на языке . 4. Собственно верификация модели см. рис.1 выполняется по структуре Крипке, построенной по автомату Мили, и требованиям, записанным в виде формулы на языке темпоральной логики . Верификация осуществляется с использованием двух алгоритмов. Первый предназначен для определения набора состояний в структуре Крипке, в которых выполняется заданное формулой требование, а второй по заданному исходному состоянию и подформуле заданного требования с помощью построенного набора состояний формирует сценарий, который подтверждает или опровергает эту подформулу. 5. Сценарий для структуры Крипке преобразуется в сценарий для автомата Мили. 6. Все этапы изложенной технологии верификации рассматриваемого класса автоматных программ рис. 2 иллюстрируются на примере программы для Универсального инфракрасного пульта для бытовой техники 17. Построим несколько различных схем для генерации множества атомарных предложений автоматной программы, преобразования автомата Мили в модель Крипке и записи требований к программе. Выделим и опишем три основные схемы такого преобразования 1 установка состояний на событиях и выходных воздействиях переменных 2 создание полного графа переходов 3 редукция полного графа переходов с внесением тесных отрицаний термин поясняется ниже внутрь атомарной формулы. Учтем для любой схемы, что если конечная формула ее спецификации представима ввиде конъюнкции нескольких подформул, то эту конъюнкцию целесообразно разбивать наоперанды и рассматривать их по отдельности, так как при этом удобнее и правильнее исследовать, адекватны ли формальные требования к модели соображениям разработчика оних. Автоматы, в которых состояния могут содержать внутри себя другие автоматы, можно исследовать тремя способами. 1. Для внешних и внутренних автоматов можно выполнять моделирование, спецификацию и верификацию независимо конечно, этот способ влечет утрату определенных характеристик автомата примоделировании. 2. Можно раскрыть состояние автомата, внутри которого состояния находится другой автомат, добавив для каждого перехода из состояния в состояние поодному эквивалентному переходу из каждого состояния автомата в состояние . Все переходы, которые ведут в состояние, следует перенаправить в стартовое состояние автомата . В результате, внутренний автомат превращается в часть автомата, идля него можно выполнять верификацию вместе с автоматом . 3. Систему взаимодействующих автоматов можно привести к одному автомату с помощью композиции произведения 10. Также можно выполнять сначала моделирование каждого автомата, а после него композицию моделей Крипке рис.3. Выбор способа определяется соображениями эффективности и удобства. Впримерах, описываемых далее, считается, что данный вопрос уже решен, и рассматриваются системы, описываемые одним автоматом без вложенных состояний. Во всех трех схемах, которые будут построены, состояния исходного автомата изоморфно перейдут в состояния модели. Для каждого перехода между состояниями и исходного автомата создадим не менее одного состояния в модели Крипке назовем его, атомарным предложением которого будет событие, инициировавшее переход. При наличии выходных воздействий на переходе также создадим по одному состоянию на каждое воздействие, атомарным предложением которого состояния будет такие состояния будем называть . Добавим в модель переходы между состоянием и состоянием-событием между состоянием-событием и первым состоянием-выходным воздействием далее последовательно в порядке выполнения между соседними состояниями для выходных воздействий и, наконец, между последним таким состоянием-выходнымвоздействием и состоянием далее будет приведен пример такой конвертации. Если выходное воздействие размещалось в состоянии и выполнялось при входе внего, то при конвертации добавляется еще одно состояние, соответствующее воздействию В это состояние должен вести каждый переход, который первоначально вел в состояние Кроме этого, добавляется переход из состояния, соответствующего, в состояние . Само же это воздействие после генерации состояний уничтожается. Для всех полученных состояний модели Крипке естественным образом устанавливаются атомарные предложения. Добавим также три управляющих атомарных предложения, для состояний модели, построенных соответственно из, исходного автомата. Это сделано для того, чтобы при записи формулы в темпоральной логике можно было различать тип исследуемого состояния. Таким образом, множество атомарных предложений во всех трех схемах содержит объединение множеств состояний, событий, выходных воздействий и трех описанных выше атомарных предложений. Далее будут рассмотрены индивидуальные особенности каждой из трех схем., как и две другие, наследует общую идеологию моделирования, описанную выше. Отдругих схем ее отличает то, что кроме указанного общего принципа в ней больше ничего не содержится. Таким образом, применяя схему ССВВ дляавтоматной программы, можно полностью абстрагироваться от понятия входных переменных, оставляя только состояния без них не обойдется ни одна базовая модель, события и выходные воздействия. Это самый простой подход. Рассмотрим . Пусть исходное автоматное приложение эмулирует вдовольно упрощенной форме универсальный инфракрасный пульт длябытовой техники 17. Эмулятор представлен с помощью одного автомата рис.4. Граф переходов этого автомата приведен на рис. 5. В рассматриваемом примере модель Крипке для автомата, построенная посхеме ССВВ, будет изоморфна графу на рис.5. В модели Крипке, изображенной на рис.6, состояния-события и состояния-выходные воздействия указаны явно. При интерактивном моделировании совместно с исполнением ивизуализацией 14,15 их целесообразно обозначать, как и в исходном автомате, в виде меток на дугах. Таким образом, модель построена. Приведем теперь -формулы, справедливость которой можно устанавливать верификацией 6 1. Смысл этой формулы состоит в следующем всостояние нельзя попасть, минуя состояние нельзя попасть врабочий режим, минуя сообщение на экране. Эта формула справедлива для состояний, исходного автомата и только дляних для модели Крипке таких состояний больше. Во второй схеме не будем абстрагироваться от входных переменных, апредставим автомат моделью Крипке со всей полнотой относительно входных воздействий. В исходном автомате переходы могут быть заданы не полностью могут существовать не указанные петли. Это означает, что для некоторого состояния некоторых состояний дизъюнкция формул, составленных из входных переменных, которые помечают переходы из него по одному и тому же событию, не является тавтологией. Снабдим это состояние состояния петлевыми переходами пособытию, соответствующими дополнению крассматриваемой дизъюнкции. Это, конечно же, не изменит семантику автомата, а лишь полностью опишет его поведение. В конечном счете в автомате из каждого состояния по каждому событию должно исходить 2 переходов, где общее число входных переменных автомата. При этом каждому переходу соответствует набор значений всех переменных. Послеполучения полного автомата преобразуем его в модель Крипке по общей схеме содной модификацией для каждого состояния-события добавим во множество его атомарных предложений набор входных переменных, истинных на том переходе, на котором находится рассматриваемое состояние-событие. Таким образом, во множество атомарных предложений по отношению к обобщенной схеме добавились еще и входные переменные. Достоинство такой схемы несмотря на ее расточительность, освобождение от которой будет описано ниже втом, что она и только она позволяет модели Крипке полностью отражать поведение исходного автомата. Основным недостатком предыдущей схемы было большое число генерируемых состояний для модели Крипке, а достоинством ее полнота. В редуцированной схеме семантика моделей будет изменена таким образом, чтобы число состояний в них можно было уменьшить, не потеряв при этом их выразительные возможности. Это можно сделать так, что размер модели изменится асимптотически по отношению к размеру графа переходов исходного автомата и к числу переменных, вотличие от предыдущей схемы, где размер модели увеличивался от числа входных переменных. Множество атомарных предложений по отношению к предыдущей схеме также будет видоизменено. Рассмотрим исходный автомат без дизъюнкций на переходах. Если такие переходы существуют, создадим эквивалентные переходы для каждого дизъюнкта, а сами переходы с дизъюнкциями удалим. В качестве можно разбить переход 4 1 1 11 графа см. рис.5 на два перехода 4 11 и 1 1 11. Добавим в автомат состояния, соответствующие событиям, входным и выходным переменным, так, как это было сделано в первой схеме ССВВ, но с одним отличием во множества атомарных предложений на состояниях-событиях добавим входные переменные втом виде, в котором они присутствуют на переходах вместе с отрицаниями, если они есть. Таким образом, в состав множества всех атомарных формул модели входят следующие элементы, и только они состояния события выходные воздействия все литералы, составленные извходных переменных сами переменные и их отрицания. Кроме того, ватомарные предложения каждого полученного состояния-события добавим все литералы, составленные из несущественных входных переменных дляданного перехода несущественными будем называть те переменные исходного автомата, которые не обозначены на рассматриваемом переходе. Таким образом, будем добавлять на одно и то же состояние-событие и несущественные переменные, и их отрицания. С точки зрения синтаксиса и семантики темпоральной логики, это допустимо процесс обработки модели Крипке непредполагает совместность множества атомарных предложений состояния, так как интерпретирует эти предложения просто как строки. Причина такого обращения снесущественными переменными ясна требуется обеспечить, чтобы любая ссылка на несущественную в данном состоянии-событии переменную, упомянутая в -формуле, давала истинный результат. Не обязательно хранить все литералы, составленные из несущественных переменных в состоянии в явном виде. Важно лишь то, что во время обработки модели существенные и несущественные входные переменные интерпретируются раздельно первые в том виде, вкаком они записаны на переходах исходного автомата, а вторые в двух экземплярах в прямом и инверсном виде. Результат конвертации графа переходов автомата ARemote, выполненного сприменением данной схемы, изображен на рис.7. Размер модели на рис.7 совпадает с размером модели, созданной по схеме ССВВ. Первая схема может рассматриваться по аналогии с третьей или второй, в которой полностью исключены входные воздействия. Аналогично, третью схему можно рассматривать как видоизменение второй, прикотором отождествляются наборы значений несущественных переменных. Теперь рассмотрим построение и интерпретацию -формул дляредуцированных моделей. -семантика в данной схеме будет немного отличаться отобщепринятой все отрицания, стоящие непосредственно перед атомарными предложениями в -формуле их также называют, следует внести внутрь атомарных предложений. При этом только результирующая формула в рассматриваемой схеме подлежит верификации методами, предназначенными для -логики. Рассмотрим для автомата . Пусть требуется проверить свойство существует способ провести инициализацию устройства, не нажимая кнопку . Втерминах языка с исходной семантикой данное свойство может быть записано следующим образом 0 00. Эта формула не выполняется в состоянии 0 см. рис.7. На это, правда, и нестоило рассчитывать. Преобразуем формулу согласно третьей схеме 0 00. Вместо отрицания в языке в формулу было внесено другое атомарное предложение, являющееся отрицанием исходного. Преобразованная формула уже верна для состояния 0. Подведем итог. Для уменьшения числа состояний и из соображений практичности была предложена схема моделирования автомата и изменена семантика языка . Однако такое изменение семантики неудобно дляверификации. В результате был предложен способ преобразования исходной формулы, соответствующей новой семантике, в новую формулу, для которой применима общепринятая семантика языка . Выполненные примеры показывают, что такой подход не существенно снижает выразительность модели по сравнению с предыдущим схема Полный автомат. Опыт показывает, что для многих формул такая схема может быть использована. Основным недостатком всех описанных выше схем моделирования автоматов является то, что при составлении требований к модели разработчику невсегда удобно различать, где состояния, которые перенесены из исходного графа, гдесостояния-события, а где состояния-выходныевоздействия. Дляразличения состояний используются атомарные предложения, и, но их применение может быть связано с дополнительными проверками. Для этого, а также для уменьшения числа состояний модели в принципе, можно при построении модели абстрагироваться от каких-либо других ее характеристик, помимо тех, которые были рассмотрены вописанных выше схемах. Например, можно абстрагироваться не только от входных переменных, ноиотсобытий, а также от выходных воздействий. Можно вообще преобразовать автомат в модель Крипке в один этап, например, спомощью исключения событий и выходных переменных напереходах. Для автомата результатом такого преобразования является модель нарис.8. Выбор альтернативного метода можно осуществлять, руководствуясь представлениями о производительности и результативности. Основное внимание необходимо уделять атомарности переходов. Если они слишком большие по числу действий, то разработчик может пропустить ошибку, если же слишком маленькие то размер модели может немотивированно увеличиться за счет появления несущественных свойств. Опишем идею алгоритма, 18, который основан на переформулировке синтаксиса языка . Этот алгоритм дополнен таким образом, чтопозволяет строить подтверждающие сценарии для проверяемых формул. Применять этот алгоритм будем для изображенных явно моделей Крипке. Под локальной задачей верификации обычно понимается вопрос выяснить для данной модели и состояния в ней, выполняется ли в этом состоянии заданная формула. При построении алгоритма формулируется глобальная задача верификации для данной модели и проверяемой формулы построить множество всех состояний модели, в которых верна эта формула. Когда число состояний невелико, как в случае автоматных программ, это множество можно строить в явном виде. Запишем одну из форм определения синтаксиса и семантики языка в ней темпоральная часть будет целиком выражена через операции, где множество атомарных предложений. -моделью для множества состояний называется тройка, здесь тотальное отношение на множестве отношение переходов между состояниями, а отношение, определяющее атомарные предложения, соответствующие каждому состоянию. Множество выполняющих состояний алгоритм строит для каждой подформулы входной формулы для каждого состояния создается список выполненных в нем подформул. Идея алгоритма отражена в псевдокоде рис.9. Как следует из рассмотрения текста этой программы, множество состояний, выполняющих формулу, строится индукцией по построению . Будем считать для удобства, чтоизисходного графа Крипке построен симметричный ему граф, вкотором все переходы заменены на противоположные. В алгоритме нетривиальными являются последние два шага, которые могут быть реализованы с помощью построения деревьев обратных путей и определением компонент сильной связной связности у графа модели. Теперь осталось только дополнить этот алгоритм методами истинности формул в моделях. Иными словами, требуется построить способ генерации сценариев. Итак, требуется показать, что в данном состоянии модели выполняется или не выполняется формула . 1. Если атомарное предложение, то предъявим описание состояния вмодели множество его атомарных предложений. В нем, в частности, содержится информация о выполняемости формулы в данном состоянии . 2. Доказательство сводится к опровержению формулы и наоборот. 3. Для доказательства формулы докажем одну из формул или, а для опровержения опровергаем обе формулы и . 4. Для доказательства предъявим вершину в модели Крипке, в которую извершины имеется переход и которая выполняет . Такая вершина обязательно существует, иначе на этапе верификации не обнаружилось бы, что формула верна. Опровержение доказательство подтверждается весьма просто, так как переход, который ведет из вершины, будет вести только в вершину, выполняющую . Таким образом, любой переход изэтой вершины можно предъявить пользователю в качестве опровержения. 5. Доказательство формул и выполняется рекуррентным способом с использованием пп. 14. Выполним рекуррентное разложение для этих формул Тогда для доказательства формулы достаточно построить путь в графе, применяя шаг за шагом пп. 14 к рекуррентному разложению этой формулы до тех пор, пока не попадем в вершину, выполняющую . Для доказательства формулы сделаем то же самое, пока не попадем ввершину, вкоторой уже были. Путь в этом случае, начиная с некоторого состояния, становится периодическим рис.10. Опровержение формул и выполняется аналогично опровержению формулы . Любой бесконечный путь, который начинается втекущей вершине, можно предъявить пользователю для рассмотрения, таккак путь не выполняет введенную формулу. Иначе говоря, вместо доказательства более выразительных -формул и следует доказывать формулы и . Проще всего предъявлять пути, замыкающиеся, начиная с некоторого состояния, в цикл, так как такие пути однозначно задаются конечным числом вершин. На этом изложение алгоритма завершено. Анализ построенного алгоритма формирования сценариев, а также семантики языка позволяет сформулировать следующее утверждение. Если в модели Крипке существует бесконечный путь, выполняющий заданную -формулу или являющийся контрпримером к ней, тосуществует и путь в -форме аналогично, выполняющий или опровергающий ее, представимый в виде объединения предциклической и циклической частей см. рис.10. Доказательство этого утверждения является конструктивным и целиком опирается наприменение описанного алгоритма. Достаточно только заметить, что алгоритм всегда завершается, выдавая сценарий, который должен обладать свойством периодичности. Переходим к последней фазе процесса верификации в автоматном программировании см. рис.2. Ниже будет описано, как представлять путь последовательность вершин модели Крипке в виде пути исходного автоматаМили. При этом будем предполагать, чтомодель Крипке была сгенерирована по редуцированной схеме. Остальные схемы, для которых было дано описание, позволяют применять к себе аналогичный интуитивно ясный способ перехода от модели кавтомату. При использовании нестандартных методов моделирования интерпретировать результаты разработчику приходится самому ему придется проводить анализ путей прямо на модели Крипке, которую он сам вручную и построил. После того, как отработала программа-верификатор, необходимо определить выполнимость формул спецификации на определенных участках автомата. Среди этих участков могут быть состояния, события, выходные воздействия. Сценарий длялюбой подформулы спецификации представляет собой бесконечный путь вмодели Крипке, иллюстрирующий справедливость или ошибочность данной подформулы. Требуется, чтобы сценарий, предъявленный программой, был представлен в исходном автомате. Изображать этот путь следует конечным вспомним утверждение из предыдущего раздела. Что касается переноса пути из модели Крипке в автомат, то данная операция скажем, для редуцированной схемы выполняется однозначно. Действительно, состояния модели, содержащие атомарное предложение, однозначно преобразуются в соответствующие им состояния автомата. Путь же между любыми двумя соседними состояниями проходит ровно через одно состояние-событие, из атомарных предложений которого можно узнать, какое событие ведет по данному пути из исходного состояния, а также значения существенных и список несущественных входных переменных в момент, когда произошло это событие. Эта информация однозначно определяет направление, вдоль которого строится путь в исходном автомате Мили. Если же путь или его участок начинается не в состоянии, то обратная трассировка пути позволяет узнать состояние, предшествующее текущему, и всю необходимую информацию относительно того, как попасть в текущее состояние. Рассмотрим для автомата . Пусть для состояния выполняется верификация формулы 6 1 в состояние нельзя попасть, минуя состояние . Эта формула в состоянии не выполняется. Верификатор сгенерировал кратчайший и единственный в данном случае контрпример, который на рис.11, выделен серым цветом. Это конечный путь, любое продолжение которого удовлетворяет формуле 6 1. Этот же путь, но представленный в исходном автомате, приведен нарис. 11, . В случае, когда при моделировании выполнялась композиция автоматовмоделей Крипке, независимая нумерация их состояний позволит для каждого перехода в пути, представленном в окончательной модели, однозначно решить вопрос, в какой именно индивидуальной компоненте системы взаимодействующих автоматов произошел переход. Это, опять же, дает возможность отобразить путь на модели в путь на исходном автомате. В работе были предложены методы для моделирования автомата Мили структурами Крипке. Был разработан алгоритм для построения сценариев и их интерпретации в исходном автомате. В связи с созданием этогоалгоритма было сформулировано утверждение, позволяющее привести все сценарии к общему виду. Составление сценариев в том числе, контрпримеров с помощью верифицирующих инструментов позволяет проводить исследования в области автоматической или интерактивной коррекции модели или автомата с целью удовлетворить предъявляемым условиям. Например, если программа-верификатор предъявила путь, опровергающий некоторое желательное свойство для системы, она может предложить разработчику исказитьликвидировать этот путь, например, за счет удаления какого-либо перехода. При этом, разумеется, не гарантируется, что вмодели тогда не возникнет других противоречий со спецификацией, хотя неисключается возможность и более интеллектуальной коррекции. Исходя из изложенного можно кратко сформулировать основные достоинства автоматных программ в части их верификации 19. 1. Класс автоматных программ является наиболее удобным для верификации методом, так как в этом случае модель программы может быть автоматически построена по спецификации ее поведения, задаваемой вобщем случае системой взаимодействующих конечных автоматов, втовремя как для программ других классов модель приходится строить вручную. 2. Структура автоматных программ, в которых функции входных и выходных воздействий почти полностью отделены от логики программ, делает практичным верификацию этих функций на основе формальных доказательств с использованием преди постусловий 20,21. 