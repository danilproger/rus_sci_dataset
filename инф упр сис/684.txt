ОПТИМАЛЬНОЕ УПРАВЛЕНИЕ  ДВУМЯ ПАРАЛЛЕЛЬНЫМИ FIFO-ОЧЕРЕДЯМИ  НА БЕСКОНЕЧНОМ ВРЕМЕНИ 

FIFO-очередь является очень распространенной структурой данных: ее применяют во многих аппаратных и программных приложениях. При разработке различных сетевых устройств и встроенных операционных систем требуется работа с несколькими FIFO-очередями, расположенными в общем пространстве памяти. Также существуют архитектуры многоядерных процессоров, где каждому ядру выделено две FIFO-очереди. Целью исследования является построение и анализ математической модели процесса работы с двумя последовательными циклическими FIFOочередями в общей памяти, когда на нечетном шаге происходят операции включения элементов в одну из очередей, а на четном шаге — исключения (возможно как последовательное, так и параллельное выполнение операций). Результаты: сформулирована задача оптимального разбиения общей памяти FIFO-очередей как задача целочисленного программирования, где функция критерия оптимальности задается алгоритмически. Построены математическая и имитационная модели этого процесса для двух очередей и проведены численные эксперименты, основывающиеся на теоретических данных. Математическая модель представлена в виде случайного блуждания по двухмерной целочисленной решетке, имеющей отражающие экраны, т. е. мы имеем дело с регулярной однородной марковской цепью. Критерием оптимальности является минимальная средняя доля потерянных при переполнении элементов очередей. Особенностью данного исследования является специфическое выполнение операций над очередями: включение и исключение элементов происходит в зависимости от шага (сделаны поправки для сохранения качеств однородности и регулярности цепи) и выполнение операции возможно параллельно. Практическая значимость: с помощью разработанной модели можно найти оптимальное разделение ограниченной общей памяти для повышения стабильности работы системы. Предложенные модели, алгоритмы и разработанный программный комплекс могут применяться при проектировании сетевых устройств, например маршрутизаторов, где потери пакетов являются допустимой, но нежелательной ситуацией. Разделяя общую память для очередей оптимально, мы теряем меньше пакетов, и, как следствие, данные доставляются быстрее.

Во многих приложениях, например при разработке различных сетевых устройств и встроенных операционных систем, требуется работа с несколькими FIFO-очередями, расположенными в общем пространстве памяти. Механизм страничной виртуальной памяти здесь не используется, и вся работа происходит в нескольких пулах оперативной памяти. Количество очередей в таких устройствах может достигать нескольких сотен и тысяч, а в будущем, по экспертным оценкам, может достигнуть нескольких миллионов. Для представления FIFO-очередей применяют различные программные или аппаратные решения 13. Отметим также, что среди архитектур многоядерных процессоров есть и такие, где отсутствует кэш-память. Например, в архитектуре AsAP-II каждое ядро имеет два FIFO-буфера, а в архитектуре SEAforth два стека для хранения данных и адресов возвратов 4. В этих архитектурах очереди и стеки реализованы циклически и раздельно с возможностью потери элементов при переполнении. Мы же исследуем ситуации, когда для хранения нескольких структур данных используется общая память, что в ряде случаев позволяет снизить потери элементов при переполнении. Д. Кнут поставил задачу 1 построения и анализа математической модели работы с двумя стеками, растущими навстречу друг другу. Для описания этого процесса были построены модели в виде случайного блуждания в треугольнике 510. В работах 1114 предлагались модели для последовательного, связанного и страничного способов представления нескольких FIFO-очередей в памяти одного уровня. В этих моделях предполагается, что на каждом шаге дискретного времени с заданными вероятностями происходят некоторые операции со структурами данных. Время выполнения операций это не случайная величина, а константа, поэтому фиксированным является и шаг времени. В работе 2 приведены результаты имитационных экспериментов и поставлена задача построить математическую модель процесса работы с несколькими FIFO-очередями в общей памяти, когда операции с очередями выполняются по несколько другому принципу. В данной схеме работы на нечетном шаге допускаются операции включения элементов в одну из очередей с равными вероятностями, а на четном шаге операции исключения элементов из очередей с равными вероятностями. Исключение из пустой очереди не приводит к завершению работы. Также ставилась задача 2 определить вероятность как функцию от и того, что очередь, выбранная для операции на -м шаге, будет пустой, и вычислить математическое ожидание количества элементов в очередях после операций. В данной задаче не рассматривался конкретный способ представления очередей в памяти, т. е. предполагалось, что очереди могут быть неограниченной длины, что на практике невыполнимо. Эта задача была решена в работе 14. В данной работе мы предлагаем математическую модель и решаем задачу оптимального разбиения общей памяти ограниченного объема для двух FIFO-очередей в случае последовательного циклического представления очередей. Операции с очередями выполняются по принципу, предложенному выше, и выполнение операций с заданными вероятностями может происходить как последовательно, так и параллельно. В качестве критерия оптимальности рассматривается минимальная доля потерянных элементов при бесконечном времени работы очередей. Эту величину разумно минимизировать, когда переполнение очереди является не аварийной, а стандартной ситуацией здесь мы подчеркиваем, что в некоторых приложениях при переполнении очереди работа программы заканчивается, и тогда в качестве критерия оптимальности надо рассматривать максимальное среднее время до переполнения памяти. Если очередь занимает всю предоставленную ей память, то все последующие элементы, поступающие в нее, отбрасываются до тех пор, пока не появится свободная память т. е. пока не произойдет исключение элемента из очереди. Такая схема применяется, например, в работе сетевых маршрутизаторов 3 в том случае, когда по мере увеличения трафика очередь на исходящем интерфейсе маршрутизатора заполняется пакетами. Такое поведение маршрутизатора называется сбросом хвоста. Потери пакетов приводят к нежелательному результату, поэтому число таких ситуаций необходимо свести к минимуму. Пусть в памяти размером в единиц мы работаем с двумя последовательными циклическими FIFO-очередями с элементами фиксированного размера в одну условную единицу. Для последовательного представления каждой очереди выделим некоторое количество единиц памяти из общего объема, равного единиц. Пусть количество единиц памяти, выделенных первой очереди, тогда количество единиц памяти, выделенных второй очереди. Операции, производимые с очередями, выполняются по следующей схеме на нечетном шаге происходит операция включения элемента в одну из очередей, на четном шаге операция исключения элемента из какой-либо очереди, причем известны некоторые вероятностные характеристики операций, производимых с очередями. Пусть и вероятности включения элемента в первую и вторую очереди, соответственно вероятность одновременного включения в обе очереди и вероятности исключения элемента из первой и второй очередей, соответственно вероятность одновременного исключения из обеих очередей. Поскольку построенная на основе такой постановки задачи марковская цепь 15 не будет регулярной и однородной, два последовательных шага объединяем в один, а также вводим в рассмотрение вероятности выполнения операций, не изменяющих длины очередей. Например, чтение вероятность выполнения операции на нечетном шаге и на четном, при этом 0, 0. Соответственно 1, 1. Тогда состояния на каждом шаге определяются наступлением одной из следующих комбинаций событий 1 включение в первую, исключение из второй очереди с вероятностью 2 включение во вторую, исключение из первой очереди с вероятностью 3 включение в первую очередь с вероятностью 4 включение во вторую очередь с вероятностью 5 включение параллельно в обе очереди с вероятностью 6 исключение из первой очереди с вероятностью 7 исключение из второй очереди с вероятностью 8 исключение параллельно из обеих очередей с вероятностью 9 выполнение над очередями сохраняющих их состояние противоположных операций с вероятностью, при этом сумма вероятностей всех событий равна 1. Целью исследования является определение оптимального распределения памяти между очередями, когда в качестве критерия оптимальности рассматривается минимальная средняя доля потерянных при переполнении элементов очередей. По закону больших чисел для регулярных цепей Маркова 15 это эквивалентно нахождению решения, доставляющего минимум значению вероятности переполнения памяти на бесконечном промежутке времени. Обозначим через и текущие длины первой и второй очередей соответственно. В качестве математической модели рассматриваем случайное блуждание в двумерном пространстве по целочисленной решетке в области 0 2, 0 2 рис. 1. Прямые 1, 1 образуют первый отражающий экран попадая на эти прямые, мы будем находиться на них до тех пор, пока не произойдет исключение элемента из очереди. Прямые 2, 2 образуют второй отражающий экран, который определен для случаев включения элемента в заполненную очередь и немедленного исключения элемента из этой же очереди. Введением данного экрана учитывается произошедшая потеря элемента, очередь формально переходит на экран, а фактически в область 0, 0, конкретно на прямые 1 или 1. Определим схему переходов между состояниями. Пусть, текущее состояние процесса, тогда блуждание в области 0 1, 0 1 включает в себя и первый отражающий экран можно описать следующим образом Переходы со второго отражающего экрана рис. 2 1 при 2 переходы из состояния, соответствуют переходам из состояния, где, 3 2 при 2 переходы из состояния, соответствуют переходам из состояния, где 3, 3 при 2 и 2 переходы из состояния, соответствуют переходам из состояния, где 3, 3. Необходимо минимизировать число потерянных элементов при переполнении очередей. Иначе говоря, нужно найти такое, чтобы математическое ожидание доли времени, которое процесс проводит на отражающих экранах, было минимальным. Таким образом, в случае двух очередей задача оптимального разбиения общей памяти для FIFO-очередей может быть рассмотрена как одномерный случай задачи целочисленного программирования, где функция критерия оптимальности задается алгоритмически. Можно еще дать и такую интерпретацию решаемой задачи. Так как для каждого значения мы имеем свою цепь Маркова, то можно сказать, что мы решаем задачу нахождения оптимальной цепи Маркова в смысле указанного критерия оптимальности. Для решения данной задачи используются результаты теории регулярных цепей Маркова. Представим случайное блуждание в виде регулярной марковской цепи. Пусть матрица переходов, 3 3 количество состояний. Определим нумерацию состояний, как показано на рис. 3. Сначала мы нумеруем состояния в области 0 2, 0 2. Затем состояния, в которых очереди переполняются, это первый и второй отражающие экраны. Пронумерованная таким образом матрица имеет определенную структуру где 1 подматрица описывает блуждание в области, 2 подматрицы и описывают переходы из области, на первый и второй отражающие экраны 3 подматрицы, и описывают поведение процесса, когда очереди переполнены 4 подматрица описывает переходы со второго отражающего экрана. Матрица размера 1 1 имеет следующий вид где, являются подматрицами размера 1 нулевая матрица Мы докажем лемму с помощью математической индукции. 1. База индукции. Пусть общий объем памяти равен 2 1 количество памяти, выделенное первой очереди. Тогда размер матрицы будет 4 4. Подматрицы, имеют размер 2 2 подматрица здесь не представлена ввиду маленького значения памяти . Матрица имеет следующую форму 2. Индуктивное предположение. Предположим, что для размера памяти лемма верна. Размерность будет 1 1, размерность подматриц 1. 3. Индуктивный переход. Проверим, что при размере памяти 1 лемма верна. Так как добавилась еще одна единица памяти, то увеличилась одна из очередей. Рассмотрим два случая а. Единица памяти попала в первую очередь, размеры памяти и увеличились на единицу 1, 1. Тогда область случайных блужданий увеличится по оси 0 будет добавлено 1 новых состояний. Размерность матрицы увеличится на 1, размерность всех подматриц увеличится на единицу, и их количество останется прежним. Пусть размерность подматриц будет 2. Проследим за изменением структуры на примере подматрицы . К ней будут добавлены одна колонка и один столбец, и ее вид будет следующим Общий вид подматрицы не изменится. Аналогично это можно показать и для остальных подматриц. б. Единица памяти была добавлена во вторую очередь. Размеры и станут 1, . Некоторые результаты вычислений приведены в таблице указанные результаты были подтверждены имитационными экспериментами. Так как аналитическое решение не было получено, нам нужно решать задачу для отдельных . 10 используется для примера. Взятые здесь вероятности являются теоретическими для большей наглядности результатов. На практике же эти вероятности должны быть получены в результате предварительных статистических исследований. Анализируя результаты, можно сказать, что с увеличением вероятности включения в одну очередь в данном случае в первую и уменьшением вероятности включения в другую при разбиении памяти пополам потери при переполнении увеличиваются. При оптимальном разбиении мы выделяем одной очереди единиц памяти, а второй единиц памяти. Так, при вероятностях включения 0,35 в одну очередь и 0,15 в другую разница потерь между оптимальным разбиением и разбиением пополам составляет 0,006. То есть из тысячи пакетов мы теряем на 6 пакетов меньше, разбивая память оптимально. А при вероятностях включения 0,45 и 0,05 соответственно уже на 11 пакетов меньше. Остается открытым вопрос о том, какой из методов работы с очередями описанный здесь принцип четныхнечетных шагов или такой, где операции совершаются на любом шаге будет оптимальным для тех или иных аппаратных или программных решений. В любом случае математические модели таких процессов должны функционировать в дискретном времени. Таким образом, использование классического аппарата теории массового обслуживания например, основанного на пуассоновском потоке заявок с непрерывным временем в качестве математических моделей таких систем не представляется оправданным. Работа выполнена при финансовой поддержке РФФИ, грант 15-01-03404-а. 