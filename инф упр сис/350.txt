МЕТОДЫ РАСШИРЕНИЯ ЯЗЫКОВ ПРОГРАММИРОВАНИЯ  (ЧАСТЬ 2) 

1 Приводится обзор методов расширения современных языков программирования, определенных автором и использованных для построения классификации расширений по способам интеграции и исполнения кода расширений. Рассматривается метод расширения языков программирования новыми конструкциями, методы исполнения расширений, а также приводится пример предметно-ориентированного расширения языка общего назначения средствами таблично-ориентированного программирования, реализованного автором на основе средств программирования системы эфемеридных расчетов в астрономии.

Все три рассмотренных метода 1 внесения расширенных возможностей в БЯ не изменяют имеющихся языковых конструкций, а лишь отличаются способом интеграции основной программы с внешней реализацией расширений. Рассматриваемый здесь четвертый способ представляет собой наиболее тесную интеграцию выразительных средств БЯ с конструкциями расширений. А именно, имеется в виду буквальное совмещение программного кода на двух языках в одной программе, что удобнее пользователю программисту по ряду причин. Во-первых, появляется возможность выражать специализированную функциональность с помощью наиболее подходящих языковых конструкций и, во-вторых, облегчается поиск ошибок в процессе разработки приложений, поскольку синтаксический и семантический контроль конструкций расширений наряду с контролем конструкций БЯ может быть выполнен компилятором на этапе трансляции. Обычно при таком совмещении текст на специализированном языке выделяется в программном коде на БЯ с помощью окружающих маркирующих конструкций, легко выделяемых лексически, иногда даже на этапе текста программы этапе предварительного анализа текста программы до синтаксического разбора. В других случаях появление специализированных конструкций однозначно определяется из контекста и такого выделения не требуется тогда в одной программе буквально появляется смесь языковых конструкций с внешне ничем не выделенными границами. Типичным примером совмещения разных языков с использованием маркирующих конструкций для явного выделения кода расширения можно считать ассемблерные вставки в код CC. Рассмотрим пример такого кода программу на C для компилятора GNU GNU C comcompiler GCC с использованием кода встроенной функции на ассемблере пример 7 2. Эта программа вычисляет наибольший общий делитель двух заданных чисел с помощью алгоритма Евклида, реализованного в виде встроенной функции на ассемблере в целях оптимизации производительности исполняемого кода. В примере 7 представлена основная C-функция, вызывающая вспомогательную C-функцию, в теле которой присутствует сегмент встроенного ассемблерного кода строки 616, реализующий тело алгоритма Евклида на уровне инструкций микропроцессора. Маркером начала и конца сегмента данного языкового расширения является синтаксическая конструкция, внутри которой располагаются строки кода на языке ассемблер для микропроцессора семейства -ntel x86. Заметим, что спецификатор здесь не является маркером, а только указывает компилятору, что данный код не подлежит автоматической оптимизации. Существует множество стилей написания подобных ассемблерных вставок. В данном примере применена конструкция в стиле A--, соответствующая стандарту 3 и поддерживающаяся компилятором GCC. Компиляторами CC компании Microsoft для таких расширений используется другая нотация в стиле -ntel. Можно привести другой пример, в настоящее время еще экзотический, поскольку речь идет об инновационной разработке компании -ntel об архитектуре -ntel, поддерживающей интеграцию с различными акселераторами. Это архитектура -A с технологией расширения Exoskeleton SeExoskeleton Sequencer EXO и специально разработанные сред и специально разработанные средства программирования с поддержкой языковых расширений C for Heterogeneous -ntegration CH- 4. Интегрированная среда программирования CHпредоставляет разработчикам приложений возможность встраивать специализированный ассемблерный код для акселераторов или код на предметно-ориентированном языке в исходный код на традиционном языке CC 4, р. 185. В примере 8 4 представлен фрагмент кода для CH-, содержащий встроенный код на пред метно-ориентированном языке DPL Datastream Programming Language, специально раз, специально разработанном для программирования реконфигурируемого акселератора SCC-DPE 4, р. 190. В примере 8 фрагмент кода на языке DPL строки 1229 выделен в программе на языке C с помощью синтаксической конструкции, по структуре аналогичной конструкции встраивания ассемблерного кода в стиле Microsoft-ntel . Хотя способ оформления языковых расширений сходен, разница примеров 7 и 8 состоит в том, что в последнем случае в основную программу встраивается фрагмент кода на другом языке высокого уровня, а не команды ассемблера. Среди разнообразия современных средств программирования можно найти еще немало примеров совмещения различных языков программирования в одной программе с явным синтаксическим разделением кода на разных языках. Например, совмещение кода на языке разметки гипертекста H-ML и описания функций на языке сценариев, таких как JavaScript, V-Script. Теперь рассмотрим введение в язык расширений без маркировки на примере проекта L-Nкомпании Microsoft. Технология L-N.NELanNELanguage--ntegrated -uery это средство расшире это средство расширения языков на платформе .NEдля интеграции с языком описания запросов 5, 6. Эти расширения поддерживаются в языках C 3.0 и V9.0 компании Microsoft, а также, возможно, появятся и в других языках на платформе .NE-. В докладе одного из авторов технологии L-N7 рассказано, что L-N это абстракция, реализованная несколькими видами AP-, позволяющая в программе на платформе .NEединым образом оперировать с разного рода данными, выполняя традиционные для БД операции такие как запрос, изменение и преобразование данных и т. п.. Такими данными могут быть любые .NEобъекты в памяти программы, коллекции объектов, массивы данных, реляционные БД и документы XML рисунок 7. Рассмотрим пример 9 8, созданный на основе образца кода L-N-. В примере 9 представлен код процедуры на языке C, включающий конструкцию на языке описания запросов строки 57, начиная с ключевого слова, близком по синтаксису к S-L. Здесь среди конструкций C употребляется конструкция совсем другого рода описание запроса к БД, и заметим, без каких бы то ни было окружающих ее маркирующих символов. В этом случае конструкция расширения БЯ автоматически определяется компилятором исходя из анализа структуры выражения и по контексту без синтаксических подсказок с помощью маркеров. Примечательно, что в L-Nвозможна также альтернативная запись запроса через интерфейс AP7 согласно первому методу интеграции расширений 1. Поэтому строки 57 примера 9 декларация переменной, содержащей описание запроса могут быть переписаны так, как показано в примере 10, и их исполнение приведет к получению такого же результата т. е. обе формы записи эквивалентны по смыслу. Методы и реализованы с помощью механизма C введения так называемых возможности добавлять новые методы к уже описанным типам объектов. А логические выражения в скобках в вызовах методов представляют собой встроенные функции, называемые . В реализации L-Nформа описания запроса примера 9 преобразуется компилятором в конструкцию вида, описанного в примере 10, т. е. с использованием средств БЯ и применением интерфейса APметодов и, с помощью которого реализовано данное расширение. Подводя итог, следует отметить, что для реализации описанного в этом разделе метода расширения БЯ новыми языковыми конструкциями в обоих рассмотренных вариантах необходима разработка специальных средств программирования, поддерживающих новый синтаксис и семантику расширенного языка. А это может быть достаточно трудоемкой задачей. Однако у данного метода есть неоспоримые преимущества по сравнению с представленными в первой части статьи это максимальное удобство при программировании и возможность наиболее эффективного исполнения таких расширений. Помимо нескольких способов интеграции кода расширений в БЯ, можно также выделить несколько способов реализации описанных расширениями действий во время исполнения основной программы. По мнению автора, классификация расширений современных языков программирования в соответствии с основными методами исполнения их кода представляет собой список следующих категорий, перечисленных в порядке возрастания сложности реализации. 1. Программный код расширений обычно библиотеки функций, иногда семейство классов реализован на БЯ. 2. Расширения в виде внешних библиотек функций реализованы на другом языке программирования и, в некоторых случаях, встроены в систему исполнения. 3. Программная интерпретация расширенных возможностей во время исполнения основной программы с помощью специальной программы интерпретатора. 4. Аппаратная интерпретация расширенных возможностей, например с помощью сопроцессора. Первый метод исполнения расширений для первой категории расширений является наиболее простым с точки зрения его реализации. Он может применяться в сочетании с первым или вторым методами интеграции расширений 1. Второй метод обычно применяется в сочетании также с первым методом интеграции расширений. Третий метод подходит для реализации расширений третьего 1 и четвертого методов интеграции расширений. Четвертый метод применяется в сочетании с первым или четвертым методами интеграции расширений. Четвертый метод исполнения кода расширений является наиболее сложным с точки зрения его реализации, поскольку требует наличия и интеграции дополнительных специализированных аппаратных возможностей у основной вычислительной машины. Но благодаря такому способу достигается наибольшая производительность при исполнении кода расширений хотя этот эффект может несколько ослабляться накладными расходами на передачу данных сопроцессора. Например, аппаратная интерпретация расширений применяется в системе программирования EXO-CH для архитектуры -A с технологией интеграции с различными акселераторами о которой говорилось при описании четвертого метода интеграции расширений. В частности, в качестве средства программирования микропроцессора архитектуры -A, интегрированного с акселератором DPE, разработана интеграция языка C со специализированным языком DPL 9. Язык DPL является предметно-ориентированным, он предназначен для описания параллельных вычислений на акселераторе процессов обработки сигналов DPE 10. Рассмотрим предметно-ориентированное расширение языка общего назначения средствами решения задач с данными в табличной форме, настраиваемое на предметную область . Оно имеет рабочую настройку на предметную область эфемеридной астрономии и применяется для автоматизации вычислений в этой области 15. Возникновение задачи разработки этого расширения связано со следующими историческими предпосылками, обусловливающими актуальность этой задачи. Специализированная система ЭРА, включающая средства программирования на предметно-ориентированном языке СЛОН слежение и обработка наблюдений, более 20 лет успешно применяется в Институте прикладной астрономии ИПА РАН для автоматизации вычислительных задач эфемеридной астрономии. Ее создание и развитие продолжалось с середины 80-х гг. и нашло широкое применение в практической работе института. Ключевой идеей, положенной в основу системы ЭРА, является предложение Г. А. Красинского об использовании таблиц и алгебры таблиц как основных элементов программирования для решения задач эфемеридной астрономии в форме так называемых табличных операторов 12. Используемая в системе ЭРА методика применения табличного подхода к обработке данных получила в дальнейшем название таблично-ориентированного программирования. Другой примечательной особенностью системы ЭРА является возможность настроить ее на выбранную предметную область 13. И, наконец, высокое качество вычислительных моделей, положенных в основу функционального предметного наполнения, его полнота и регулярное обновление позволили системе ЭРА стать безусловным лидером в сфере программного обеспечения эфемеридной астрономии. В процессе многолетнего опыта эксплуатации системы ЭРА назрела потребность в расширении средств, предоставляемых специализированным языком СЛОН 12, 14, средствами, доступными в традиционном языке программирования а именно, Object Pascal 16, что, согласно исследованиObject Pascal 16, что, согласно исследовани 16, что, согласно исследованиям 17, р. 15, вполне типично для предметноориентированных языков вообще. Эта потребность явилась побудительным мотивом к разработке нового языка Дельта на основе двух языков СЛОН и Object Pascal, с объединением их функциональных возможностей путем расширения языка Object Pascal табличными операторами языка СЛОН. Выбор языка Object Pascal в каObject Pascal в ка Pascal в каPascal в ка в качестве прототипа требующихся средств программирования общего назначения обусловлен несколькими причинами, в частности, тем, что ObObject Pascal тоже применяется для разработки вспомогательного функционального наполнения системы ЭРА, а отдельные конструкции языков Object Pascal и СЛОН схожи 18. Рассмотрим выбор методов, примененных в реализации данного расширения. Простейший способ интеграции кода расширений на основе языка СЛОН с помощью библиотеки специализированных функций APв данном случае является неприемлемым он неэффективен с точки зрения удобства программирования и продуктивности разработки с помощью таких расширений. Данный тезис проиллюстрирован в примере 2 1 БД. Чтобы добиться желаемой эффективности целевого инструмента программирования при разработке языка Дельта, требуется более высокий уровень абстракции, чем уровень AP-, а именно такой, как в исходном предметно-ориентированном языке СЛОН. Поэтому при проектировании языка Дельта выбран метод интеграции расширений в основной язык программирования Object PasObject Pascal в виде новых языковых конструкций табличных операторов языка СЛОН в исходном виде, т. е. метод 4. При этом новые конструкции явно обозначаются в тексте на языке Object Pascal с помощью маркирующих конструкций, что позволяет выделять эти расширения на этапе предварительной трансляции препроцессирования. Теперь рассмотрим выбор метода исполнения данного расширения. В системе ЭРА 1214 для исполнения программ на языке СЛОН, состоящих из табличных операторов, применяется программная интерпретация с помощью специальной программы, названной СЛОН-процессором. Эта программа выполняет трансляцию табличных операторов в промежуточное представление, а затем его интерпретирует. В отличие от способа, принятого для языка СЛОН, в целях исполнения программного кода на языке Дельта было решено сначала транслировать табличные операторы в промежуточный код на языке Object Pascal, а затем компилировать и компоновать всю программу с помощью имеющихся инструментов в системе -orland Delphi. В результате такого двойного преобразования получается исполняемый код. Таким образом, в системе Дельта применяется двухпроходная трансляция. Этот подход позволяет разделить способы исполнения отдельных частей табличного оператора табличного выражения и использованных в нем блоков действий, а также предметно-ориентированных функций. Благодаря этому в реализации языка Дельта удалось ограничиться интерпретацией лишь части табличных операторов табличных выражений конструкций, не имеющих прямых аналогов в языке реализации Object Pascal на этапе предварительной трансляции они преобразуются в строковые параметры функции интерпретации согласно методу 3 1 интеграции расширений. Остальная часть табличных операторов программы на языке Дельта блоки действий, включая вызовы предметно-ориентированных функций и процедур, наряду с основным текстом программы на Object Pascal, компилируется в исполняемый код с помощью двухпроходной трансляции. На первой фазе трансляции выполняется преобразование в промежуточный код на Object Pascal с вызоPascal с вызо с вызовами функций APинтерпретатора согласно методу 1 1 интеграции расширений, а на второй преобразование в целевой исполняемый код. Таким образом, в результате анализа разнообразных методов расширения языков программирования сделан обоснованный выбор следующих методов, подходящих для реализации языка Дельта 15. Для интеграции расширений в БЯ используются новые языковые конструкции метод 4 интеграции расширений на уровне разработки исходного кода приложений Дельта и вызовы функций APреализации расширений со специальными строковыми параметрами методы 1 и 3 1 на уровне представления промежуточного кода на Object Pascal. Для исполнения кода расширений используется сочетание программной интерпретации с предварительной трансляцией в код на БЯ программирования методы 1 и 3 исполнения расширений. Среди методов интеграции расширений метод расширения языков программирования новыми конструкциями является наилучшим с точки зрения качеств получаемых средств программирования, но в то же время и наиболее сложным в реализации по сравнению с применением других методов. С другой стороны, в различных случаях оптимальным может оказаться выбор любого из первых трех рассмотренных наиболее простых и часто встречающихся методов интеграции расширений. Из-за относительной простоты реализации данные методы обладают некоторыми общими недостатками, связанными с необходимостью подстраивать расширенные возможности под существующую систему программирования на БЯ, что в результате приводит к значительным ограничениям в плане удобства программирования и автоматического контроля со стороны инструментальных средств программирования. Вместе с тем их неоспоримыми преимуществами являются возможность использовать имеющийся инструментарий и минимальность дополнительной разработки для поддержки соответствующих расширений. Благодаря этому данные методы являются востребованными, а в определенных ситуациях их применение может оказаться наиболее удачным решением. Выбор метода исполнения кода расширений в общем случае во многом определяется условиями конкретного проекта составом имеющихся инструментальных средств программирования на БЯ требованиями к производительности исполнения кода на расширенном языке возможностями целевой аппаратной платформы по исполнению специализированных функций наличием временных и человеческих ресурсов, необходимых для доработки базовых инструментальных средств программирования. В приведенном обзоре систематизированы сведения о разновидностях расширений в современных языках программирования, о методах интеграции и исполнения кода расширений. Этот материал дает представление о существующих расширенных возможностях в известных языках программирования, позволяющее сориентироваться в их многообразии и выбрать самое подходящее средство для решения конкретных специализированных задач наиболее удобным и эффективным способом с использованием расширений языка программирования. Эти сведения будут также полезны при выборе оптимальных методов для реализации собственных расширений в случае возникновения такой потребности. 