ЯЗЫК МОДЕЛИРОВАНИЯ БИЗНЕС-ПРОЦЕССОВ BPDL 

Рассматривается новый язык описания бизнес-процессов BPDL, обладающий, в отличие от известных BPEL и XLANG, рядом важных свойств: простотой, гибкостью и расширяемостью.

Автоматизация бизнеса далеко не новая для сферы информационных технологий тема. Говоря об автоматизации бизнеса, мы говорим об автоматизации бизнес-процессов организации. Бизнеспроцесс это последовательность операций, в ходе выполнения которых получается значимый для организации результат продукты, услуги. В последнее десятилетие были предприняты попытки найти общие языки для описания бизнес-процессов. Модель бизнес-процесса, описанная на таком языке, может быть затем реализована в соответствующей среде выполнения, как программа. В этой статье рассматриваются бизнес-процессы, выполняющие интеграционную роль. Такие бизнес-процессы могут быть охарактеризованы следующим образом. Бизнес-процесс это длящийся во времени вычислительный процесс, обладающий набором данных, которые могут создаваться, использоваться и уничтожаться в различные моменты времени, ориентированный на взаимодействие с внешними системами путем обмена XML-сообщениями. Наиболее известными и распространенными языками моделирования бизнес-процессов такого рода на текущий момент являются языки BPEL4WS и XLANG. XLANG это язык моделирования бизнес-процессов, разработанный Microsoft специально для интеграционной платформы Biztalk 1, 2. Язык BPEL4WS Business Process Execution Language For Web Services это язык, разработанный совместно IBM и Microsoft и имеющий открытый XML-синтаксис 3. BPEL4WS и XLANG схожи по структуре и выразительной мощности. Для примера вкратце рассмотрим BPEL. Язык BPEL опирается на использование вебсервисов одного из наиболее популярных подходов к решению интеграционных задач. Понятие веб-сервиса было разработано в целях стандартизации внешних интерфейсов взаимодействующих систем. Веб-сервисом может быть любая система, ориентированная на обмен сообщениями с внешними партнерами, снабженная опубликованным описанием на языке WSDL Web Service Description Language 4. В BPEL любой бизнес-процесс описывается программой, состоящей из activities атомарных инструкций языка. Деятельности делятся на простые primitive и составные structural. Простые деятельности служат для выполнения атомарных задач, таких как отправка произвольного сообщения во внешнюю систему деятельность send ожидание сообщения из внешней системы деятельность receive операции над переменными бизнес-процесса деятельность assign и т. д. Структурные деятельности позволяют объединять простые деятельности в алгоритмические конструкции последовательность sequence группирует деятельности для выполнения друг за другом поток flow служит для выполнения деятельностей параллельно ветвление switch позволяет выполнять те или иные деятельности в зависимости от условия цикл while служит для многократного выполнения последовательности деятельностей. Кроме этого, BPEL имеет специальные конструкции для генерации исключений throw и их обработки блоки faultHandlers, catch и сatchAll. Также BPEL предусматривает очень важную для длительных транзакций long-running transactions LRT возможность компенсации блоки compensationHandlers и деятельность compensation. Длительные транзакции, в которых участвуют несколько сторон, невозможно проводить по принципам ACID Atomicity, Consistence, Isolation, Durability, применяемым, в частности, в системах управления базами данных. Поэтому в длительных транзакциях обычно используется принцип компенсации, в соответствии с которым для каждой операции определяется обратная ей. К сожалению, BREL и XLANG имеют принципиальные ограничения и недостатки. Основными из них являются следующие отсутствие важных базовых функциональных конструкций в BPEL, например, нельзя вызвать одну программу из другой в качестве подпрограммы сложность языков количество сущностей в каждом составляет более трех десятков отсутствие механизмов расширения. В течение последних лет были предприняты значительные усилия, направленные на то, чтобы сделать языки моделирования бизнес-процессов более доступными для неспециалистов в области программирования, в основном для бизнес-аналитиков. В этих целях OMG был принят стандарт BPMN Business Process Modeling Notation графической нотации для бизнес-процессов 5. BPMN специфицирует набор графических элементов, описывает их семантику и определяет отображение своих диаграмм в BPEL. Семантическая модель BPMN более абстрактна, чем модель BPEL, она позволяет бизнес-аналитику описывать процесс, не задумываясь о деталях реализации. После трансляции в BPEL модель бизнес-процесса должна быть передана программисту, который необходимым образом уточнит ее и подготовит для выполнения. Наличие перечисленных недостатков способствовало появлению идеи разработки нового простого расширяемого языка моделирования бизнеспроцессов. Предлагаемый язык BPDL Business Process Description Language, в отличие от перечисленных языков, обладает следующими преимуществами он расширяем количество инструкций не ограничено он ориентирован на предметную область в язык включены инструкции, которые ориентированы на решение конкретных задач выполнение платежа, получение баланса и т. д.. Как и BPEL, BPDL имеет XML-синтаксис. В BPDL любой бизнес-процесс обладает набором локальных данных контекстом и набором идентификаторов внешних систем, c которыми происходит обмен сообщениями. Бизнес-процесс описывается программой. Атомарной инструкцией является шаг step аналог деятельности в BPEL. Шаги группируются в задачи tasks последовательности шагов с возможными ветвлениями. Набор связанных между собой задач, предназначенных для решения конкретной бизнес-задачи, составляет программу. Для любого шага может быть определен набор ветвей branches с условиями conditions, наложенными на переменные контекста. Ветвь содержит последовательность шагов, которые выполняются, если выполняется условие. Шаги делятся на две основные категории управляющие шаги, осуществляющие навигацию между задачами и управление выполнением бизнес-процесса прикладные шаги, осуществляющие операции с сообщениями, локальными данными и т. д. Переменной будем называть пару, где множество значений данной переменной ее текущее значение. Каналом будем называть пару, где это очередь, доступ к элементам которой организован по принципу FIFO, а множество сообщений элементов, которые могут помещаться в очередь . Для канала определены следующие операции операция отправки сообщения в канал сообщение помещается в конец очереди. Операцию отправки значения переменной в канал будем также обозначать операция приема сообщения из канала первый элемент извлекается из очереди и помещается в переменную . Операционная семантика BPDL определяется с помощью виртуальной машины BPM, выполняющей программы BPDL. Вычислительный процесс на BPM определяется набором, где программа стек программных вызовов контекст, т. е. совокупность данных программы, представляющая собой набор переменных произвольных типов набор доступных каналов передачи сообщений. Программа это выражение на языке BPDL. Множество синтаксически правильных программ на BPDL будем обозначать . Абстрактный синтаксис BPDL задается следующей грамматикой Программа Program состоит из ссылки TaskRef на корневую задачу и списка задач Task. Задача содержит последовательность Sequence. Каждая последовательность состоит из шагов Step с набором ветвей Branch. Ветвь, в свою очередь, состоит из набора условий Condition ее выполнения и последовательности. Шаги делятся на управляющие ControlFlowStep и прикладные ContextManageStep. Управляющие шаги позволяют вызывать подзадачу шаг сall, перейти к ее выполнению с потерей точки вызова шаг jump и без его потери шаг goto, осуществлять возврат из вызываемой подзадачи шаг return, закончить выполнение бизнес-процесса шаг finish. Condition это описание функции 0, 1. Прикладной шаг это функция функция, выполняющая вычисление над переменными контекста с участием, возможно, обмена сообщениями по каналам из набора каналов . BPDL включает следующие основные прикладные шаги Service посылает указанное сообщение в указанный канал и ожидает ответного сообщения JavaScript выполняет указанный код на JavaScript над переменными бизнес-процесса XSLT выполняет XSLT-преобразование над переменной. Прочие шаги имеют ориентацию на предметную область Payment выполняет платеж, Balance выполняет запрос баланса по карте и т. д. Метамодель языка представлена на рис. 1. Текущая выполняемая инструкция в программе идентифицируется парой task, step, где step это выполняемый в данный момент шаг из задачи task. Стек содержит пары task, step. BPM, получив на вход программу, выполняет ее, действуя по следующему алгоритму. В алгоритме используются следующие функции GetFirstStept возвращает первый шаг в задаче GetNextStept, s возвращает шаг, следующий за в задаче GetTargetTasks возвращает задачу, на которую ссылается шаг подразумевается, что шаг имеет тип jump, goto или call IsTrueConditionq, C вычисляет истинность условия над контекстом ExecuteSteps, C выполняет прикладной шаг. В качестве примера, иллюстрирующего применение BPDL, рассмотрим безналичный платеж в пользу поставщика услуг таким поставщиком может быть мобильный оператор, оператор спутникового телевидения и т. д.. Платеж выполняется с терминала самообслуживания или банкомата. Терминал не обязательно принадлежит банку-эмитенту выпустившему карту, а может принадлежать другому банку члену платежной системы. Платеж выполняется в режиме реального времени, т. е. поставщик услуг сразу же узнает о выполнении платежа. Обозначим роли, участвующие в операции обслуживающий банк acquirer выполняет платеж в своей системе банк-эмитент issuer содержит счет клиента поставщик услуг provider принимает платеж. Взаимодействие сторон при выполнении платежа представлено на рис. 2. Сначала проверяется возможность выполнения платежа со стороны поставщика услуг. В систему поставщика отправляется сообщение с запросом проверить возможность выполнения платежа например, номер телефона, сумма платежа и его валюта шаг 1. Если ответ положителен, выполняется авторизация на стороне банка-эмитента шаг 2. Эмитент проверяет, что в его системе заведена карта с таким номером и что на счету достаточно средств для выполнения платежа. Если проверки выполнены успешно, сумма платежа на клиентском счету блокируется и ответ следует положительный. Последним этапом выполняется уведомление поставщика о том, что в его пользу был совершен платеж в системе банка, принимающего платеж, на счет поставщика была переведена указанная сумма. Рассмотрим детально действия, которые выполняются в системе принимающего банка рис. 3. В первую очередь, платеж регистрируется в системе Start operation. Совершаются необходимые проверки, создается платежный документ. В случае если поставщик отвергает платеж шаг Request provider if payment is possible, операция завершается End operation failure. Платежный документ при этом получает статус ошибки. То же самое происходит, если авторизация на стороне эмитента Authorize amount заканчивается неуспешно. В случае если ошибка происходит при уведомлении поставщика Notify payment is completed, необходимы дополнительные действия по компенсации в системе эмитента заблокированная сумма должна вернуться в распоряжение клиента Rollback authorization. Если все шаги выполняются успешно, платежный документ получает положительный статус и операция завершается End operation success. Рассмотрим варианты реализации задачи на языке BPDL. Для этого создадим отдельную задачу task. Будем считать, что следующие входные переменные существуют в контексте бизнес-процесса devicecontract Contract selectedcontract Contract docmsg DocumentMsg. Contract и DocumentMsg являются типами соответствующих XML-документов, содержащих информацию о контракте счете, карте, терминале другими словами, участнике транзакции и о финансовом документе в общем виде. Переменная devicecontract содержит информацию о контракте терминала, selectedcontract о счете, с которого выполняется платеж, docmsg представляет собой документ с указанными реквизитами. Будем использовать следующие шаги . Шаг регистрирует финансовый документ в системе. Параметры docmsg финансовый документ с реквизитами devicecontract контракт терминала payercontract контракт счета-источника errorbranch ссылка на дочернюю ветвь-обработчик ошибки. . Обновляет документ и присваивает ему статус положительный или отрицательный. Параметры docmsg финансовый документ с реквизитами devicecontract контракт терминала payercontract контракт счета-источника errorbranch ссылка на дочернюю ветвь-обработчик ошибки. . Посылает сообщение во внешнюю систему и ожидает ответного сообщения. Параметры channel идентификатор канала внешней системы template шаблон сообщения, параметризуемый переменными динамический XML errorbranch ссылка на дочернюю ветвь-обработчик ошибки timeoutbranch ссылка на дочернюю ветвь-обработчик. В следующем BPDL-псевдокоде используются обозначения PROVIDER идентификатор канала системы поставщика ISSUER идентификатор канала системы банка-эмитента PROVIDERCHECK шаблон XML-запроса проверки возможности платежа AUTH шаблон авторизационного XML-запроса PROVIDERNOTIFY шаблон уведомления о выполненном платеже REVERSE шаблон запроса на откат операции. Вторым способом решения задачи является использование шага Платеж Payment выполняет платеж по Алгоритму 2. Параметры docmsg финансовый документ с реквизитами devicecontract контракт терминала payercontract контракт счета-источника. Для чего необходимо реализовывать Алгоритм 2 в виде отдельного шага Для этого есть следующие причины. Ориентация на прикладную область. Алгоритм 2 является упрощенным в реальности логика выполнения операций более сложна и содержит больше деталей. Реализация такого алгоритма на BPDL потребовала бы большого количества кода на JavaScript и низкоуровневых шагов например, шага Вызов произвольной хранимой процедуры, чего хотелось бы избежать. Удобный графический интерфейс. Удобство использования шагов во многом зависит от пользовательского интерфейса. Добавляя шаг в программу, пользователь указывает его входные и выходные параметры, причем зачастую они имеют структуру более сложную, нежели линейная, как последовательность аргументов функции. Проблема создания пользовательского интерфейса шага лежит на программистах. Задача в этом смысле не может заменить шаг, поскольку написанная пользователем, она будет вызвана через общий для всех задач интерфейс шага call. Производительность. Будучи реализованным как отдельный шаг на Java, алгоритм будет выполняться быстрее, чем реализованный задачей на BPDL. Рассмотренный пример проиллюстрировал применение BPDL для программирования распределенных финансовых транзакций в среде, ориентированной на обмен сообщениями. Другим примером использования языка может служить программирование приложения информационного банковского киоска или банкомата. В этом случае используются прикладные шаги, отвечающие за посылку на терминал специализированной команды ожидать ввода карты, показать экран, принять купюры, распечатать чек и обработку результатов ее выполнения. Вместе с набором шагов для программирования финансовых транзакций эти шаги предоставляют удобную базу для реализации разнообразных приложений для каналов банковского самообслуживания. Ориентация языка на решение конкретной задачи в таком случае делает процесс программирования простым и доступным не только программистам, но и сотрудникам внедрения, и служащим IT-подразделений банка. Мы рассмотрели новый язык описания бизнеспроцессов BPDL. Предлагаемый язык, в отличие от известных BPEL и XLANG, обладает рядом преимуществ он прост, гибок и расширяем. Расширяемость позволяет пополнять язык инструкциями, ориентированными на конкретную предметную область, тем самым увеличивая круг его потенциальных пользователей. Свойства языка проиллюстрированы взятым из практики примером. 