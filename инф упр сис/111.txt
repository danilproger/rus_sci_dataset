ОСОБЕННОСТИ ПРОЕКТИРОВАНИЯ ВЫСОКОПРОИЗВОДИТЕЛЬНЫХ ПРОГРАММНЫХ КОМПЛЕКСОВ ДЛЯ МОДЕЛИРОВАНИЯ СЛОЖНЫХ СИСТЕМ 

Рассматриваются особенности проектирования высокопроизводительных программных комплексов для моделирования сложных систем на примере задачи моделирования экстремальных явлений в атмосфере и океане. Обсуждается подход к формализации структуры комплекса, сочетающий в себе специфику концепций SOA и REST, в соответствии с задачей отображения компонентов сложной системы на параллельную вычислительную архитектуру. Предложен способ оценки архитектуры на основе анализа параметрических моделей параллельной производительности.

Высокоуровневое проектирование или разработка архитектуры ПО программного обеспечения ставит своей целью формализацию и обоснование внутренней структуры ПО, которая наилучшим образом удовлетворяет проектным требованиям при заданном наборе ограничений в области работоспособности, безопасности, безотказности, защищенности1. Эволюция способов формализации структуры ПО определяется, в первую очередь, потребностью снижения сложности процессов разработки, тестирования и поддержки программных продуктов на фоне увеличения общей сложности решаемых задач. Это последовательно порождает структурный2, объектно-ориентированный3 и компонентно-ориентированный4 подходы в инженерии ПО. Дальнейшая тенденция функциональной изоляции компонентов отражается в архитектурах на базе SOA Service Oriented Architecture5, REST Representational State Transfer6, AOA Aspect Oriented Architecture7 и др. Эти подходы достаточно успешно используются при разработке коммерческих приложений и часто могут определять весь технологический процесс создания ПО8. При разработке наукоемкого ПО scientific computing software engineering необходимо учитывать, что приоритеты проектных требований, их структура, процесс проектирования, создания, проверки, внедрения, поддержки и использования обладают рядом индивидуальных особенностей9. Во многих случаях важным критерием работоспособности ПО является производительность productivity, характеризующая получение результата вычислений с приемлемой точностью за заданное время. Она обеспечивается за счет применения технологий высокопроизводительных вычислений в многопроцессорных и или распределенных средах. Использование традиционных компонентноориентированных подходов к проектированию распределенных программных систем на основе DCOM 10, CORBA11, Enterprise JavaBeans12 и пр. допустимо не во всех случаях, поскольку они не ориентированы непосредственно на достижение наибольшей производительности. Несмотря на то что для наукоемкого ПО предлагаются специфические проблемно-ориентированные подходы, в частности CCA Common Component Architecture13, в общем случае архитектура таких систем определяется особенностями решаемой задачи, спецификой предметной области и характеристиками параллельной вычислительной системы. В данной статье обсуждаются особенности проектирования наукоемкого ПО для моделирования сложных систем на примере высокопроизводительного программного комплекса моделирования экстремальных явлений в атмосфере и океане, разрабатываемого в рамках проекта ФЦП Исследования и разработки по приоритетным направлениям развития научно-технологического комплекса России на 20072012 годы. Моделирование сложных систем complex system simulation является одним из приоритетных направлений развития наукоемкого ПО, порождающим новый этап развития электронной науки e-Science14. Под сложной системой15 понимается система, которая а состоит из очень большого количества элементов б допускает дальние связи между элементами в обладает многомасштабной пространственно-временной изменчивостью. Как следствие, поведение системы описывается целым комплексом взаимодействующих моделей в общем случае основанных на различном математическом аппарате и соответствующих различным областям знания и требует существенных вычислительных затрат. Характерным примером сложной системы является система океан-атмосфера, рассматриваемая в диапазонах мелкомасштабной, синоптической, сезонной, межгодовой изменчивости временные масштабы от секунд до десятилетий и пространственные от метров до тысяч километров. Она характеризуется гидрометеорологическими полями атмосферного давления, скорости ветра, температуры воздуха, морского волнения, температуры и солености, течений и уровня моря. Необходимость исследования такой системы связана с задачей проектирования судов и сооружений на шельфе, что требует оценок экстремальных гидрометеорологических явлений как сочетаний характеристик, возможных один раз в лет. Величина определяется инженерными требованиями к конкретному объекту или сооружению и составляет от 10 до 10000 лет. Экстремальные характеристики обычно не обеспечены данными наблюдений и, как следствие, должны определяться на основе компьютерного моделирования16. Процедура моделирования соответствует функциональной схеме, представленной на рис.1. На первом этапе осуществляется подготовка метеорологических данных А атмосферного давления и ветра за климатический интервал от 30 лет для выполнения непрерывных расчетов полей волнения, течений и уровня моря по гидродинамическим моделям Б с учетом верификации результатов расчетов В и их калибровки по данным измерений Г. После этого выполняется параметризация Д и последующая статистическая обработка однородных выборок больших объемов данных E. Целью обработки является идентификация семейства стохастических моделей Ж, по которым методом Монте-Карло с использованием зависимых испытаний воспроизводится ансамбль многомасштабной изменчивости гидрометеорологических полей. На основании этих данных выполняется оценивание экстремальных ненаблюдаемых явлений И, например сочетаний скоростей ветра, высот волн и скоростей течений в шторме, возможном один раз в 100 и более лет, по которым рассчитывается степень риска для инженерных объектов К. Подробнее применяемые методы и технологии описаны в работах16,17. Ресурсоемкость расчетов существенно зависит от расчетной акватории и характеристик задачи например, периода повторяемости в общем случае она составляет порядка нескольких петафлоп. Например, для Каспийского моря выполнение таких расчетов на одном процессоре AMD Opteron 275 занимает 446суток18. Поэтому каждый из функциональных компонентов АК должен предусматривать параллельное выполнение. Поскольку экстенсивный подход на уровне автоматического распараллеливания программных кодов19 далеко не всегда эффективен, разработка высокопроизводительного ПО моделирования сложных систем требует формализации параллельной структуры компонентов на этапе проектирования. В то же время применение традиционного для параллельных вычислений подхода на основе PCAM-концепции20 затруднено тем, что механизм моделирования сложных систем включает в себя иерархическую систему моделей, связанных между собой, основанных на различном математическом аппарате и имеющих различную ресурсоемкость. С точки зрения проектирования структуры ПО, это отражается в том, что функциональные компоненты могут иметь ограничения по использованию функциональные, платформенные, лицензионные и пр. функциональные компоненты могут быть написаны на различных языках, могут использовать разнообразные системы ввода-вывода структура исходных кодов компонентов в случае их доступности и возможности внесения изменений может быть трудномодифицируемой вследствие индивидуальных особенностей разработки компоненты используют различные интерфейсы параллельного программирования и ориентированы в общем случае на разные вычислительные архитектуры. Например, на этапе Б для гидродинамического моделирования волнения применяется свободно-распространяемая модель SWAN21, которая реализована в стандарте языка Fortran 90 и распараллеливается с использованием интерфейсов OpenMP и MPI22. Эта модель признана мировым сообществом любая ее модификация содержательная или программная требует проведения дополнительной сертификации. С другой стороны, на этапе И для расчета экстремальных характеристик гидрометеорологических процессов применяется авторская модель BOLIVAR. Несмотря на то что эта модель рекомендована Всемирной метеорологической организацией23, коллектив разработчиков имеет права на модификацию ее кодов, в то время как модификация самого метода потребует дополнительных согласований. Специфика разработки архитектуры высокопроизводительного программного комплекса состоит в том, что он должен соответствовать архитектуре вычислительной системы. Ниже рассматривается решение, ориентированное на перспективный суперкомпьютерный вычислительный комплекс Росгидромета РФ, состоящий из двух кластеров кластера SGI Altix 4700 с пиковой производительностью 11 ТФлопс и кластера SGI ICE 8200 с пиковой производительностью 16 ТФлопс. Классический подход к разработке архитектуры программной системы предусматривает операции структурирования системы, описания свойств ее компонентов и установления связей между ними. Для ПО моделирования сложных систем структурные компоненты соответствуют различным функциональным компонентам, например АК на рис.1. Потому в данном случае принципиальной проблемой является организация взаимодействия как между компонентами, так и внутри них таким образом, чтобы обеспечивалось наиболее эффективное использование ресурсов вычислительной системы. В общем случае сложная система описывается иерархией моделей, соответствующих различным диапазонам изменчивости и функциональным подсистемам. При этом диапазоны изменчивости связаны между собой параметрически, т. е. выходные данные, полученные по одной модели, являются управляющими данными для модели более низкого уровня. Как следствие, соответствующее ПО может быть интерпретировано в рамках сервисноориентированной архитектуры SOA5. Это позволяет добиться максимального уровня изоляции частей программного комплекса, тем самым делая более строгой его структурированность и облегчая процесс разработки и тестирования. На рис.2 представлена общая структура взаимодействия сервисов, соответствующая функциональной схеме на рис.1. Для нее характерна следующая типизация сервисов24. Управляющие сервисы композиции, декомпозиции, управления задачей. Сервисы доступа к данным входная гидрометеорологическая информация, результаты расчетов. Вычислительные сервисы модели подготовки метеорологической информации, гидродинамические и стохастические модели, статистическая обработка и расчет экстремумов. В общем случае функциональные компоненты, указанные на рис.1, могут быть представлены в виде совокупности сервисов, исполняющихся на отдельных узлах вычислительной системы и обеспечивающих наиболее полное использование вычислительных ресурсов. Следует отметить, что часть сервисов присутствует в единственном экземпляре, обеспечивая централизованное управление комплексом моделей в целом, в то время как другая часть исполняется на каждом из узлов вычислительной системы. Вычислительные модули представляют собой сервисы доступа к используемым моделям. Взаимодействие моделей организуется управляющим модулем вычислительной системы, на который ложится ответственность за определение потоков данных между сервисами моделей. В то же время потоки данных в рамках сервисов также обладают довольно сложной структурой, обусловленной фиксированным интерфейсом модели. Таким образом, каждый из сервисов моделей обязан предоставить интерфейс для унифицированного обращения с моделью, организуя потоки данных таким образом, чтобы эффективно использовать вычислительные ресурсы системы. Использование SOA позволяет путем формализации интерфейса взаимодействия с сервисом упростить процедуру разработки управляющих модулей. При совмещении данного решения с применением паттерна проектирования Адаптер25 становится возможной легкая модификация и замена одних моделей другими с аналогичной функциональностью. Изоляция сервисов и четкое описание интерфейса позволяют упростить схему взаимодействия, не учитывая при этом особенностей внутренней реализации каждого из разрабатываемых компонентов. В рамках решаемой задачи для реализации сервисов была использована среда .NET Framework, реализующая технологию Windows Communication Foundation WCF, что в общем случае дает возможность строить кросс-платформенные сервисы различных видов. Моделирование сложных систем связано с оперированием большими объемами информации. Потому в рамках данной задачи применяется технология REST, ориентированная на обеспечение эффективного представления ресурсов6,26. Доступ к ресурсам осуществляется через фиксированный интерфейс, что обеспечивает унификацию ресурсов и упрощает взаимодействие с пользователем. Совместное использование технологий SOA и REST позволяет добиться организации унифицированного доступа к обрабатываемым данным. На рис.2 часть рассмотренных сервисов Г, Д отвечает за предоставление доступа к большим объемам данных, необходимых для работы программного комплекса. В процессе организации взаимодействия системы с разделяемой памятью возникает необходимость решения задачи эффективной коммуникации. При использовании среды исполнения .NET Framework возможна передача данных при помощи механизма сериализациидесериализации данных. Этот механизм позволяет осуществить преобразование объектов, доступных программному коду, к форме, удобной для передачи посредством механизма потоков. Это дает возможность оптимизировать процесс передачи данных по сети за счет сжатия, синхронизации и дополнительного контроля передачи данных путем как декларативного, так и императивного управления процессом сериализациидесериализации27. Несмотря на то что для коммерческого ПО традиционным способом хранения данных являются реляционные базы данных, для представления расчетной гидрометеорологической информации эффективнее использовать файловые форматы GRIB и NetCDF. Однако каждому из расчетных файлов сопоставляются метаданные характеристики сетки, условия расчета и пр., которые допустимо хранить в реляционной базе данных. В процессе разработки программного комплекса необходимо учитывать особенности аппаратной архитектуры и среды исполнения, что позволяет добиться эффективной работы программного комплекса в целом. Задача отображения архитектуры программного комплекса на параллельную вычислительную архитектуру определяет соотношение четырех уровней взаимодействия между компонентами системы. взаимодействие происходит в рамках системы, состоящей из ряда соединенных коммуникационной средой вычислительных узлов, на каждом из которых установлен один или более процессоров ядер, имеющих доступ к общей для них памяти. оперирует объектами операционной системы, процессами, потоками, нитями в пределах одного вычислительного узла и взаимодействиями на уровне сетевых коммуникаций при синхронизации различных узлов. предполагает применение библиотечных средств, предназначенных для коммуникации, синхронизации, балансировки и других задач организации параллельных вычислений. К средствам, традиционно относимым к реализации параллельных вычислений, можно причислить MPI для систем с разделенной памятью и OpenMP для систем с общей памятью. Средства, позволяющие осуществлять межпроцессное взаимодействие, обеспечивают возможность коммуникации между отдельными процессами в рамках локального узла. Возможны различные способы реализации IPC Inter-Process Communication как с использованием механизма потоков, каналов, очереди сообщений MSMQ Microsoft Message Queuing и пр., так и более высокоуровневые реализации вплоть до возможности работы .NET Remoting посредством IPC. Наконец, представляет собой сам вычислительный алгоритм, который выполняется с использованием средств нижних уровней, обеспечивая оптимальную загрузку вычислительных ресурсов системы. В рамках данного программного комплекса реализуется иерархическая схема распараллеливания. Она включает в себя компоненты трех категорий. Центральный управляющий модуль, предоставляющий внешним подсистемам сервис для осуществления вычислений и использующий сервисы узлов для непосредственного контроля процесса работы. Исполняющие модули, производящие вычисления на узлах и работающие с каждым из вычислительных компонентов. Адаптированные модели, реализующие параллельный вариант расчетных алгоритмов для систем с общей памятью. На рис.3 представлена схема отображения. Центральный управляющий модуль ввода-вывода выполняет предварительные операции с данными. Затем происходит распределение массива метеорологических характеристик давление, температура воздуха и льда объемом лет между вычислительными узлами. После этого выполняется процедура усвоения, а также по полям давления и температуры рассчитывается ветер, Б. Эта процедура на каждом узле распараллеливается по пространству. Производится репликация данных между смежными узлами, что необходимо для последующей сшивки результатов расчетов по гидродинамическим моделям ВГ. На каждом узле совместно на каждом шаге выполняется гидродинамическое моделирование волнения, течений и уровня моря, также распараллеленное по пространственной области в рамках общей памяти узла. Затем результаты расчетов передаются в модуль параметризации Д. Полученные в итоге поля параметров передаются в статистический модуль, выполняется агломерация результатов. Статистические модули Е на каждом узле также допускают многоуровневое распараллеливание по ансамблю, по индексирующей переменной, по таксонам, на основе принципа перемешивания28. Использование сервисно-ориентированного подхода позволяет гибко реализовывать различные схемы параллельных вычислений, допуская как одновременную обработку независимых задач, так и распараллеливание внутри каждой задачи, в зависимости от специфики вычислительной архитектуры. Это дает возможность организовывать иерархические схемы параллельных вычислений на системах гибридной или NUMA, Non-Uniform Memory Architecture архитектуры. Оценка программной архитектуры устанавливает степень соответствия предложенной архитектуры поставленным требованиям. Для многих классов бизнес-приложений оценка архитектуры строится на неформализованных подходах например, оценка сценариев. Однако с точки зрения проектирования высокопроизводительных программных систем предоставляется возможность количественной оценки основной проектной характеристики параллельной производительности системы времени работы, ускорения, эффективности и пр.. Для оценки архитектуры на этапе проектирования необходимым становится прототипирование и моделирование разрабатываемого ПО для прогнозирования особенностей его использования и формализации требований. Ниже представлены оценки, полученные на примере моделирования климатической системы Каспийского моря на мини-суперкомпьютере TForge-Mini. В рамках схемы на рис.3 можно приближенно описать время выполнения произвольного сервиса на вычислителях с общей памятью внутри одного узла в форме 1 где параметр, характеризующий рост накладных расходов с увеличением количества вычислителей, а доля параллельных вычислений. Например, применительно к акватории Каспийского моря процедуре подготовки метеорологической информации соответствует расчету волн расчету течений и уровня моря параметризации климатических спектров Общее время коммуникаций между узлами определим как сумму времени рассылки и сбора данных, а также времени на передачу перекрытий между независимыми блоками данных 2 где число полей метеорологических входных данных по времени число узлов расчетной сетки по пространству для метеорологических входных и океанографических выходных данных количество узлов коэффициенты, характеризующие кратность использования данных в моделях статистики количество реплицируемых полей между узлами. Число полей океанографических выходных данных по времени не влияет на объем собираемых с удаленных узлов данных, так как модели статистической обработки результатов применяются непосредственно к тем океанографическим полям, которые были рассчитаны на данном узле. Величина соответствует времени передачи единицы информации по коммуникационной сети. Предполагается, что время работы каждой задачи расчета ветра, волн, течений, параметризации спектров и расчета статистики определяется только производительностью вычислителя например, ядром CPU и объемом обрабатываемых данных. Например, для одного ядра AMD Opteron275 можно записать 3 В выражениях 3 численные коэффициенты перед объемами выполняемых операций имеют смысл времени расчета элементарной операции в пересчете на одну точку исходных или модельных данных, в секундах объем обрабатываемых данных делится пропорционально между узлами. Учитывая, что общее время вычислений является суммой времен, определяемых 2 и 3, этого достаточно, чтобы оценить параллельное ускорение как функцию от параметров. На рис.4 показано влияние архитектуры программной системы на общее ускорение вычислений. При небольшом количестве узлов оптимальным является распараллеливание по времени с использованием отдельных процессоров узлов с общей памятью как независимых вычислителей. Однако с увеличением числа процессоров тенденция изменяется и многопроцессорные узлы становятся более предпочтительными. С другой стороны, чем большее число лет обрабатывается, тем большее число процессоров необходимо для получения эффекта от применения многопроцессорных узлов. При этом очевидно, что чем большее число процессоров используется в узлах, тем дальше будет находиться точка заката кривой ускорения. Стоит отметить, что с увеличением размера входного массива число моделируемых лет, рис.4, в результате увеличения гранулярности общее ускорение также возрастает. Рис.4, иллюстрирует влияние перекрытия независимых блоков данных что является обязательным при распараллеливании по времени на производительность алгоритма. При уменьшении величины перекрытия с трех месяцев до одного ускорение в среднем вырастает примерно в полтора раза, а эффективность от использования многопроцессорных узлов сдвигается в зону большего числа узлов и меньшего числа процессоров на узле. Эта характеристика может меняться в зависимости от специфики акватории океанские процессы обладают большим временем жизни, чем процессы в закрытых морях, а также от особенностей моделируемого процесса синоптический интервал атмосферных процессов и волнения составляет несколько суток, а эволюция вихрей водных масс может длиться несколько месяцев. Результаты проведенного анализа могут рассматриваться как формализация знаний по управлению параллельными процессами в целях выбора оптимальной по производительности конфигурации для заданной задачи в рамках интеллектуального сервиса управления вычислительными модулями см. рис.2, А. Существующие стандарты по проектированию ПО IEEE 10161998 и IEEE 14712000 носят лишь рекомендательный характер в области определения понятий, а не их содержания. Потому в данной работе на примере высокопроизводительного комплекса моделирования экстремальных гидрометеорологических явлений рассматриваются основные аспекты проектирования наукоемкого ПО для моделирования сложных систем. К ним относятся использование сервисно-ориентированной архитектуры, отображающей взаимодействие управляющих и вычислительных компонентов, соответствующих моделям в различных диапазонах изменчивости оптимизация механизмов оперирования большими объемами данных за счет применения технологии REST и комбинированного способа хранения расчетной информации применение иерархической схемы отображения архитектуры программной системы на параллельную архитектуру вычислительной системы на аппаратном, системном, программном и логическом уровнях использование аппарата параметрических моделей производительности, настроенных на основе прототипов, для оценки степени соответствия архитектуры программного комплекса проектным требованиям и оптимизации производительности программного комплекса за счет динамического выбора схемы отображения. Предлагаемые решения не ограничены только данной предметной областью. В частности, авторы считают целесообразным использовать их для моделирования биологической сложной системы глобальной популяции вируса иммунодефицита человека29, 30. 