ПРОГРАММНЫЕ И АППАРАТНЫЕ СРЕДСТВА АВТОМАТНЫЙ МЕТОД ОПРЕДЕЛЕНИЯ   ПРОБЛЕМНО-ОРИЕНТИРОВАННЫХ ЯЗЫКОВ (ЧАСТЬ 3) 

Описывается новый метод определения синтаксиса и семантики проблемно­ориентированных языков с по­ мощью диаграмм классов и диаграмм автоматов. В третьей части статьи описывается задание операционной семантики системами взаимодействующих автоматов на примере мини­языка множеств.

Рассмотрев в предыдущих частях статьи определения метамодели и конкретного синтаксиса проблемно-ориентированного языка с помощью системы взаимодействующих автоматов, перейдем к самому проблематичному вопросу к семантике. Чтобы описать операционную семантику, необходимо, во-первых, определить модель вычислимости, т. е. виртуальную машину, и, во-вторых, задать либо преобразование абстрактной программы в программу виртуальной машины, либо интерпретацию абстрактной программы виртуальной машиной. При этом для одного и того же языка можно предложить различные с прагматической точки зрения семантики. То есть возможны совершенно разные способы использования одного и того же проблемно-ориентированного языка. Приведем несколько характерных примеров преобразование входа программы в ее выход системы пакетной обработки последовательность побочных эффектов в процессе выполнения программы командные, интерактивные системы управления сервис или служба, отвечающая на запросы пользователя, интеллектуальные экспертные системы. Например, для мини-языка множеств в первом случае результатом работы программы является набор значений построенных множеств. Наиболее очевидным способом реализации такой семантики является использование булевой матрицы в качестве результата работы программы В этой матрице означает, что множество с именем содержит элемент с буквой . Тогда алгоритм интерпретации абстрактной программы экземпляра метамодели, в частности алгоритм вычисления выражений над множествами, может быть запрограммирован известным образом 1. Описание этого алгоритма с помощью автоматов не дает особых преимуществ, и мы на нем не останавливаемся. Во втором случае интерес представляет протокол выполнения программы, т. е. последовательность побочных эффектов, связанных с появлением и удалением элементов в множествах. Такую семантику мини-языка множеств можно придумать с некоторой натяжкой, поэтому ее мы также не рассматриваем. В третьем случае программу можно рассматривать как систему уравнений, задающую предметную область, например . Поставив такой программе вопрос, пользователь получает в ответ значение множества . Если при этом требуется реализовать более сложную прагматику, например, не просто вычисление значения множества, а итератор, перебирающий элементы множества, то применение автоматного метода оказывается вполне оправданным и естественным. В автоматном методе семантика задается системой взаимодействующих автоматов, интерпретирующих экземпляр метамодели см. описание автоматной модели в разделе Автоматный метод и модель системы автоматов 2. В общем случае система автоматов взаимодействует, с одной стороны, с экземпляром метамодели абстрактной программой, черпая оттуда информацию для интерпретации, с другой стороны с некоторой, получая от нее запросы и команды и выдавая ответы рис. 24. Рассмотрим пример задания семантики миниязыка множеств в следующей постановке. Имеется экземпляр метамодели, заданной на рис. 12 2. Пользователь элемент внешней среды задает имя множества и получает в ответ последовательность событий элементов этого множества или ничего не получает, если такое множество не определено. Для реализации такой семантики определим следующие интерфейсы взаимодействия интерфейс позволяет задать имя множества, а интерфейс воплощает итератор рис. 25. В таком случае головной автомат, соответствующий классу, предоставляет интерфейс и требует интерфейс, через который события элементы итерируемого множества отдаются внешней среде, и интерфейс, через который обеспечивается взаимодействие с экземпляром класса в абстрактной программе. Через интерфейс внешняя среда может контролировать выполнение процесса рис. 26. В этом автомате состояние соответствует готовности автомата выполнить работу. Второе состояние является составным, в него вложен автомат интерпретации выражения. Заметим, что экземпляру автомата передается в качестве параметра объект класса, который этот автомат должен интерпретировать. Тем самым задается связь с метамоделью. Для получения данных результирующих элементов итерируемого множества из вложенного автомата используется локальная переменная автомата . В автомате, который выбирает способ интерпретации выражения в зависимости от его типа рис. 27, мы использовали нестандартный стереотип out для указания того, что локальная переменная является результатом работы автомата, который можно получить извне. Как этот, так и следующие автоматы рис. 28 30 за один проход от начального до конечного состояния в качестве которого здесь используются точки выхода выдают очередной элемент множества и сохраняют его в своей переменной . Непосредственно перебор всех элементов множества осуществляется в головном автомате петлей у состояния см. рис. 26. Автомат для самого простого случая выражения в мини-языке множеств задания множества своими элементами приведен на рис. 28. Автомат, интерпретирующий операцию пересечения множеств путем упорядоченных множеств, представлен на рис. 29. Алгоритм параллельно просматривает два множества, причем на каждом шаге продвижение происходит в том множестве, в котором текущий элемент меньше 3. Здесь мы опираемся на допущение, что элементы множеств упорядочены в алфавитном порядке и операндов два. Чтобы отследить, что обе переменные и в которых хранятся очередные элементы множеств левого и правого операндов соответственно были про инициализированы, используется флаг . Ини циализация локальной переменной при ее объявлении как это сделано для переменной означает, что переменная получает указанное значение сразу же после создания экземпляра автомата. Наконец, на рис. 30 представлен автомат, интерпретирующий операцию объединения множеств путем того же алгоритма слияния упорядоченных множеств. Сложность этого автомата сравн. рис. 29 определяется тем, что помимо его взаимодействия с автоматами, интерпретирующими левый и правый операнды и соответственно, ему необходимо также хранить информацию о том, как был получен очередной элемент множества. От этого зависит, какую из переменных или обе вместе нужно обновлять на следующем шаге. Для хранения этой информации используется переменная перечислимого типа. Кроме того, в отличие от пересечения множеств, когда исчерпание одного из операндов означает окончание вычисления, в операции объединения необходимо итерировать до конца оба операнда. В автомате на рис. 30 это делается с помощью значений перечислимого типа и . Значения переменной логически соответствуют состояниям автомата, реализующего объединение множеств. Фактически было бы желательно, чтобы использовалась система состояний Для этого необходимо реализовать взаимодействие автомата с автоматами операндов не с помощью вложенности, как во всех предыдущих примерах, а иным способом. Альтернативная модель взаимодействия между автоматами опирается на то, что каждый автомат может быть как источником событий, так и объектом управления для других автоматов см. модель на рис. 10 2. В начале выполнения экземпляры автоматов создаются, связываются друг с другом через свои интерфейсы и затем работают параллельно. Перейдем ко второму примеру описания той же самой семантики мини-языка множеств, в котором мы демонстрируем преимущества использования параллельно работающих автоматов . Операционную семантику мини-языка множеств будут определять четыре класса автоматов. Модель взаимодействия между этими автоматами показана на рис. 31. Здесь классы и введены только для удобства описания взаимодействия и не являются автоматами семантики. Автомат позволяет выбрать множество по имени и передает внешней среде результаты его итерирования элементы множества в виде команд итератора. Эти элементы множества автомат в свою очередь получает от итератора выражения, непосредственно определяющего множество. Автомат реализует итератор множества перебором его элементов, хранящихся в метамодели. Автоматы и реализуют итераторы соответствующих операций на основе алгоритмов слияния упорядоченных множеств, которые представлены итераторами операндов. На основе экземпляра метамодели по определенным правилам трансформации моделей создаются и связываются друг с другом экземпляры автоматов. А именно, по экземпляру класса аксиома языка создается единственный экземпляр автомата . Остальные автоматы конструируются по экземплярам специализированных подклассов суперкласса . В данном случае правило трансформации удобно выразить с помощью следующего алгоритма Таким образом, дерево взаимодействия автоматов, можно сказать, гомоморфно дереву абстрактной программы сохраняется структура композиции и элиминируются ненужные при интерпретации перекрестные ссылки. Например, для абстрактной программы, представленной на рис. 32, соответствующая схема взаимосвязей автоматов показана на рис. 33. На рис. 32 фактически приведен пример того, что называется при модения связей между интерпретируемыми объектами. Эти связи учитываются в алгоритме CreateAuto и отражаются в схеме взаимосвязей автоматов неявным образом. Головной автомат семантики мини-языка множеств см. рис. 34 отличается от автомата на рис. 26 тем, что состояние является простым, поэтому не используются точки выхода. Кроме того, у этого автомата есть интерфейс, через который автомат принимает команды от итератора непосредственно интерпретируемого выражения. лировании на UML 4. Эта диаграмма наглядно отображает систему объектов и связей между ними, находящуюся в памяти компьютера в процессе выполнения. На рис. 33 объектами являются экземпляры автоматов, классы которых описаны на рис. 34 37. Заметим, что экземпляры автоматов появились только для интерпретируемых экземпляров классов, и . Остальные классы, т. е. классы и, используются только для установлеРаботу автомата для задания множества перечислением элементов см. рис. 35, в отличие от аналогичного автомата на рис. 28, необязательно прекращать каждый раз после получения очередного элемента. Кроме того, у него нет переменной . Очередной элемент посылается в виде команды через интерфейс итератора, в эффекте на петле у состояния . По нашему мнению, автомат на рис. 35 намного естественнее и понятнее, чем на рис. 28. Автомат, представленный на рис. 36, интерпретирует операцию пересечения множеств. Здесь не нужно заводить никаких флагов сравн. рис. 29. Вся необходимая информация хранится в состояниях, как это и рекомендуется делать в автоматном программировании 5. Наконец, на рис. 37 приведен автомат, интерпретирующий операцию объединения множеств. При сравнении этого автомата с автоматом на рис. 30 бросается в глаза, что хотя здесь состояний больше, но автомат намного понятнее. Нет сегментированных переходов, флагов и лишних локальных переменных. Приведенный пример, на наш взгляд, убедительно показывает преимущества и гибкость выбранной автоматной модели. Подводя итог обсуждению семантики, представим обобщенную модель автоматного метода в форме неканонической диаграммы, показывающей взаимосвязи основных составляющих метода рис. 38. В статье предложен и подробно описан новый автоматный метод определения проблемно-ориентированных языков, базирующийся на описании структуры с помощью диаграмм классов и описании поведения с помощью расширенных диаграмм автомата UML. Отправной точкой создания и использования проблемно-ориентированного языка в автоматном методе является определение метамодели. На основе метамодели с помощью унифицированного метода описания поведения расширенными диаграммами автомата строятся множества синтаксических представлений и семантических интерпретаций. Это поведение реализуется виртуальной машиной автоматного программирования, что позволяет использовать описание языка как его реализацию. Основным преимуществом автоматного метода является гибкость событийная модель позволяет использовать произвольные представления программ, а не только тексты вариативная модель взаимодействия между автоматами позволяет выбрать адекватный стиль описания семантики языка. 