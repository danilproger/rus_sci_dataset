ГЕНЕТИЧЕСКИЙ АЛГОРИТМ ДЛЯ ЗАДАЧИ ВЕРШИННОЙ МИНИМИЗАЦИИ НЕДЕТЕРМИНИРОВАННЫХ КОНЕЧНЫХ АВТОМАТОВ 

Задача вершинной минимизации недетерминированных конечных автоматов является известной вычислительно трудной задачей комбинаторной оптимизации. Для ее решения предложено большое количество точных и приближенных методов. Все известные точные алгоритмы являются переборными, поэтому часто на практике их невозможно применить даже для сравнительно небольших автоматов. В статье рассматривается новый эвристический алгоритм для задачи вершинной минимизации недетерминированных конечных автоматов, основанный на сочетании классического алгоритма Камеды–Вейнера и генетического алгоритма. Основной особенностью предлагаемого метода является замена наиболее трудоемкой переборной части алгоритма, а именно поиска легитимных покрытий матрицы RAM (Reduced Automaton Matrix), на более быстрый, но неполный перебор покрытий с помощью генетического алгоритма. Приводятся описание реализации предлагаемого метода с использованием технологий параллельного программирования и результаты численных экспериментов.

 Конечные автоматы КА находят самое широкое применение в различных областях науки и техники. Приведем основные определения из теории КА . Множество слов L называется языком. Переходы автомата A часто описывают с помощью функции переходов Q2. КА часто используются для описания или распознавания языков. Два автомата называются эквивалентными, если они задают один и тот же язык. Для каждого НКА с помощью процедуры детерминизации может быть построен эквивалентный ему ДКА . Для данного языка L каноническим автоматом называется ДКА, распознающий этот язык и имеющий минимально возможное число состояний, а зеркальным каноническим автоматом называется ДКА, распознающий язык и имеющий минимально возможное число состояний . Задача вершинной минимизации НКА формулируется следующим образом для данного НКА A найти автомат, эквивалентный данному и имеющий минимально возможное число состояний. Заметим, что решение этой задачи может быть не единственным. Как показано в 2, задача вершинной минимизации НКА является PSPACE-полной, в то время как аналогичная задача для ДКА имеет сложность в худшем случае O. Следует отметить, что все известные точные методы минимизации НКА являются переборными, поэтому часто на практике их невозможно применить даже для сравнительно небольших автоматов. Это одна из причин того, что они не реализованы в таких известных пакетах для работы с НКА и родственными структурами, как AMoRE, FSM, Grail, Vaucanson, JFlap и др. 37. Более того, в большинстве таких пакетов отсутствуют даже приближенные методы минимизации НКА. В данной работе предлагается новый эвристический алгоритм минимизации НКА, основанный на сочетании классического алгоритма Камеды Вейнера 8 и генетического алгоритма . Основная идея предлагаемого метода состоит в том, что наиболее трудоемкая переборная часть алгоритма заменяется неполным поиском с использованием ГА, что позволяет существенно сократить время вычислений. Алгоритм КамедыВейнера Приведем краткое описание алгоритма. Пусть дан НКА A. Сначала для автомата A строятся канонический автомат B и зеркальный канонический автомат C. Каждое состояние этих автоматов является подмножеством состояний автомата A. Множество гридов покрывает матрицу RAM, если каждая единица в ней принадлежит по крайней мере одному из гридов данного множества. Минимальным покрытием матрицы RAM называется покрытие, содержащее наименьшее возможное количество гридов. Рассмотрим НКА A с таблицей переходов, приведенной в таблице 1 8. В таблицах 2 и 3 для автомата A приведены матрицы переходов канонического автомата B и зеркального канонического автомата C соответственно, а в таблице 4 матрица RAM автомата A. Легко убедиться, что первые два грида образуют минимальное покрытие матрицы RAM. По данному покрытию матрицы RAM с помощью так называемого правила пересечений можно построить НКА, который может оказаться эквивалентным исходному НКА A . Число состояний в построенном НКА совпадает с числом гридов в покрытии. В рассматриваемом примере минимальное покрытие является легитимным, и в результате получается минимальный автомат с двумя состояниями. Общая схема алгоритма КамедыВейнера может быть описана алгоритмом 1. Заметим, что шаги 1, 3 и 4 алгоритма теоретически имеют экспоненциальную сложность, однако на практике построение канонических автоматов обычно выполняется достаточно быстро и самыми трудоемкими являются шаги 3 и 4 . Алгоритм 1. Генетический алгоритм Популярной разновидностью эволюционных алгоритмов оптимизации, основанных на имитации процессов естественного отбора, происходящих в живой природе, является ГА. Эволюционные алгоритмы относятся к так называемым популяционным, поскольку они работают не с одним решением, а с их группой . Такие решения в эволюционных алгоритмах часто называются особями, хромосомами и т.п. Общая схема ГА может быть описана алгоритмом 2. Алгоритм 2. На первом шаге работы алгоритма формируется начальная популяция и для каждой ее особи вычисляется значение функции приспособленности . Функция приспособленности это функция, позволяющая сравнивать между собой качество получаемых решений. Основная идея эволюционных алгоритмов состоит в том, что в процессе эволюции выживают решения с лучшими значениями функции приспособленности. Затем на основе старой популяции и полученных потомков формируется новая популяция . Процесс продолжается до наступления критерия остановки . В качестве ответа обычно выдается особь с наилучшим значением функции приспособленности . Очень часто решения в ГА кодируются двоичными векторами. В результате две особи-родителя дают двух потомков. Такой тип скрещивания называется одноточечным кроссовером. Существуют и другие варианты скрещивания. Операция мутации для двоичных векторов обычно заключается в случайном инвертировании битов 9. Комбинирование алгоритма КамедыВейнера и ГА Рассмотрим более подробно последний шаг алгоритма КамедыВейнера, то есть поиск минимальных легитимных покрытий . Алгоритм 3. На каждом шаге внешнего цикла в строках 510 анализируются все возможные сочетания гридов по i элементов. Следует заметить, что на практике очень часто даже для небольших автоматов число гридов в матрице RAM может достигать нескольких сотен и даже тысяч элементов, а это приводит к необходимости перебора большого числа вариантов. Идея предлагаемого алгоритма состоит в том, чтобы заменить полный перебор более быстрой процедурой поиска, то есть ГА . Эвристический поиск минимальных легитимных покрытий можно реализовать с помощью алгоритма 4. Алгоритм 4. Таким образом, в предлагаемом методе ГА используется в алгоритме КамедыВейнера для нахождения минимальных покрытий матрицы RAM, после чего производится проверка их легитимности. Рассмотрим основные моменты, касающиеся ГА. Решением в ГА является покрытие, которое кодируется с помощью двоичного вектора. В этом векторе 1 в i-й позиции означает, что i-й грид включается в покрытие, а 0, что грид не включается в него. В рассматриваемом примере вектор означает, что в покрытие включаются только первые два грида из четырех. Для начала работы ГА необходимо сформировать начальную популяцию. Самым простым способом является поиск тривиальных решений, у которых все биты установлены в 1. Для получения нетривиальных решений может использоваться алгоритм 5. Алгоритм 5. Оператор мутации инвертирует несколько случайно выбранных битов, а в качестве оператора кроссовера могут использоваться любые стандартные операторы для двоичных векторов . После применения генетических операторов решение может стать недопустимым, то есть получившийся набор гридов может не являться покрытием, поэтому потребуется его корректировка, которая выполняется с помощью алгоритма, аналогичного 5. Так, в рассматриваемом примере решение не является допустимым и должно быть скорректировано. Программно корректировка решения может осуществляться либо внутри каждого генетического оператора, либо в виде отдельного оператора. В заключение заметим если минимальные легитимные покрытия не найдены, точный и приближенный алгоритмы возвращают канонический автомат B, когда число состояний в нем меньше, чем в автомате A. Данные методы реализованы в виде алгоритмических каркасов с использованием метапрограммирования, шаблонов проектирования и двух технологий параллельного программирования . В алгоритме КамедыВейнера с помощью технологий OpenMP и MPI были распараллелены поиск гридов в матрице RAM и поиск минимальных легитимных покрытий. В эвристической версии алгоритма использован параллельный вариант ГА библиотеки HeO, реализующий островную модель. Каждая версия алгоритма реализованы в виде отдельного солвера. Вычислительные эксперименты проводились на системе с общей памятью со следующими характеристиками Intel Core 2 Quad Q6600 2.4Ghz, 4 Gb RAM, MS Windows XP Professionsl SP 3. Результаты работы точного алгоритма представлены в таблице 6. Среднее время минимизации с использованием четырех потоков составило 1,1 секунды, а общее число найденных минимальных автоматов для всей выборки 268, при этом у 9 автоматов не оказалось эквивалентных минимальных НКА. Вычисления проводились со следующими параметрами ГА число особей в популяции 10 вероятность кроссовера 0,8 вероятность мутации 0,2 число итераций 50. Поскольку ГА используется только на последнем шаге алгоритма КамедыВейнера, первые 4 столбца таблицы 6 для приближенного алгоритма будут теми же, что и для точного алгоритма, поэтому в таблице 7 они заменены следующими столбцами N общее число минимальных автоматов для выборки N число неминимизированных автоматов в выборке T среднее время минимизации в секундах. Для столбцов N и Q приведены средние значения. Из таблицы 7 видно, что с увеличением числа потоков число найденных минимальных автоматов увеличивается, а число неминимизированных автоматов уменьшается. Среднее время минимизации по сравнению с точным алгоритмом мало и остается практически постоянным при числе потоков от 1 до 4, а затем увеличивается пропорционально числу потоков из-за ограничений аппаратной платформы, поддерживающей одновременное исполнение лишь четырех потоков. Проведенные численные эксперименты показали, что предложенный метод позволяет получать приемлемые результаты намного быстрее точного метода. Заметим, что полный перебор при поиске минимальных легитимных покрытий в алгоритме КамедыВейнера может быть заменен не только ГА, но и другими эвристическими алгоритмами, в частности алгоритмами локального поиска, что позволяет получить на основе классического алгоритма минимизации НКА новые эвристические алгоритмы вершинной минимизации. 