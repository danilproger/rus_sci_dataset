РАСТУЩИЕ ИНДУКТОРНЫЕ ПРОСТРАНСТВА И АНАЛИЗ ПАРАЛЛЕЛЬНЫХ АЛГОРИТМОВ 

Вводятся критерии эффективности использования параллельных алгоритмов при расчете логических и математических функций. Для анализа этих критериев предлагается аппарат растущих индукторных пространств. Подробно рассмотрены две задачи с эффективной и малоэффективной параллельностью алгоритмов. 

 Рассматриваемая математическая задача возникла при разработке тестов инженерной психологии, направленных на выявление людей, способных одновременно выполнять несколько операций распознавания при обработке визуальной текстовой информации. С точки зрения математики проблема сводится к поиску логических функций двух типов. Одни функции должны допускать значительное ускорение решения при одновременном использовании нескольких процессоров, выполняющих распознавание символов исходной информации и операции некоторого логического базиса. Другие требуют для этого очень большого увеличения ресурсов при низкой средней эффективности на один процессор. Требуется также, чтобы каждая задача допускала вариацию в широких пределах объема исходной информации. Тесты были построены, проведен эксперимент, показавший эффективность методики 13. Рассмотрим математический аппарат анализа логических функций для выявления задач указанных типов. Каждый алгоритм вычисления функции это процесс на индукторном пространстве 45. Использование в алгоритме операций условных переходов делает удобным введение понятия растущего индукторного пространства, где на каждом такте вычислений добавляются необходимые элементы индукции. Понятие характеристики задачи Под задачей будем понимать алгоритм, определяющий функцию от конечного числа переменных . Все входы и значения примеров принимают конечное число значений в некотором фиксированном алфавите. Каждый набор значений переменных определяет один пример задачи. Для вычисления ответов примеров задачи используется заданный набор элементарных операций, образующих логический базис в базовом алфавите, необязательно минимальный . Реализацией примера задачи будем называть итеративную структуру элементарных операций, построенную как направленный граф без циклов. Вершины графа распадаются на уровни . Вершинам графа начального уровня сопоставлены элементы исходных данных. Вершинам последующих уровней сопоставлены операции из операционного базиса. Стрелки показывают, как передаются данные в аргументы этих операций от элементов исходных данных или от результатов операций предыдущих уровней. В связи с тем, что порядок аргументов операции в общем случае существенен для результата, операция должна различать и упорядочивать стрелки, входящие в вершину, с которой она ассоциирована. Операции последнего уровня выдают ответ. Далее рассматривается операционный базис, состоящий из всех логических функций от некоторого фиксированного числа k переменных со значениями в базовом алфавите . Глубиной реализации назовем максимальный уровень вложенности операций в ней. Начальный уровень исходных данных считается нулевым. Запараллеленностью реализации назовем максимальное число операций одного уровня вложенности. Оптимальная по глубине реализация примера это реализация наименьшей глубины при заданном классе элементарных операций и заданной запараллеленности. Функциональная зависимость оптимальной глубины от запараллеленности характеристика данного примера из задачи. T характеристика задачи, время решения примера задачи с запараллеленностью P на операциях емкости k. Когда параметр k фиксируется, его можно не указывать. Эффективность запараллеленности определяется абсолютной и относительной удельной эффективностью на один дополнительный процессор . Замечание в некоторых задачах граф оптимальной реализации можно выбирать в зависимости только от числа входов, но не от значений входных данных в других задачах такой граф будет различным для разных наборов значений входов. Последний этап можно реализовать древовидной итерацией операций S с ветвлением до P. Легко доказать, что это оптимальная реализация по глубине и по числу операций одновременно n T k 1. Из характеристик видно, что эффективность высока, особенно при введении второго и третьего процессоров. Растущие индукторные пространства Для задач, в которых реализация зависит от исходных данных, удобно ввести понятие растущего индукторного пространства. Смысл этого понятия в том, что новые точки и элементы индукции вводятся по мере обработки входной информации. Этот эффект хорошо известен в программировании при использовании операций условного перехода. В зависимости от полученных промежуточных результатов к вычислениям подключаются те или иные программные блоки. Если построить развертку реализации алгоритма по тактам с указанием переходов от одной операции к другой и источников операндов для очередной операции, то получится индукторное пространство, в котором вычисление представлено процессом типа индукторного автомата. Но разным исходным данным будут соответствовать в общем случае разные пространства и автоматы в зависимости от реализации условных переходов в программе. Дадим формальное определение этого явления. Обозначения. Определение 1. Определение 2. Алгоритм роста из U это рекурсивная функция построения уровней индукторного пространства реализации решения по набору входов примера задачи. Алгоритм удовлетворяет следующим требованиям. 1. Уровень L состоит из n точек без индукторов . Если входы примера имеют значения a, a, то точке сопоставим состояние a. 2. Уровень L состоит из P точек. Каждой точке t сопоставлен индуктор, содержащий, кроме этой точки, ровно k точек уровня L. Каждой точке t сопоставлены операция порождения из V и нумерация точек индуктора. Состоянием процесса вычисления в этой точке будет. Каждой точке сопоставлены операция из V и нумерация точек индуктора. Построение следующего слоя ведется по значениям. 3. Пусть построены уровни L, L. Все слои, кроме нулевого, содержат P точек. Состоянием процесса вычисления в этой точке будет, где аргументы соответствуют значениям процесса в точках индуктора, отличных от центра индукции. Каждой точке сопоставлены операция из V и нумерация точек индуктора. Построение следующего слоя ведется по значениям кортежа. Такому значению сопоставляется точка слоя L с индуктором t t,. Этой точке также сопоставляется операция с тем же порядком аргументов. Конец определения. Алгоритм роста из U формирует индукторное пространство реализации запараллеленности P, используя только операции порождения емкости k. Для каждой исследуемой задачи надо выбрать из класса U подкласс решающих ее алгоритмов. На этом подклассе надо оценить характеристику задачи. Потенциальное и универсальное пространства реализаций Определение 3. Потенциальным пространством реализаций ранга n, k, P называется индукторное пространство, в котором граница состоит из n точек и в котором для любой возможной реализации с соответствующими параметрами есть изоморфное подпространство. Определение 4. Универсальным пространством реализаций ранга n, k, P называется пространство, в котором граница состоит из n точек и для любой возможной реализации с соответствующими параметрами можно реализовать эквивалентный процесс . Теорема 1. Универсальное пространство определено однозначно своим рангом с точностью до полных индукторов точек. Доказательство. Поскольку требуется изоморфизм процессов на реализации и на универсальном пространстве, каждому уровню графа реализации должно соответствовать равное по числу элементов подмножество из УПР, и эти подмножества должны быть не пересекающимися попарно. Так как индуктор точки пространства реализации может содержать любые k элементов из предыдущих уровней, в УПР полный индуктор точки должен содержать объединение всех предыдущих уровней. Процесс реализации формируется по схеме построения растущего пространства, но вместо порождения новой точки и элемента индукции используется очередная точка следующего уровня. В точках тех уровней, которых нет в реализации, процесс на УПР задается как тривиальный . Конец доказательства. Замечание имеется бесконечно много неизоморфных УПР одного ранга, которые различаются наборами неполных индукторов каждой точки. Теорема 2. Имеется единственное минимальное потенциальное пространство реализаций. Это порождающая система индукторов. Доказательство. Тот факт, что такое пространство является ППР, доказывается прямым инъективным вложением в него любой реализации последовательно по слоям с учетом индукторов точек реализации. Конец доказательства. Замечание имеется бесконечно много неизоморфных ППР, которые получаются произвольным расширением минимального ППР без изменения системы индукторов на минимальном ППР. Утверждение 1. В минимальном ППР число n точек слоя L удовлетворяет рекуррентному гипергеометрическому соотношению. Доказательство. На слое L необходимо иметь одну точку для каждого набора из k точек из объединения предыдущих слоев и для каждого из P процессоров слоя. Конец доказательства. В соответствующем растущем пространстве слой содержит только P точек. Задача с неэффективной запараллеленностью Описание задачи слежения. Данные примера в задаче слежения оформлены как прямоугольная таблица M N, где M вертикаль, N горизонталь. В каждой клетке таблицы стоит знак из алфавита 0. Рядом с крайним правым столбцом правее стоят метки из алфавита A B C D, образующие N1-й столбец. Задание проследить от меченой левой клетки траекторию до правого столбца меток и выдать тот символ, который стоит в финишной правой клетке. В примере запрещено указывать выход за верхнюю или нижнюю границы таблицы. Формально переход из клетки с координатами описывается так . i, j i 1, j 1 a i, j a i, j 0 i, j 1 a Символ в правых скобках показывает, что записано в клетке. В граничном случае . Использование запараллеленности в задаче слежения возможно только путем предварительного расчета нескольких отрезков траектории в середине или в конце таблицы. В этой схеме эффект явно вероятностный попадет ли основная траектория в заранее заготовленный отрезок. Однако расчет характеристики задачи проводится по худшему случаю. Тогда требуется, чтобы дополнительные процессоры гарантированно рассчитывали продолжение траектории из всех точек, в которые может попасть начальный участок траектории, рассчитываемый основным процессором. Такую совокупность начальных точек для гипотетического продолжения траектории назовем потенциальной границей траектории. После переноса основного процессора в заранее вычисленную последнюю точку продолжения траектории можно повторить для нее, как для корня процесс параллельного расчета из точек новой границы. Для расчета характеристики этой задачи вначале рассмотрим случай расчета траектории на треугольной таблице с числом уровней N от корня . В задаче на Т-табло отсутствует краевой эффект выхода на нижнюю или верхнюю границу таблицы. Определение 5. Относительным рангом п-границы для данной начальной точки назовем наименьшее по траекториям число уровней от начальной точки до точки п-границы. Утверждение 2. Наименьшая по числу точек п-граница данного относительного ранга s это уровень s на Т-табло с корнем в начальной точке. При заданной запараллеленности в оптимальном по характеристике алгоритме решения задачи слежения дополнительные процессоры отслеживают траектории из точек некоторого уровня s. Доказательство. Допустим, процессоры на начальном такте распределены по некоторой п-границе уровня s. Тогда имеется траектория при неких исходных данных, для которой встреча с границей происходит на такте s. В этом случае все дополнительные процессоры надо перестраивать на новую п-границу новой начальной точки. Таким образом, в расчете на самый плохой случай число тактов решения задачи будет не лучше, чем при распределении процессоров по уровню s. По утверждению 2 для этого заведомо хватит процессоров. Конец доказательства. Замечание при достаточно большом числе процессоров, если позволяет длина траектории N, можно вести расчет траекторий сразу с нескольких п-границ . Тогда по истечении s тактов можно перенести начальную точку сразу на rx уровней, затратив только r дополнительных тактов. На основе этих фактов можно рассчитать характеристику T задачи слежения. Число одновременно обрабатываемых п-границ обозначим r. Условная характеристика задачи x r T N x. Аналитическое решение задачи приводит для r к уравнению четвертой степени. Но возможно численное решение с учетом ограничений на вероятные значения запараллеленности . Для больших N проведены расчеты эффективности для начальных значений запараллеленности. При малых N эффективность ниже. Во всех случаях показана низкая эффективность. При числе процессоров меньше шести эффекта вообще нет. Задача слежения на прямоугольной таблице и в полосе. Построение п-границ на полосе ширины M или в таблице M N требует учета выхода траекторий на границу. При малых продольных смещениях L от начальной точки на средней линии полосы выхода за границу нет. Это соответствует условию 12L M. После выхода возможных траекторий на границу полосы каждая п-граница имеет длину M. Приведенные характеристики сохраняют вид и . При этом эффект возникает только при достаточно больших начальных запараллеленностях, и эффективные значения P нарастают с шагом M. Таким образом, параллельный счет задачи слежения неэффективен. 