ОЦЕНКА СОСТОЯНИЯ ПРОГРАММНОГО ПРОЕКТА С ДЕТЕРМИНИРОВАННОЙ СТРУКТУРОЙ ТЕХНОЛОГИЧЕСКОГО ЦИКЛА 

Рассмотрены вопросы оценки состояния разработки программных систем, развиваемых в рамках итерационного жизненного цикла. Описывается подход к определению подмножества компонент системы, достаточного для оценки состояния системы по результатам регрессионного анализа. Предлагается метод прогноза сложности дальнейших работ на основе анализа документации процесса разработки и результатов предыдущих итераций. 

 Современные программные комплексы обычно развиваются в рамках итерационного жизненного цикла. Регулярные изменения внешних условий и потребностей пользователя приводят к изменениям требований к системам, а реализация новых требований вызывает необходимость регулярно анализировать внесенные изменения, проверяя согласованность различных частей проекта после внесения обновлений. Для решения подобных задач используется регрессионный анализ 1. При этом для оценки текущего состояния проекта исследуются как новые компоненты, так и старые, потенциально подверженные влиянию внесенных изменений. При промышленной разработке программного обеспечения большая часть порождаемых документов проекта контролируется процессом управления конфигурациями 2. Будем называть эти документы конфигурационными элементами. При этом процесс управления конфигурациями поддерживает трассируемость между всеми конфигурационными элементами. При разработке высококритичного программного обеспечения особенно актуальна проблема достаточности множества артефактов, отобранных по результатам регрессионного анализа. Требования к отказоустойчивости подобных систем регламентированы отраслевыми стандартами . Повторное тестирование всей системы после внесения изменений потребует весьма значительных ресурсов, но ошибка в случае выбора слишком малой части объектов может обойтись гораздо дороже. Поэтому необходимо разработать методы регрессионного анализа, заведомо дающие достаточное множество объектов, потенциально подверженных изменениям и требующих доработки. В таких условиях процесс регрессионного анализа можно представить как рекуррентную последовательность следующих шагов. Определение измененных артефактов и добавление их в множество T объектов, требующих анализа. Определение артефактов, непосредственно связанных с уже отобранными для анализа, и добавление их в множество объектов T для последующего анализа. Также может потребоваться внести изменения в такие артефакты для обеспечения непротиворечивости поведения системы. Повторение шага 2. Таким образом, в ходе регрессионного анализа мы получаем волну, распространяющуюся по связям между конфигурационными элементами. Определение критерия останова для распространения волны сложная задача, и окончательное решение принимается человеком. Для облегчения его принятия может использоваться предлагаемый метод оценки состояния конфигурации. Пусть T некоторое множество артефактов проекта, полученное по итогам очередной итерации из T множества артефактов, полученных в предыдущей итерации. Здесь под артефактом без снижения общности понимаем элемент конфигурационного управления, который может быть однозначно идентифицирован. Пусть также T множество изменений от T к T. Требуется определить T реальное подмножество элементов конфигурации, требующих доработки вследствие внесения изменений T. Анализу подвергается каждый артефакт t T. Определяются связанные артефакты t . Каждый отобранный элемент t дополнительно анализируется с целью выявления противоречий с ранее отобранными элементами. В случае возникновения противоречия элемент t добавляется во множество объектов, которые необходимо обновить. Для каждого выявленного элемента проводят аналогичный анализ уже связанных с ним элементов. Если изменение не влияет на результат работы связанного артефакта, дальнейший анализ для него не проводится. Общий вид дерева анализа артефактов проекта представлен на рисунке 1. Пусть при проведении анализа уже имеется некоторое количество достоверных результатов, полученных при анализе на предыдущих итерациях. Если предположить, что с внесением изменений структура проекта и технология существенно не изменились, то, используя старые результаты, можно попробовать спрогнозировать глубину распространения вышеописанного процесса анализа влияний. Из практики известно, что область, вовлекаемая в повторную верификацию по текущим изменениям, обычно не меньше области, выявленной в процессе внесения меньших изменений, и не больше области, затронутой внесением больших изменений. Для формализации высказанного предположения требуется ввести некоторые обозначения. Пусть артефакты проекта образуют некоторую сеть G в общем случае как с направленными, так и с ненаправленными связями. Направленные связи отражают случай, когда влияние может распространяться только в одном направлении, например, выходной параметр требования t является входным для требования t. Ненаправленные связи характеризуют разного рода ссылки между артефактами, допускающими распространение влияния в любом направлении. То есть где T множество артефактов проекта, введенное выше S дуги, отображающие направленные связи M ребра, отображающие ссылки между элементами. Здесь X множество предыдущих результатов анализа, таких, что, если изменения были на предыдущих итерациях, то они есть и на текущей итерации X множество текущих результатов анализа, таких, что, если изменения есть на текущей итерации, то они были и на предыдущих итерациях. С помощью этих частот можно сформулировать вышеописанное предположение следующим образом степень влияния изменений T на произвольный элемент t множества T в модели G уменьшается при уменьшении n или увеличении n . Для любого проекта с учетом конкретной интерпретации элементов модели G и накопленной в проекте статистики можно определить пороговые значения n и n и с их помощью оценить снизу и сверху T область влияния анализируемого изменения. Для получения более точной оценки T предлагается, кроме анализа трассировки между элементами конфигурации, проводить анализ технологических операций проекта, которые необходимо проделать вследствие внесенных изменений. В узком смысле жизненный цикл проекта может быть представлен в виде сети технологических операций над проектными артефактами, связанных друг с другом. То есть при таком подходе к оценке влияния T получится волна изменений, распространение которой необходимо ограничить для получения достаточной оценки размера T. Значительное число связей между технологическими операциями дублируется трассировкой, однако в общем случае это необязательно, а значит, применение двух методов позволяет получить более точную оценку. Введем следующие обозначения. В ходе разработки любой элемент проекта его текст, служебные атрибуты, например, номер версии, дата последнего изменения и т.п. изменяется. Положим, что каждое изменение элемента конфигурации t порождает новое значение элемента конфигурации. Будем считать без снижения общности, что любая технологическая операция или ее часть может быть представлена как неделимый акт создания нового значения c на основе некоторого C C. Назовем такое действие проектной активностью a A, где A множество проектных активностей. Вообще говоря, проектная активность A не является чистой функцией, однако если рассматривать только уже совершенные активности, то данным побочным эффектом можно пренебречь. Для любого значения c однозначно определена породившая его активность a. Из практических соображений удобно ввести типизацию активностей. В любом проекте существуют различные типы активностей, таких как разработка требований, кодирование, тестирование и т.п. То есть в любом проекте существует набор классов активностей A A A. Таким образом, целесообразно рассматривать набор классов элементов конфигурационного управления T T T. Будем считать, что проектная активность всегда задает новое значение для элемента конфигурации, даже если не был изменен его текст. Значит, каждому классу элемента соответствует набор классов значений C, C, в том числе отображающих состояние элемента. Значения могут выступать в качестве входных параметров активности или оказывать управляющее воздействие на активность, или выступать средством совершения активности. Таким образом, следует говорить о множестве ролей, которые может выполнять значение в активности, как об отображении RC A, то есть роль задает значения, которые могут быть переданы активности. Используя введенные обозначения, все действия в проекте можно представить в виде сети объектов введенных классов. Каждый объект из A связан с одним или несколькими объектами из C данная связь определяет создание значения в результате активности. Каждый объект из класса R связан как минимум с одним значением из C и одной активностью из A. Это означает, что значение выполняло некоторую роль в активности. Каждое значение из C связано ровно с одним элементом из T, каждый элемент связан с некоторым набором значений из C. Кроме этого, каждому значению соответствует некоторый набор атрибутов, в том числе и текст документа. Заданная таким образом модель данных может непосредственно использоваться для реализации хранения элементов конфигураций в объектной СУБД. Допустимая структура последовательностей технологических операций проекта, то есть модель жизненного цикла, определяется дополнительными ограничениями на связи между конкретными классами активностей, значений, ролей. Немаловажную роль играют ограничения на кардинальность некоторых сочетаний связываемых классов. Для наиболее тонкого моделирования конкретного проекта можно строить развитую структуру классов на множествах A, C, T, R. Таким образом, задается объектная модель жизненного цикла. Состояние проекта определяется классами значений элементов конфигурационного управления. Анализ состояния проекта сводится к определению возможных технологических цепочек, результатом которых будут требуемые значения элементов конфигурации. На основе истории проектных активностей можно оценить ожидаемые пути развития проекта и выбрать наиболее приемлемую из возможных цепочек активностей, приводящих проект в заданное состояние после реализации изменений T. По прогнозу активностей можно предположить создаваемые значения элементов конфигурации и соответственно определить T множество элементов, подверженных изменениям. Если объекты активностей содержат информацию об обязательных ресурсах, затребованных для осуществления конкретных активностей, то можно прогнозировать трудоемкость работ по приведению проекта к требуемому состоянию. Реализация предложенного в статье подхода позволит снизить трудозатраты и увеличить точность при построении оценки состояния проекта с фиксированным технологическим циклом, а также обеспечит дополнительную информационную поддержку принятия решений при управлении изменениями. 