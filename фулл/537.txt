АВТОМАТИЗИРОВАННАЯ ВЕРИФИКАЦИЯ АЛГОРИТМОВ УПРАВЛЕНИЯ  СЛОЖНЫМИ ТЕХНОЛОГИЧЕСКИМИ ОБЪЕКТАМИ   НА ПРОГРАММНЫХ ИМИТАТОРАХ      

Статья посвящена проблеме проверки алгоритмов управления, созданных в рамках процесс-ориентированного  подхода, на соответствие входным спецификациям. Представлена общая схема верификации алгоритма управления, приведены ее реализация в автоматизированном варианте и результаты практической апробации в проекте  по автоматизации Большого солнечного вакуумного телескопа.  : автоматизация, промышленные алгоритмы управления, верификация, процесс-ориенти рованные языки программирования.    Работа выполнена при финансовой поддержке Федерального агентства научных организаций (государственная регистрация № АААА-А17-117060610006-6) и при финансовой поддержке РФФИ (проект № 17-07-01600).  

Алгоритмы управления сложными технологическими объектами обладают рядом свойств, специфичных для области промышленной автоматизации 14 открытость наличие окружающей среды, внешнего мира, с которым взаимодействует алгоритм управления событийность алгоритм управления формирует управляющие воздействия как реакцию на события значимые изменения во входных данных, в том числе на управляющие команды от оператора неопределенная продолжительность функционирования алгоритма управления синхронизм необходимость синхронизации реакции алгоритма управления с событиями на объекте управления логический параллелизм алгоритм управления структурно отражает параллелизм физических процессов на объекте управления, их независимость. Реализация алгоритмов управления средствами объектно-ориентированных языков общего назначения чревата чрезмерным усложнением программной архитектуры при росте сложности алгоритма 5. Поэтому в области промышленной автоматизации используются специализированные языковые средства для разработки алгоритмов управления языки МЭК 61131-3, G NI LabVIEW, Reflex 68. Использование языков МЭК 61131-3 трудоемко из-за низкой выразительности этих языков, а в некоторых случаях и неприемлемо, например при необходимости интеграции кода в сторонние системы 6. Исследователи альтернативных лингвистических средств для описания алгоритмов управления 2 4 710 предлагают и практически обосновывают эффективность предметноориентированных языков на основе модели конечного автомата, в частности процесс-ори ентированного языка Reflex 10. При использовании конечно-автоматных языков в промышленной автоматизации 7 8 11 12 основную проблему представляет решение задачи тестирования и верификации созданных алгоритмов, поскольку методы, разработанные для тестирования и верификации программного обеспечения в области объектно-ориентированного программирования, слабо применимы 5. Управляющий алгоритм невозможно тестировать автономно. Тестирование алгоритма на реальном объекте управления может привести к поломке оборудования или аварийной ситуации. Поэтому наиболее распространенный подход ручная проверка на этапе пуско-наладки проверяющий контролирует реакцию алгоритма на различные ситуации, постепенно усложняя тесты. Подход очень трудоемкий. Он приводит к серьезным психологическим нагрузкам на разработчиков, не гарантирует полноту верификации, затрудняет контроль качества верификации и в итоге усложняет разработку управляющих алгорит мов 11. Поэтому разработка методов верификации алгоритмов управления интересна не только с теоретической, но и с практической стороны 5 1318. Современная тенденция использовать для тестирования и верификации алгоритмов управления программные имитаторы объекта управления 11 1921. В статье предлагается подход к верификации алгоритмов управления сложными технологическими объектами на основе концепции виртуальных объектов управления ВОУ, включающий в себя создание кода алгоритма управления и программную реализацию объекта управления в виде ВОУ. Основные положения, изложенные в статье, были представлены на V Международной научной конференции Математическое и компьютерное моделирование Омск, 2017 22. Общая схема итерационной разработки алгоритмов управления рис. 1, предложенная ранее в 11, включает следующие шаги верифицируемый алгоритм управления его часть реализуется программно и оформляется в обособленный алгоблок модель технологического объекта его часть также реализуется программно и оформляется в обособленный алгоблок, называемый виртуальным объектом управления проводится верификация через создание тестовых ситуаций сценариев и контроль реакции алгоритма управления коррекция кода алгоритма управления и или виртуального объекта управления по результатам верификации. Схема позволяет использовать итерационный подход к разработке промышленных алгоритмов управления сложными технологическими объектами. В упрощенном виде схема была опробована при создании набора виртуальных лабораторных стендов для обучения студентов ИТ-специальностей, специализирующихся в области промышленной автоматизации 23. Упрощение заключалось в неизменности ВОУ. При этом ВОУ выполнены с использованием графики для повышения наглядности и визуального контроля корректности алгоритма управления. Несмотря на высокую эффективность при использовании в учебном процессе, подход не нашел практического применения в реальных проектах в силу высокой трудоемкости создания графических моделей ВОУ. Для использования в реальных проектах автоматизации предложенная схема была программно реализована в автоматизированном комплексе верификации алгоритмов управления. В автоматизированном варианте рис. 2, таблица управление сценариями работы и контроль реакции алгоритма производится оператором через графический интерфейс . Графический интерфейс предоставляет оператору возможность отправлять штатные команды алгоритму управления через очередь сообщений и контролировать сообщения от алгоритма управления через очередь сообщений, управлять поведением ВОУ через очередь сообщений и контролировать сообщения от ВОУ через очередь сообщений . Также на графическом интерфейсе оператора ГИО отображаются состояния входных и выходных дискретных сигналов алгоритма управления. Для имитации входных аналоговых сигналов от датчиков АЦП организован дополнительный канал связи между ВОУ и АУ, а для имитации выходных аналоговых сигналов ЦАП канал связи . Программный комплекс автоматизированной верификации алгоритмов управления был реализован на базе пакета LabVIEW рис. 3. Комплекс включает ГИО, который конфигурируется через модуль загрузки конфигурационных файлов МЗКФ и взаимодействует с целевыми модулями алгоблоков АУ и ВОУ . Модули загрузки конфигурационных файлов и ГИО реализованы на языке G LabVIEW. Исполняемые модули АУ и ВОУ генерируются из описания на языке Reflex и в виде DLL интегрируются в LabVIEW, что в отличие от подхода, использованного при разработке виртуальных лабораторных стендов, обеспечивает возможность итерационно развивать не только АУ, но и ВОУ. Управление верификацией ведется оператором через ГИО рис. 4. ГИО представлен расположенной внизу окна неизменяемой панелью управления верификацией и шестью вкладками генерации входных сообщений для АУ и ВОУ, переменных АУ рис. 5, переменных ВОУ, отладочной информации АУ рис. 6, отладочной информации ВОУ и вкладки Помощь с руководством по работе с комплексом. Панель управления верификацией содержит элементы управления режимом отладки пошаговый непрерывный, запуска и остановки алгоблоков. Используемые условные обозначения Вкладка генерации входных сообщений АУ и ВОУ см. рис. 4 разделена на две области панель управления АУ и панель управления ВОУ для ввода входных сообщений для АУ и ВОУ соответственно. Вкладка Переменные АУ рис. 5 разделена на три области панель значений входных портов АУ с указанием имени входного порта, источника, который генерирует значения порта ВОУ РУЧН, и значения битов порта, отображаемых цветом панель значений входных и выходных глобальных переменных АУ с указанием типа, имени переменной и ее текущего значения панель режима управления входным портом АУ, позволяющая оператору устанавливать значения битов выделенного порта вручную. Вкладка Переменные ВОУ выглядит аналогично. На вкладке Отладочная информация АУ см. рис. 6 отображаются выходные сообщения АУ и текущие состояния процессов АУ . Вкладка Отладочная информация ВОУ выглядит аналогично. При запуске комплекса МЗКФ на основании конфигурационных файлов, создаваемых транслятором языка Reflex, настраивает вкладки ГИО имена переменных, портов, процессов, входных выходных сообщений и передает управление ГИО. ГИО выделяет память под очереди сообщений, буферы входных выходных переменных, буфер состояния процессов, и затем передает указатели на выделенные области памяти алгоблокам. По началу верификации кнопка Запуск на панели управления верификацией ГИО циклически активирует алгоблоки в определенной последовательности сначала ВОУ, затем АУ. Создание тестовых ситуаций производится оператором через вкладки Генерация входных сообщений АУ и ВОУ, Переменные АУ, Переменные ВОУ. Контроль корректности алгоритма управления ведется визуально. Разработка алгоритма управления соответствует общей схеме итерационной разработки см. рис. 1. Решение было практически апробировано на задаче автоматизации Большого солнечного вакуумного телескопа пос. Листвянка, Иркутская обл. 5 24. В проекте был создан и верифицирован алгоритм управления системой вакуумирования. Верифицировалась работа алгоритма при создании вакуума в трубе телескопа, развакуумировании перед техническими работами, реакция алгоритма на изменение температуры окружающей среды, уровня воды в системе охлаждения, на разгерметизацию трубы телескопа, отказ отсечных клапанов, вакуумных заслонок, насосов, вытяжных вентиляторов, датчиков и исполнительных органов системы климат-контроля и т. д. Верификация была проведена на территории разработчика и обеспечила значительное сокращение общей трудоемкости работ, в частности, продолжительности пусконаладки на целевом объекте была сокращена более чем в два раза. Выявленные недостатки подхода визуальный контроль за реакцией алгоритма и сложность анализа отображаемой информации не исключает вероятности пропуска ошибки при верификации в силу того что на каждой итерации должна быть заново проверена реакция алгоритма в соответствии со списком тестовых ситуаций, возникает большое количество рутинных действий. В работе была предложена и рассмотрена автоматизированная схема итерационной разработки алгоритмов управления технологическим объектом. Итерационная схема разработки предполагает верификацию алгоритма управления, специфицированного на процесс-ориен тированном языке Reflex, на виртуальном объекте управления до начала приемо-сдаточных испытаний на целевом объекте. Эффективность автоматизированной схемы верификации была подтверждена в проекте автоматизации Большого солнечного вакуумного телескопа при создании ПО подсистемы вакуумирования. 