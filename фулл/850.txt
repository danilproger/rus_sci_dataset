ПРОГРАММНАЯ МОДЕЛЬ СИСТЕМЫ НА КРИСТАЛЛЕ 

Предлагается формализованное описание программной модели систем на кристалле как системы реально­ го времени. Модель строится на основе совмещения связанных автоматных, графовых и вероятностных состав­ ляющих системы и входных воздействий. Приводятся примеры использования рассмотренной модели для опре­ деления интерфейсных блоков и их анализа с помощью характеристик типа «пересечений уровня». Ключевые слова  — системы на кристалле, совместная разработка программного и аппаратного обеспечения. 

Текущие темпы развития технологий в электронике привели к широкому использованию систем на кристалле СнК в бытовой и промышленной технике. Чаще всего СнК представляют собой системы реального времени. Неотъемлемой частью СнК являются микропроцессорные элементы, программное обеспечение ПО которых реализует функции управления системой. ПО в СнК тесно связано с работой специализированной аппаратуры и коммуникационных интерфейсов. Характеристики проектируемой системы полностью зависят от согласованности между собой всех программных и аппаратных компонентов. При разработке СнК функционально законченная система формируется из готовых аппаратных и программных модулей, включая операционные системы реального времени ОСРВ 1. Это требует разработки принципов отбора отдельных модулей, решения задач программной и аппаратной совместимости и оптимизации режимов работы компонентов системы для конкретной СнК. Для описания аппаратного обеспечения в СнК на различных этапах проектирования используются три типа основных моделей программные модели аппаратной реализации, которые описывают правила и алгоритмы взаимодействия с аппаратурой функциональные модели поведенческие модели, упрощенно описывающие правила работы компонента аппаратного обеспечения модели аппаратной реализации СнК. Последние два типа моделей имеют стандартизированные описания 2. Функциональные модели описываются с помощью несинтезируемых конструкций языков, таких как и . Модели аппаратной реализации описываются только синтезируемыми конструкциями . Обе эти модели сложны для анализа при проектировании ПО, поскольку учитывают детализированные алгоритмы реализации целевой функции аппаратного обеспечения. Поэтому для разработки ПО обычно используется программная модель аппаратной части СнК. Однако в настоящее время отсутствуют единые методики и правила описания программных моделей, что снижает качество СнК и ограничивает возможности переноса ПО на другие системы. Целью данной работы является построение формальной программной модели СнК, разработка принципов ее анализа и практической реализации для систем реального времени. С точки зрения программной модели аппаратные компоненты можно разделить на активные управляющие и управляемые рис. 1. Под активными управляющими компонентами понимаются ядра микропроцессорных элементов, осуществляющих общее управление системой посред ством исполнения программного кода. Управляемые компоненты взаимодействуют с микропроцессорным элементом. При этом на аппаратном уровне они могут выполнять функции управления, определяемые логикой изменения основных состояний. Программная модель представляется формализованными описаниями основных состояний управляемых компонентов, программно доступных элементов памяти, адресных пространств и системы команд управляющих блоков системы. Программно доступные элементы памяти не только используются для хранения данных, но и участвуют в управлении и обмене данными между компонентами. Формализованное описание состояний управляемых компонентов в терминах теории конечных автоматов 3, 4 может быть представлено как, где конечный автомат множество состояний автомата множество входных сигналов функции переходов начальное состояние множество выходных сигналов функция выходов. При построении программной модели необходимо разделять множества входных и выходных сигналов на несколько подмножеств из-за различия свойств и природы интерфейсных сигналов, а также особенностей их использования. Это непосредственно влияет на программную модель компонента. Выделим следующие подмножества 5 множество входных сигналов, не участвующих в управлении системой, но являющихся источником данных для внутренней логики множество управляющих сигналов, которые участвуют при выборе различных ветвей в алгоритме функционирования компонента, причем множество входных и управляющих сигналов, доступных для ПО множество входных и управляющих сигналов, не имеющих прямого управления со стороны ПО множество выходных сигналов, непосредственно доступных для ПО множество выходных сигналов, обрабатываемых другими блоками и не являющихся напрямую доступными ПО. В общем случае на каждый вход из множества подаются сигналы, значения которых представляют собой многомерные случайные величины, описываемые многомерными плотностями вероятностей либо функциями распределения. Соответственно, модель состояний носит вероятностный характер. Изучение вероятностных характеристик поведения аппаратного обеспечения является принципиально важным аспектом при проектировании систем как мягкого, так и жесткого реального времени. Тогда множеству ставится в соответствие множество случайных величин, где множество плотностей распределения, 1, многомерных случайных величин 1 2, где вектор случайных величин, распределения которых зависят от реализации конкретных систем. Основная задача ПО состоит в реализации функций настройки компонента на заданный режим и организации управления взаимодействием с другими элементами системы в реальном времени. Алгоритм управления каждым компонентом обеспечивает достижение заданных состояний и функции выходов из случайного текущего состояния, при этом, . Совокупность правил и алгоритмов обработки входного потока данных определяет режим работы, что с точки зрения конечного автомата представляет ограничения на последовательность изменения состояний, т. е. не любой путь может быть использован для достижения заданного состояния. Конечный автомат может быть описан ориентированным графом переходов, где состояния соответствуют вершинам графа . Дуги графа определяются функциями переходов, где . В этом случае маршруты в конечном автомате есть подмножество всех возможных путей в графе . Следовательно, задание режима работы сводится к определению подмножества путей графа, допустимых к использованию для достижения цели перевода системы из состояния в, которые определяются подмножеством входных управляющих сигналов . Тогда алгоритм управления может быть представлен совокупностью последовательных множеств входных воздействий, выдаваемых ПО в зависимости от состояния системы. Эти воздействия позволяют обеспечить передвижение по заданным маршрутам из . Для каждого режима работы существует свой сценарий входных воздействий, который позволяет пройти указанный маршрут путем следования по определенным дугам графа. Выбор алгоритма управления сводится к определению наилучшего маршрута по критериям длины пути и затрат ресурсов. Для этого необходимо каждому переходу сопоставить весовые коэффициенты, отражающие реальные затраты на каждый переход или его существование, где это множество функций, определяющих весовые коэффициенты для каждого перехода. В системах СнК основными весовыми характеристиками являются энергопотребление перехода в активной фазе энергопотребление перехода в пассивной фазе затраты на само существование перехода аппаратные затраты на реализацию перехода временная длительность перехода и т. д. Весовые коэффициенты зависят от конкретной реализации, например от существования других переходов, так как несколько переходов могут использовать одни и те же аппаратные ресурсы. В реальных системах возникает вопрос о достижимости конечной точки заданного маршрута. Компонент является полностью управляемым ПО, если множество управляющих сигналов состоит только из программно доступных сигналов или сигналов, напрямую порожденных от них и . Действительно, если переходы обеспечиваются только программно доступными сигналами, то условие выполняется автоматически, если же в функции переходов участвуют результаты функции выходов, то они, так или иначе, являются производными от программно управляемых входных сигналов. В случае невыполнения условия полной программной управляемости компонента система является не полностью определенной, так как существуют пути, не зависящие от функционирования ПО. В этом случае поведение системы будет зависеть от вероятностных характеристик входного потока сигналов из множества . Маршрут является абсолютно достижимым, если во всех вершинах состояниях на протяжении всего маршрута переходы осуществляются только посредством программно доступных управляющих сигналов и их производных и не существует перехода, нарушающего маршрут, где и, где и и, где, т. е. не существует пути, при использовании которого конечная точка оказывается недостижимой без перехода в начальную точку маршрута. Условие абсолютной достижимости не выполняется, если в маршруте существует хотя бы один путь, который образует замкнутый контур в графе с отправной точкой маршрута без достижения конечной точки, что приводит к существованию перехода, делающего маршрут недостижимым при определенных условиях либо условно достижимым. Маршрут является условно достижимым, если существуют условия, при которых пути в маршруте образуют замкнутый контур с участием начального состояния и без участия конечного, а также существует зависимость от программно неуправляемых сигналов. В графе можно выделить вершины состояния, проходя через которые система может отклониться от заданного маршрута . Такие состояния определим как критичные состояния конечного автомата, в которых неправильная или несвоевременная выдача управляющих сигналов со стороны активного компонента может привести к недостижимости конечной точки маршрута либо отложить достижение на бесконечно долгий срок. Именно наличие таких состояний формирует требования к ПО систем реального времени исходя из условий сохранения заданного маршрута. Таким образом, модель состояний это совокупность связанных автоматной модели, модели вероятностных характеристик входных сигналов, модели весовых коэффициентов стоимости существования и реализации элементов автоматной модели, а также функций связывания этих моделей в единое целое . Данная совокупность позволяет оценивать различные параметры системы с точки зрения возможности реализации, надежности, вероятностных и стоимостных характеристик, а также производить оценку качества алгоритмов ПО. Рассмотрим примеры описания и анализа модели состояний программной модели на примере ведущего и ведомого контроллеров интерфейса, представленных на рис. 2. Данный интерфейс находит широкое применение в СнК, так как он является интерфейсом взаимодействия между компонентами в рамках одной печатной платы или между внутренними компонентами СнК. Его популярность объясняется высоким быстродействием и простотой реализации как самих контроллеров, так и линий связи за счет минимального набора сигналов. Интерфейс является последовательным синхронным интерфейсом 6. В ходе обмена всегда существует один ведущий контроллер и ведомый контроллер . Ведущий контроллер ВК отвечает за выбор активного ведомого контроллера причем только один может быть активным в один момент времени, производимый низким уровнем сигнала разрешения . Сигнал может находиться в активном состоянии, даже если реальной передачи данных не происходит. Также ВК отвечает за формирование временной диаграммы передачи. Минимальная единица передаваемой информации на входе ВК это байт. ВК передает этот байт последовательно, маркируя передачу синхросигналом, бит за битом, на одном фронте бит выдается ведущим и ведомыми контроллерами, а на противоположном захватывается в сдвиговом регистре. Данная итерация повторяется 8 раз для передачи одного байта, затем останавливается, если нет другого байта для передачи. Рассмотрим модель ВК, построенную на анализе временной диаграммы рис. 3 и спецификаций . Модель системы представляет из себя совокупность состояний 0 1 2 3 4 5 6 7 с начальным состоянием 0 множеств входных и выходных сигналов 70 70 функции переходов, описанной в виде направленного графа рис. 4 функции выходов, представленной в таблице, в виде изменений состояний сигналов в каждом из состояний. Также в модели присутствуют внутренний счетчик реального времени, счетчик выдаваемых битов и регистр данных 70, что позволяет упростить логическую схему графа. Определим маршрут как путь от состояния 0 до состояния 7 с последующим возвращением в 0. Анализ данной модели показывает, что ведущий компонент является полностью программно управляемым и удовлетворяет требованию абсолютной достижимости, так как ни один из его переходов не зависит от элементов множества . В модели отсутствуют критические состояния, так как не существует пути, нарушающего маршрут. Модель позволяет определить условие сохранения доступности для программного обеспечения состояния сигнала . Также определяются временные характеристики процесса работы компонента с точки зрения ПО, поскольку вычисляется время пути от исходной точки маршрута до конечной. Это может быть переведено в количество циклов микропроцессорного устройства, в течение которых ПО может переключиться на реализацию других задач. Модель ведомого блока интерфейса, построенная на основании анализа рис. 3 и спецификаций, описывается совокупностью состояний 0 1 2 3 4 5 с начальным состоянием 0 множеств входных и выходных сигналов 7 0 70, функции переходов, описанной в виде направленного графа рис. 5 функции выходов, представленной в таблице, в виде изменений состояний сигналов в каждом из состояний. В качестве внутренних сигналов используются регистр данных и счетчик . Основным маршрутом данных является путь от состояния 0 до состояния 4 с последующим возвращением в 0. Как видно из графа переходов на рис. 5, ведомое устройство не является программно управляемым компонентом, а также не удовлетворяет требованиям абсолютной достижимости. Пример наглядно демонстрирует систему, которая является полностью зависимой от внешних устройств, так как на программном уровне отсутствует возможность контроля за приемом и передачей данных, что накладывает жесткие ограничения на реализацию ПО. Рассмотрим взаимодействие данной модели с ПО с точки зрения задачи приема непрерывной последовательности байтов на временном интервале без учета структуры передаваемой информации, что подразумевает стационарность характеристик сигналов из на, . Так как программно доступные множества сигналов отображаются на соответствующие регистры, доступные ПО, а сигнал поступает на блок контроллера прерываний, то взаимодействие с данным устройством может производиться в двух режимах обмен по опросу флага обмен по прерыванию, выработанному по флагу . Особенностью обмена является то, что данные на выходе перезаписываются с приходом каждого нового байта, а данные для передачи захватываются с началом приема следующего. Так как блок не является программно управляемым, то задача ПО уложиться во временные рамки по приемупередаче новых данных. Для режима опроса они выражаются в периоде опроса регистра, а для режима обмена по прерываниям во времени реакции на соответствующее прерывание. Для простоты дальнейших рассуждений предположим, что данное время одинаково в обоих случаях и соответствует, тогда условием правильного приема является соблюдение условия, где время приема очередного байта. Исходя из анализа условий достижения конечного состояния, формирующего, из начального по графу переходов делается вывод, что необходимо наличие отрицательного значения на входе, а также поступление 8 сигналов . Полагая, что сигнал постоянно находится в активном состоянии на, можно утверждать, что полностью зависит от поведения сигнала . На интервале, значения длительностей передачи одного бита можно рассматривать как непрерывные случайные последовательности. В независимости от источника формирования синхросигнала передачи существует флуктуация периода синхросигнала, особенно заметная при его формировании программными способами, а не специализированной аппаратурой. Флуктуация периода влияет на время передачи байта в соответствии с графом переходов, а следовательно, и блока в целом. Модель периода синхросигнала можно представить в виде где длительность периода синхросигнала на интервале, флуктуационная составляющая, появляющаяся за счет работы аппаратных и программных средств генерации частоты. В случае флуктуаций фронтов сигнала в окрестности с сохранением длительности периода битов, называемой фазовой флуктуацией, можно утверждать, что длительность приема байта будет соответствовать Причем, исходя из анализа источников синхросигналов фазовая флуктуационная составляющая распределена по нормальному закону 7. Время также может содержать случайную составляющую, отражающую возможность передачи управления более высокоприоритетным задачам или прерываниям на, . В этом случае можно записать где интервал опроса данных, не зависящий от внешних случайных воздействий и алгоритмов планирования количество прерываний исполнения задачи опроса на интервале более высокоприоритетным процессом или прерыванием время обработки высокоприоритетной задачи. Задача анализа соотношения сводится к анализу применимости самого входного потока к функциональности системы исходя из программной модели. Для решения подобных задач удобно воспользоваться характеристиками типа пересечений уровня 8. Выбор уровня будет определяться степенью влияния случайных составляющих и возможных моделей системы. Далее рассматриваются примеры определения уровней в различных случаях. Если принять независимость от случайной составляющей и условие стационарности на, то может быть осуществлен переход к анализу только распределения флуктуационной составляющей. В данном случае предельный уровень можно определить как Пересечение этого уровня указывает на невыполнение временных требований по допустимой частоте входного потока данных, который может обработать ПО, и классифицируется как нарушение работоспособности для систем жесткого реального времени. Для систем мягкого реального времени оценивается количество таких пересечений и время нахождения в запрещенной зоне проиллюстрированные на рис. 6. При принятии гипотезы распределения флуктуационной составляющей по нормальному закону применим аналитический способ анализа работоспособности. Рассматриваем флуктуацию периода синхросигнала в виде стационарного гауссова случайного процесса с нулевым математическим ожиданием, некоторой дисперсией и плотностью вероятности 9 1 Для такой модели распределения 1 среднее число пересечений уровня траекторией случайного процесса на, определяется как 8 2 где 0 вторая производная от нормированной корреляционной функции рассматриваемого процесса при 0. Средняя длительность несоблюдения при 3 где интеграл вероятности. Второй случай это бесконечно малое влияние на общее поведение системы вследствие высокой стабильности генератора и невысоких частот передачи данных и наличие существенного влияния на . Возникновение событий, приводящее к прерыванию текущего процесса, может подчиняться закону распределения Пуассона 4 где количество событий на интервале наблюдения параметр распределения, вычисляемый как, где интенсивность потока. В этом случае допустимый уровень можно определить как 5 а среднее нормированное количество превышений уровня рассчитывается как 6 Пересечение уровня указывает на невыполнение временных требований по совместимости программного и аппаратного обеспечения и позволяет аналитически оценивать данную ситуацию на этапе проектирования. Таким образом, с помощью выражений 16 можно рассчитать вероятности выхода за уровень, среднее количество пересечений, а также время нахождения случайного процесса ниже для определения совместимости программного и аппаратного обеспечения по временным и вероятностным характеристикам с точки зрения систем реального времени. Комбинация автоматной, вероятностной и графовой составляющих в описании программной модели аппаратной части системы реального времени, предложенная в работе, формализует представление функций и логики работы с аппаратурой с точки зрения ПО. Использование приведенной совокупности формализованных описаний совместно с характеристиками типа пересечений уровней для входных воздействий позволяет разработать обобщенный комплексный подход к анализу систем реального времени и оптимизировать выбор программно-аппа ратных решений аналитическим путем на стадии проектирования. Это имеет важное практическое значение для повышения качества и сокращения времени на разработку конечной продукции. Предложенный подход проиллюстрирован простейшими примерами на основе . Но основными его приложениями являются сложные нестандартные коммуникационные интерфейсы и устройства, проектируемые для специализированных СнК. Множество асинхронных взаимодействующих процессов и сигналов, описываемых сложными законами, характерно для таких систем, поэтому анализ без соответствующих моделей затруднителен. Предложенные решения и набор моделей позволяют решить эту задачу. 