ВИРТУАЛЬНЫЕ ПРИЛОЖЕНИЯ ДЛЯ ГРИД-ВЫЧИСЛЕНИЙ 

Разработано программное обеспечение для развертывания и управления приложениями, работающими внутри виртуальных машин. Созданы и протестированы следующие приложения: вычислительный сервис и веб-сервис. Составлены профили этих приложений и изучены зависимости между производительностью приложений и ресурсами. Представлены промежуточные результаты активного исследования, направленного на изучение вопросов управления аппаратными ресурсами с использованием математической теории. Ключевые слова Ключевые слова Ключевые слова Ключевые слова Ключевые слова — виртуальные машины, виртуальные сервисы, соглашения об уровне сервиса, оптимальное управление. 

Цель настоящего исследования состоит в разработке методов и средств управления приложениями, работающими на вычислительном кластере в виртуальной среде. При работе на традиционных кластерах количество вычислительных узлов, используемых тем или иным приложением, служит в качестве основной и естественной метрики потребления ресурсов. При использовании виртуальных машин виртуальная машина ВМ программная среда, эмулирующая работу реального, физического компьютера также можно задействовать эту метрику для распределения ресурсов. Однако, в дополнение к этому, технология ВМ предлагает целый ряд новых возможностей по управлению ресурсами, которые сложно или невозможно реализовать при использовании традиционных компьютеров. В частности, виртуальную машину 1 можно приостановить и сохранить ее состояние в памяти, понизив нагрузку на процессор для последующего запуска других приложений остановить и сохранить ее состояние на диск, предоставляя, таким образом, возможность использовать ресурсы другими, более приоритетными с точки зрения пользователя, ВМ переместить с одного физического компьютера на другой запустить с некоторым числом процессоров, а затем добавлять или убирать процессоры во время работы ВМ с учетом потребностей других ВМ запустить с некоторой долей процессора и затем увеличивать или уменьшать ее, исходя из потребностей приложений, работающих внутри ВМ запустить с некоторым объемом оперативной памяти и затем, по мере необходимости, изменять его запустить с ограниченной сетевой пропускной способностью и динамически изменять этот параметр в зависимости от потребностей приложений ВМ. Столь значительная гибкость настроек ВМ способствует оптимальному использованию ресурсов, поскольку можно выделять приложению ровно столько ресурсов, сколько ему требуется, повышая, тем самым, КПД аппаратных средств. Консолидация ВМ и автоматическое перераспределение ресурсов, основанное на загруженности приложений и их приоритетах, предоставляет ИТ-администраторам возможность обеспечивать корректную работу большего числа сервисов в рамках имеющейся инфраструктуры. Использование технологий виртуализации вычислительных ресурсов актуально, в том числе, и для грид-среды, где ВМ позволяют значительно упростить задачу автоматизации распределения ресурсов и управления конфигурацией узлов грида 2, 3. Однако на нынешний день многие преимущества ВМ до сих пор используются не в полной мере. Так, например, сейчас сравнительно мало систем, применяющих ВМ для эффективного потребления простаивающих мощностей компьютеров 46. Мы считаем перспективной концепцию предоставления части аппаратных ресурсов компьютеров различным сервисам с помощью ВМ. Для грид-систем, служащих вычислительной площадкой одновременно для многих приложений, критически важно иметь формализованные средства для автоматического распределения ресурсов. То же самое верно и для крупных центров обработки данных ЦОД время и внимание системного администратора может стоить дорого, а медленная реакция на события привести к катастрофе. Проекты в этом направлении активно ведутся как в коммерческих, так и в академических организациях. Среди них можно выделить инициативы и широко известные коммерческие платформы, предназначенные для размещения сетевых сервисов на ВМ. Проект 7 предоставляет средства для создания виртуальных кластеров из ВМ. В проекте ВМ используются в грид-среде для изоляции приложений от аппаратного окружения с помощью промежуточного программного обеспечения 8. 9 это платформа для коммунальных вычислений, в которой виртуализируются такие ресурсы, как процессор, дисковая память и сетевая пропускная способность. При распределении ресурсов в виртуальном окружении иногда используются экономические модели. Так, например, в системе 10 предложен механизм, позволяющий приложениям и самой среде заключать контракты на аренду ресурсов, в то время как в проекте 11 используется модель аукциона для распределения ресурсов. Представляется возможным сделать следующий шаг вперед системы автоматического управления ресурсами могут учитывать, какую ценность имеют выделенные приложению процессорные мощности, память или другие ресурсы при текущей пользовательской нагрузке. Обладая этой информацией, можно точно определить, каким образом следует наращивать ресурсы, доступные приложению, и когда можно затребовать эти ресурсы обратно. В ходе настоящего исследования разработано программное обеспечение, которое позволяет экспериментировать с различными схемами распределения ресурсов. При этом во внимание принимаются следующие предположения любое приложение имеет набор параметров, которые однозначно определяют качество предоставляемого приложением сервиса с точки зрения конечных пользователей например, время отклика для веб-сайта. При этом параметры могут быть измерены во время работы приложения с помощью технологии ВМ различные аппаратные ресурсы могут назначаться приложениям динамически с достаточно высокой степенью точности и, как следствие, эти ресурсы могут рассматриваться как непрерывные величины. С этими предположениями задача управления качеством сервиса приложения может рассматриваться как задача непрерывного оптимального управления. Такой подход значительно отличает обсуждаемое исследование от аналогичных работ в области управления качеством сервиса 1214. В данной работе приложения рассматриваются как черные ящики, и среда времени исполнения может использовать мощные методы теории оптимального управления для реализации схем эффективного распределения ресурсов. Для того чтобы автоматизировать процесс принятия решения относительно целесообразности тех или иных ресурсов для приложения, предлагается использовать абстракцию . Среда времени исполнения может использовать информацию с датчиков, описывающих текущее состояние приложения, наряду с этого приложения для выработки алгоритма поддержки требуемого уровня сервиса приложения. В ситуации дефицита ресурсов система может отнимать ресурсы у менее важных, с точки зрения пользователей, приложений. При этом профили производительности могут быть составлены либо на испытательном стенде до запуска сервиса в эксплуатацию, либо непосредственно в процессе работы сервиса. В рамках исследования ставится задача реализовать различные типы виртуальных приложений virtual appliances и способы управления ими в условиях меняющейся нагрузки на эти приложения. Для исследования поставленных задач, прежде всего, необходима инфраструктура для развертывания, мониторинга и распределения ресурсов виртуальных приложений. В следующем разделе рассматривается архитектура реализованной среды виртуальные сервисы, служащей в качестве такой инфраструктуры. Затем необходимы модели или профили производительности приложений. Эта информация будет не только описывать оптимальный состав аппаратных ресурсов для заданной нагрузки, но также характеризировать эффект от добавления или изъятия тех или иных ресурсов у приложения. Далее приведена концепция профилей производительности. Наконец, необходим специальный регулятор, который бы использовал профили производительности и информацию времени исполнения для перераспределения ресурсов в целях оптимизации их использования. Для решения поставленных задач была реализована простая система, которая позволяет развертывать параллельные виртуальные приложения. Виртуальные приложения представляют собой либо сетевые сервисы, либо вычислительные параллельные приложения, работающие внутри одной или нескольких ВМ. Другими примерами таких приложений могут быть законченные решения в виде сервисов сетевых игр, средств обработки данных и т. п. Для управления ВМ используется Xen монитор виртуальных машин с открытым исходным кодом, однако принципы, заложенные в системе, могут быть перенесены на любую другую, аналогичную по функциональности, платформу. На рис. 1 представлены основные компоненты системы и схема их взаимодействия. Нормальная эксплуатация системы подразумевает наличие, который запускает сервисы, и пользователей, подключающихся к сервису через так называемою пары IP-адреса и сетевого порта. Среда предоставляет, в частности, такие функции запуск и останов сервиса. Запуск сервиса подразумевает запуск одной или нескольких ВМ с соответствующим виртуальным диском образом файловой системы, установку правил маршрутизации сетевого трафика и создание виртуальной сети из ВМ, предназначенных для этого сервиса выделение и высвобождение ресурсов сервиса. Запросы на ресурсы могут быть инициированы вручную поставщиком сервиса или программно специальной компонентой перенаправление сетевого трафика. Эта функция необходима для обеспечения доступа пользователей к приложениям в виртуальной среде. Также используется для балансировки нагрузки. Гибкость в управлении ресурсами ВМ играет ключевую роль в этом исследовании. В то же время существенное значение имеет возможность использовать разнообразные алгоритмы для управления всей системой в целом. В связи с этим применяется двухслойный механизм распределения ресурсов для разделения системного и сервисного слоев. На сервисном слое встраиваемый планировщик сервиса, учитывая данные мониторинга вычислительного узла, принимает решения о потребности в дополнительных или, наоборот, исключении неиспользуемых ресурсов для этого сервиса. На верхнем слое при поиске оптимального распределения ресурсов между сервисами учитывает договоренности между поставщиками сервисов и администратором, выраженные в приоритетах сервисов. Кроме того, системный планировщик может использовать профиль производительности приложения в случае, если ему требуется оценить различные варианты распределения ресурсов. Оба планировщика способны взаимодействовать между собой и использовать необходимые им данные мониторинга. Система автоматически поддерживает объем ресурсов, доступный приложению и необходимый ему для обеспечения заданного уровня сервиса. В случае выхода из строя физического компьютера, на котором находится ВМ, среда автоматически создаст аналогичную ВМ на одном из свободных компьютеров. Для отслеживания таких ситуаций используются методики, применяемые в решениях высокой доступности. В настоящий момент система поддерживает три виртуальных приложения. Для каждого приложения подготовлен соответствующий образ ВМ и средства поддержки конфигурационные файлы, планировщики и т. д.. . Это приложение 15 позволяет запрашивать различную информацию по географическим картам. В тестах использовались данные по округу Итаска штата Миннесота, полученные через Геологическую службу США. Отображаемые пользователем страницы содержат сгенерированные по запросу фрагменты карты в формате GIF. . Вычислительный сервис основан на программном обеспечении X-Com. X-Com 16 система метакомпьютинга, разработанная в МГУ им. М. В. Ломоносова. X-Com чем-то напоминает систему распределенных вычислений Condor 17, однако реализация X-Com значительно более компактна, менее требовательна к ресурсам, проще в установке и эксплуатации. Кроме того, система X-Com может работать в самых различных окружениях вычислительные кластеры, федерации кластеров, грид-среды, совокупности гетерогенных процессоров, очереди задач и т. д. . Этот сервис позволяет запускать требуемое число ВМ с поддержкой сетевого подключения между ними. В результате запуска этого сервиса создается набор виртуальных узлов, формирующих . Сетевая поддержка реализуется с помощью механизма bridging. Он позволяет включать ВМ в виртуальный кластер абсолютно прозрачным для пользователя образом. Поэтому пользователи могут взаимодействовать с узлами виртуального кластера без какой-либо дополнительной настройки, так, как если бы это был обычный компьютер. По результатам проведенных вычислительных экспериментов в виртуальном кластере было показано, что в таком окружении можно работать с полноценными MPI-приложениями, использующими несколько виртуальных узлов кластера одновременно. Кроме того, проведены успешные эксперименты по запуску параллельных программ, созданных с помощью средства быстрой разработки параллельных приложений 18. При разработке виртуальных приложений следует уделить особое внимание специфике решаемой этим приложением задачи. Как правило, дисковый образ ВМ содержит только те программные компоненты, которые необходимы для решения возложенной на приложение задачи. Такое урезание образа ВМ положительно влияет на его размер, однако, можно пойти дальше и специализировать операционную систему ВМ под нужды того приложения, которое будет эксплуатироваться на этой машине. Так, например, для суперкомпьютера Cray XT3 разработано специальное легковесное ядро ОС Linux 19, в котором полностью отключена виртуальная память и введен ряд других ограничений, которые позволяют существенно повысить производительность приложений. Профиль производительности приложения иллюстрирует зависимость между объемом ресурсов, предоставленных этому приложению, генерируемой на это приложение пользовательской активностью и уровнем сервиса, который обеспечивает это приложение пользователям. Объем ресурсов может быть выражен в абсолютных например, 1 Гбайт оперативной памяти или в относительных 53 процессора значениях. Пользовательская активность определяется для каждого приложения отдельно. Так, например, для веб-сайта пользовательская активность выражается количеством пользователей в секунду, обращающихся к этому сайту частота запросов. Наконец, уровень сервиса может быть измерен как разница между желаемым целевым состоянием сервиса и его текущим состоянием. Концепция уровня сервиса подробно обсуждается в следующем разделе. Эта зависимость может быть выражена в табличной форме. В таблице описываются некоторые типичные сценарии использования приложения с разными уровнями пользовательской активности. С помощью методов интерполяции и экстраполяции могут быть получены значения, не вошедшие в таблицу. Данные для этой таблицы могут быть собраны с помощью утилит нагрузочного тестирования, например 20. Полагаем, что при достаточном объеме данных в таблицах такой подход может дать хорошие результаты в задаче распределения ресурсов. В ходе исследования были выполнены замеры производительности с различными уровнями пользовательской нагрузки и объемом ресурсов, выделенных сервису. В настоящий момент можно варьировать следующие параметры ВМ объем оперативной памяти, число виртуальных процессоров, используемых ВМ VCPU, и долю процессорного времени, определяющую максимальное значение в процентах процессорного времени физического компьютера, которое может занимать ВМ. Пользовательская нагрузка в каждом тестовом запуске задавалась таким образом, чтобы максимизировать использование ресурсов, предоставленных сервису, и в то же время минимизировать число сетевых ошибок таких как, например, закрытие соединения по тайм-ауту. Мы называем такие уровни нагрузки . Это такая максимальная пользовательская нагрузка, которую сервис в состоянии обработать корректно. Профилировка производительности WebMapServer показала, что это приложение слабо чувствительно к объему оперативной памяти было отмечено незначительное отклонение максимальной частоты запросов рис. 2. Увеличение числа же время параметр, отвечающий за долю физического процессора, предоставляемую ВМ, оказывал наибольшее влияние на производительность приложения. Зависимость между максимальной частотой запросов и долей процессора оказалась почти линейной. Как можно видеть на рис. 4, при нагрузке в 10 запросов в секунду уровень сервиса весьма чувствителен к доле процессорного времени необходимо, по меньшей мере, 70 процессорного времени для обработки запросов за разумное время около 1 с. В то же время нагрузка в 1 запрос в секунду может быть корректно обработана и при 10 процессорного времени. Профили производительности могут использоваться для оценки различных вариантов размещения ресурсов без непосредственного воздействия на производительность приложений, работающих в системе. Рассмотрим ситуацию, когда владелец веб-сайта желает поддерживать среднее время отклика своего сайта ниже некоторого порогового значения например, менее 1 с. В случае, если этот веб-сайт испытывает высокую пользовательскую нагрузку, могут потребоваться дополнительные вычислительные ресурсы для поддержания уровня сервиса в требуемом интервале. Такой уровень сервиса называется . В описанном сценарии вполне естественно обратиться к помощи автоматических средств, поскольку ручное вмешательство может быть слишком медленным и порождать ошибки. Одна из возможных схем управления уровнем сервиса показана на рис. 5. Это классическая схема управления с обратной связью. Для того чтобы повторно использовать алгоритмы, заложенные в, работающем на системном уровне, необходимо иметь средства для преобразования приложения таких как, например, время отклика в абстрактное значение уровня сервиса 21. Именно для этой цели вводится, идея которой состоит в следующем. Функция принимает наблюдаемые параметры приложения в качестве входного аргумента и возвращает значение уровня сервиса в интервале от 0 до 100 . Затем эти значения передаются оптимизатору, который, в свою очередь, отыскивает оптимальное распределение ресурсов между одним или несколькими виртуальными приложениями. виртуальных процессоров не увеличило, а наоборот снизило производительность рис. 3. Такое поведение, очевидно, вызвано тем, что приложение является однопоточным и, как следствие, не использует дополнительные процессоры. В то С этой целью уровни сервисов приложений максимизируются путем вариации объема ресурсов приложения. Функция уровня сервиса определяется уникальным образом для каждого типа виртуального приложения, поскольку наблюдаемые параметры и целевые уровни приложений различаются. Таким образом, для приложения веб-сайт, уровень сервиса которого определяется как ограниченное снизу некоторой величиной среднее время отклика, наблюдаемые параметры должны включать по меньшей мере текущее время отклика. В то же время для вычислительного сервиса с предельным сроком, к которому должен быть выполнен расчет дедлайн, наблюдаемые параметры описывают среднюю скорость счета. В этом случае оптимальной будет такая скорость вычислений, при которой расчет завершится к назначенному сроку и при этом не будут использованы лишние ресурсы. Поскольку используемые функции уровня сервиса непрерывны, можно применять методы непрерывной оптимизации в оптимизаторе. В общем случае функция уровня сервиса имеет вид переключателя и записывается в форме где уровень сервиса наблюдаемые параметры например, время отклика, и параметры функции, позволяющие адаптировать ее под конкретное приложение. Мы предлагаем использовать значение 50 в качестве целевого уровня сервиса для любого приложения. В этой точке соглашения об уровне сервиса будут строго соблюдаться. Значение 50 выбрано потому, что функция в окрестности этой точки изменяется максимально быстро и, следовательно, здесь оптимизационные алгоритмы будут наиболее эффективны. Изменяя параметры функции уровня сервиса, можно задавать мягкие и жесткие требования к уровню сервиса. Рассмотрим функцию 1 с параметрами 10, 1 и 0,5. Эти параметры используются для виртуального приложения вебсайт. Эта функция равна почти 100 при 1 с и быстро уменьшается до нуля при времени отклика больше 1,5 с рис. 6. Параметры кривой должны быть тщательным образом подобраны так, чтобы соответствовать характеристикам производительности приложения и его целевому уровню сервиса. Концепция уровня сервиса может быть естественным образом обобщена для случая многих наблюдаемых параметров, когда кроме времени отклика отслеживается, например, процент сетевых ошибок. Очевидно, что этот подход применим не только для веб-сайтов, а может быть естественным образом расширен на другие типы приложений. В частности, можно использовать его для очередей задач. Как было отмечено раньше, поставщик сервиса может указать дедлайн, к которому задачи в очереди должны быть рассчитаны рис. 7. Измерив примерную вычислительную сложность задач, можно посчитать текущую скорость расчета и найти оценочное время завершения. Если системе удается решить задачу в срок, тогда уровень сервиса этого приложения равен 50 . В противном случае он будет снижаться до 0, т. е. когда результаты вычислений будут уже не нужны например, прогноз погоды на завтрашний день, полученный три месяца спустя. В реальных условиях система должна быть способна работать с несколькими приложениями одновременно. Агрегация уровней сервиса в один может быть выполнена с помощью взвешенного произведения где общий уровень сервиса системы относительные веса приоритеты приложений уровни сервисов приложений. Таким образом, максимизируя, система должна форсировать завершение сервиса прогноза погоды завтрашнего дня к полудню сегодняшнего ценой, возможно, некоторого неудобства утренних посетителей вебсайта. Ряд методов оптимального управления может быть использован для максимизации, например динамическое программирование. В настоящее время используется простая одномерная условная оптимизация для поиска оптимального объема ресурсов, необходимого приложению. Рассмотрим пример с вычислительным сервисом. Алгоритм, описанный ниже, пытается найти минимальную долю процессора, при которой будут выполняться соглашения об уровне сервиса, используя метод двоичного поиска. На первом этапе находятся границы интервала возможных долей процессора, среди которых будет производиться поиск. Поиск начинается с некоторой грубой оценки объема требуемых приложению ресурсов. Если текущий уровень сервиса приложения ниже целевого случай I, тогда значение оценки будет выше текущего объема доступных приложению ресурсов. В противном случае, этот параметр будет снижаться случай II. Далее этот шаг повторяется с увеличивающимся значением оценки, причем на каждом шаге оценка будет увеличиваться вдвое, до тех пор, пока текущий уровень сервиса приложения не достигнет некоторого значения, близкого к целевому уровню сервиса выше целевого уровня сервиса в случае I и ниже в случае II. На втором этапе алгоритм отыскивает в интервале, образованном двумя последними значениями, полученными на предыдущем этапе, величину оптимальной доли процессора для этого приложения. Для ускорения процесса используется метод половинного деления. На этом шаге доля процессора в распоряжении приложения последовательно увеличивается или уменьшается и замеряется новый уровень сервиса приложения. В случае, если приложению требуется более одного процессора, автоматически производится запуск дополнительных ВМ с этим приложением. Этот алгоритм периодически запускается через равные интервалы времени. Таким образом, уровень сервиса приложения поддерживается в заданном интервале автоматически. Существующая реализация, безусловно, является весьма упрощенной, тем не менее, все же применима к различным приложениям. Так, например, этот алгоритм использовался для динамического распределения ресурсов вычислительного сервиса X-Com в процессе его работы. Приложение X-Com было запущено с некоторым предустановленным дедлайном, к которому требовалось завершить расчет, и объемом ресурсов, заведомо недостаточным для выполнения поставленной задачи. Однако, используя описанный выше алгоритм, система увеличила объем ресурсов приложения так, чтобы все задачи были посчитаны точно к сроку. Эксперименты показали отклонение фактического времени завершения от запланированного лишь на 0,5 . Например, задача, рассчитываемая в течение 40 мин, была закончена лишь на 1015 с позже заданного срока. В ходе исследования была разработана платформа для управления приложениями, работающими в ВМ Xen. С помощью компонент системы можно запускать и останавливать сервисы, динамически увеличивать или уменьшать объем доступных сервисам ресурсов. Представлена простая модель автоматизации управления уровнем сервиса приложений, использующая методы условной оптимизации. На базе платформы был протестирован ряд приложений в целях составления профилей производительности для последующей разработки более точных и эффективных моделей управления ресурсами виртуальных приложений. Используемый подход не привязан исключительно к виртуальным сервисам и может быть использован в других средах, таких как Virtual Workspaces или Cluster-on-Demand. Можно возразить, что изменение доли физического процессора, предоставленного ВМ, в процессе работы приложения или полный отказ ВМ может нанести ущерб производительности вычислительных приложений, работающих в таком окружении. Действительно, большинство существующих сегодня MPI-приложений не смогут работать в такой среде эффективно, поскольку они были спроектированы для работы в однородных вычислительных системах и не смогут корректно работать в случае аварийного завершения даже одного параллельного процесса. Однако более совершенные параллельные приложения, учитывающие неоднородность и нестабильность вычислительной среды, смогут работать в таких условиях. В качестве примера можно упомянуть разработку 22 это универсальная среда общего назначения, которая могла бы справиться с дополнительной сложностью технологий виртуализации. Учитывая те огромные усилия, которые прилагают участники ИТ-сообщества для улучшения высокоуровневых средств параллельного программирования, можно ожидать, что в будущем такие приложения получат широкое распространение. 