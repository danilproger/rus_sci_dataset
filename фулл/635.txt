ПРОГРАММНЫЕ И АППАРАТНЫЕ СРЕДСТВА НАСЛЕДОВАНИЕ АВТОМАТНЫХ КЛАССОВ  С ИСПОЛЬЗОВАНИЕМ ДИНАМИЧЕСКИХ ЯЗЫКОВ  ПРОГРАММИРОВАНИЯ (НА ПРИМЕРЕ ЯЗЫКА RUBY) 

Рассматриваются достоинства применения динамических языков программирования для реализации наследования автоматных классов. Предлагаемый подход иллюстрируется примером реализации функциональности регистрации пользователей на сайте. Ключевые слова  — объектно-автоматное программирование, наследование автоматных классов, динамические языки программирования. 

С каждым годом динамические языки программирования все шире используются для разработки программного обеспечения. Так, в 2008 г. отношение динамических языков к языкам со статической типизацией составило около 40 1. Динамические языки программирования позволяют расширять программу во время ее выполнения за счет создания новых методов и классов, а также использования макросов 2. Язык Ruby является динамическим и входит в десятку самых популярных языков программирования 2008 г. 1. На нем, в частности, разрабатывается фреймворк для создания веб-приложений Ruby on Rails 3, который является Open Source-проектом. Его особенность наличие гибкого механизма расширения функциональности с помощью плагинов компонентов, которые можно добавить в приложение Ruby on Rails. Одним из таких плагинов является Restful-authentication 4, расширяющий веб-приложение функциональностью регистрации пользователей. Этот плагин применяется в 96 5 приложений Ruby on Rails и реализован с использованием конечных автоматов. Рассматриваемый плагин использует библиотеку Acts as State Machine 6, которая не позволяет сохранить иерархию родительского автомата при наследовании и не имеет вложенных групп состояний. Это приводит к дублированию кода, затрудняет отладку, а также делает невозможным изоморфное построение модели по коду при необходимости. В работе 2 был предложен метод наследования автоматных классов, для поддержки которых разработана библиотека State Machine on Steroids. Она использует расширенную динамическими свойствами объектно-ориентированную парадигму, суть которой состоит в том, что автоматные классы создаются во время работы программы. Использование этого метода, по мнению авторов, позволит устранить указанные выше недостатки реализации плагина Restfulauthentication. Цель настоящей работы сравнение указанных подходов к наследованию автоматных классов на примере плагина Restful-authentication. В качестве графической модели предлагается использовать диаграмму состояний UML 2 7, расширенную графической нотацией для наследования автоматных классов, предложенной в работе 8, так как в UML 2 невозможно отобразить наследование автоматов. В примере использования расширенной графической нотации рис. 1 отображен автоматный класс унаследованный от родительского автоматного класса, который содержит в себе следующие изменения добавлена новая группа, состоящая из двух состояний, . Состояние является начальным переопределена группа начальным состоянием является . Добавлен новый переход из этой группы в новую группу добавлено новое состояние, которое имеет переход на группу . Рассмотрим плагин Restful-authentication подробнее. Пусть, например, для успешной регистрации пользователь должен выполнить три действия 1 заполнить регистрационную форму на сайте 2 получить письмо с кодом активации 3 подтвердить регистрацию, введя полученный код в специальном разделе сайта. В случае, если пользователь не зарегистрируется в течение заданного времени или несколько раз неверно введет код активации, он будет заблокирован и не сможет больше зарегистрироваться на сайте. Администратор может как разблокировать пользователя, так и удалить его из системы. Автомат регистрации базового пользователя, представленный на рис. 2 с помощью расширенной графической нотации, состоит из группы и состояний и . Вложенная группа включает три состояния, и, последнее из которых является начальным. В этом автомате определены следующие переходы удалить пользователя из системы перевести пользователя в состояние ожидания в случае следующих событий пользователь не активировал аккаунт в течение семи дней с момента регистрации пользователь ввел три раза неверный код активации пользователь ввел регистрационные данные, однако еще не подтвердил регистрацию пользователь ввел регистрационные данные и успешно подтвердил активацию администратор может предоставить пользователю возможность повторно зарегистрироваться. Автомат рис. 3 унаследован от автомата и обладает следующей функциональностью. 1. Пользователь после ввода кода активации должен совершить два дополнительных действия корректно распознать Captcha для удаления нежелательных автоматических регистраций и заполнить данные в пользовательском разделе. Для этого создадим вложенную группу . 2. Удаление пользователя проходит в два этапа на первом пользователь блокируется, однако его сообщения остаются в системе, а на втором из системы удаляется не только пользователь, но и все его данные. Для этого создадим новую вложенную группу . Рассмотрим класс базового пользователя в плагине Restful-authentication с использованием библиотеки Acts as State Machine. Она предоставляет четыре метода устанавливает начальное состояние автомата создает состояние. В качестве необязательных аргументов принимает лямбда-функции 2 действия при входе в состояние и при выходе из него именованный переход определяет, из какого и в какое состояние будет осуществлен именованный переход. В качестве необязательного аргумента метод принимает лямбда-функцию условие, при котором осуществляется переход. Эта библиотека не поддерживает вложенные группы. Поэтому для изоморфного переноса требуется модифицировать автомат, как показано на рис. 4. Ниже приведен код на языке Ruby, который реализует эту модель Создадим новый класс рис. 5, который будет наследован от класса . Он наследует всю внутреннюю структуру класса созданную методами библиотеки Acts as State Machine. Так как эта библиотека не поддерживает вложенные группы, то иерархия родительского автомата в классе будет потеряна. Ниже приведен код, реализующий эту модель Недостатками этого решения являются потеря иерархии родительского автомата, при этом автоматический изоморфный перенос кода в модель невозможен отсутствие вложенных групп состояний, что приводит к увеличению необходимого числа переходов. Для устранения недостатков предыдущего решения авторами разработана библиотека State Machine on Steroids. Она использует динамические языки программирования для реализации классов автомата. Библиотека предоставляет шесть методов, из которых четыре аналогичны предоставляемым библиотекой Acts as State Machine, а также метод принимает в качестве аргумента блок, для которого определен DSL-синтаксис Domain Specific Language автомата 2 создание вложенной группы состояний. Реализуем автомат, представленный на рис. 2 В этом коде каждый вызов метода библиотеки State Machine on Steroids создает класс. Благодаря этому при наследовании сохраняется структура родительского автомата . Реализуем наследованный класс см. рис. 3 При использовании библиотеки State Machine on Steroids удалось устранить указанные недостатки библиотеки Acts as State Machine при наследовании сохраняется иерархия родительского автомата. Это позволяет обратиться к ранее созданным классам, например, к классу, а также решить задачу автоматического изоморфного переноса кода в модель реализован метод для создания групп состояний, что сокращает необходимое число переходов при описании автомата в исполняемом коде. Библиотека State Machine on Steroids сохраняет все достоинства динамических и объектноориентированных свойств языка Ruby, такие как возможность создания кода в терминах предметной области. В результате эксперты могут понимать, проверять и модифицировать написанный код обеспечение возможности разработки самодокументированного кода повышение качества, надежности и сопровождаемости программ сохранение иерархии автоматов при наследовании. Еще одним достоинством библиотеки State Machine on Steroids является возможность изоморфного переноса графической нотации в код. При этом, в частности, удается исключить дублирование кода, которое возникает при использовании библиотеки Acts as State Machine при реализации групповых переходов. В таблице показано необходимое число переходов и состояний для реализации автомата, представленного на рис. 3, с использованием указанных выше библиотек. Отметим, что библиотека State Machine on Steroids за счет исключения избыточности упрощает код В настоящей работе были рассмотрены две библиотеки. Их сравнение выполнено на примере модификации функциональности регистрации пользователей в плагине Restful-authentication. Библиотеки позволяют переносить графическую нотацию в программный код. При этом разработанная библиотека State Machine on Steroids сохраняет иерархию родительского автомата при наследовании и обеспечивает изоморфную реализацию вложенных групп состояний. Кроме того, при использовании ее возможен реверсинжениринг автоматический изоморфный перенос кода в графическую модель. 