ИНФОРМАЦИОННЫЕ КАНАЛЫ И СРЕДЫ ОПТИМАЛЬНОЕ УПРАВЛЕНИЕ N FIFO-ОЧЕРЕДЯМИ   НА БЕСКОНЕЧНОМ ВРЕМЕНИ 

Исследуются методы представления n FIFO-очередей в памяти размером m единиц. Решаются задача оптимального разбиения памяти между очередями в случае последовательного циклического представления очередей и задача анализа связанного представления очередей. В качестве математических моделей предложены  случайные блуждания по целочисленной решетке в различных областях n-мерного пространства. Задачи решаются с помощью аппарата регулярных цепей Маркова. Ключевые слова  — FIFO-очередь, связанный список, случайное блуждание, регулярные цепи Маркова. 

Во многих приложениях требуется работа с несколькими FIFO-очередями, расположенными в общем пространстве памяти. Для этого применяют различные программные или аппаратные решения 13. В данной статье предлагаются математические модели для последовательного циклического и связанного способов представления очередей 1. В обоих способах представления для каждой очереди нужны два указателя на начало и конец. В первом способе элементы равных длин располагаются циклически в последовательных адресах участка памяти, выделенного очереди. Во втором каждая очередь представлена в виде односвязанного списка элементов, и переполнение памяти наступает тогда, когда список свободных элементов пуст и требуется включить элемент в какуюлибо очередь. В обоих способах операции включения и исключения выполняются за время 1. В качестве критерия оптимальности рассмотрена минимальная доля потерянных элементов при бесконечном времени работы очередей. Эту величину разумно минимизировать, когда переполнение очереди является не аварийной, а стандартной ситуацией здесь мы подчеркиваем, что в некоторых приложениях при переполнении очереди работа программы заканчивается, и тогда в качестве критерия оптимальности надо рассматривать максимальное среднее время до переполнения памяти. То есть если очередь занимает всю предоставленную ей память, то все последующие элементы, поступающие в нее, отбрасываются до тех пор, пока не появится свободная память т. е. до тех пор, пока не произойдет исключение элемента из очереди. Такая схема применяется, например, в работе сетевых маршрутизаторов 3 в том случае, когда по мере увеличения трафика очередь на исходящем интерфейсе маршрутизатора заполняется пакетами. Такое поведение маршрутизатора называется сбросом хвоста. Потери пакетов приводят к нежелательному результату, поэтому число таких ситуаций необходимо свести к минимуму. Мы в этой работе строим математические модели в виде случайных блужданий по целочисленной решетке. Первоначально такие модели в виде случайного блуждания в треугольнике 47 были построены для решения задачи анализа процесса работы с двумя стеками, растущими навстречу друг другу 1. В этих моделях предполагается, что на каждом шаге дискретного времени с заданными вероятностями происходят некоторые операции со стеками. Время выполнения операций это не случайная величина, а константа, поэтому фиксированным является и шаг времени. Рассмотрены случаи последовательного представления очередей для 2 8 и 3 9. В данной статье рассмотрены последовательный и связанный способы представления FIFO-оче редей для случая произвольного . Необходимо определить, как распределить память между очередями в последовательном способе организации и какой из способов организации очередей является оптимальным. В работе будем придерживаться следующих обозначений размер памяти количество стеков иили очередей в быстрой памяти вероятность включения элемента в -ю очередь вероятность извлечения элемента из -й структуры данных вероятность того, что не произойдет операции включения или извлечения размер памяти, выделенной для очереди с номером при последовательном представлении текущая длина структуры данных с номером отношение размера узла к размеру указателя для связанного представления доля времени, которую проводит очередь в состоянии сброса хвоста. Рассмотрим одну FIFO-очередь, расположенную в быстрой памяти размером . В каждый момент дискретного времени может произойти одна из следующих операций включение элемента с вероятностью, исключение элемента с вероятностью, очередь не изменяет своей длины с вероятностью, где 1. Если происходит включение элемента при полностью заполненной памяти, то он считается потерянным. Требуется определить долю времени, в течение которого происходят потери элементов, при бесконечном времени работы. Для описания процесса работы построим однородную регулярную цепь Маркова 10 с 2 состояниями, где состояния с номерами 0, ..., соответствуют количеству элементов, находящихся в очереди. Состояние 1 соответствует сбросу хвоста, т. е. пока процесс находится в этом состоянии, происходит потеря поступающих в очередь элементов. Пусть процесс находится в состоянии 1, т. е. очередь заполнила всю выделенную память и произошла попытка включения еще одного элемента. Тогда с вероятностью процесс остается на месте, так как при попытке включения элемента в переполненную очередь он будет потерян и для процесса блуждания ничего не изменится, с вероятностью процесс перейдет в состояние 1, т. е. исключается элемент из переполненной очереди и появляется одна свободная позиция в памяти, с вероятностью процесс перейдет в состояние . Переход процесса из состояния в состояние определяется следующими правилами Построим матрицу переходных состояний . Для данной цепи она имеет вид У построенной цепи Маркова существует предельный вектор, ..., который удовлетворяет уравнению По закону больших чисел, значение является долей времени, которое процесс проводит в состоянии . Тогда является долей времени, которое процесс проводит в состоянии сброса хвоста при бесконечном времени работы. Построим систему уравнений для определения предельных вероятностей Вычеркнем первую строчку и добавим условие нормировки 1 Найдем по формуле Крамера . Разложим определитель по последнему столбцу Для вычисления прибавим к первой строке строки с номерами 2, ..., ко второй с номерами 3, ..., и т. д. Учитывая равенство 1, получаем Рассмотрим случай . Умножим первый столбец на и прибавим ко второму столбцу, затем умножим второй столбец на и прибавим к третьему. Продолжим эту операцию до столбцов с номерами и 1. Потом столбец с номером умножим на и прибавим к столбцу с номером 2. Тогда где сумма геометрической прогрессии Умножим столбец с номером 1 на 1 и прибавим к столбцу с номером 2, после чего получим диагональную матрицу, поэтому окончательно определитель Тогда Если, то будет суммой арифметической прогрессии и . Тогда Окончательно получаем Рассмотрим FIFO-очередей, расположенных в быстрой памяти размером . Для последовательного представления каждой очереди необходимо выделить единиц памяти, где . Если очередь занимает всю предоставленную ей память, то все последующие элементы, поступившие в нее, отбрасываются до тех пор, пока не появится свободная память. Рассмотрим очередь с номером . Вероятность того, что ее длина останется прежней, будет В этом случае долю времени, которое процесс проводит в состоянии сброса хвоста, для -й очереди можно вычислить по формуле . Тогда общая доля времени, проведенного в состояниях сброса хвоста Задача заключается в том, чтобы минимизировать долю потерянных элементов при переполнении какой-либо из очередей. Другими словами, необходимо определить такие значения, 1, 2, ..., чтобы доля времени, проведенного в состояниях сброса хвоста, была минимальной. Рассмотрим случай, когда . Тогда доля времени, проведенного в состояниях сброса хвоста, равна Таким образом, необходимо найти Рассмотрим функцию и найдем ее минимум при условии 0, 1, 2, ..., 1, . Функция дважды непрерывно-дифференцируема на рассматриваемом множестве Найдем точку, подозрительную на экстремум, из условия Введем новые переменные 1. Для каждого извлечем квадратный корень из обеих частей уравнения. Учитывая, что обе части неотрицательные, получаем Рассмотрим уравнения при 1 и при 2 Вычтем второе уравнение из первого Получаем Аналогично выразим остальные переменные через Подставим в уравнение при 1 Найдем Получаем точку, подозрительную на экстремум Покажем, что эта точка является точкой минимума. Для этого по критерию Сильвестра нужно показать, что Введем обозначения Очевидно, что 0 и 0. Покажем, что определитель 0, где По методу математической индукции 1 база индукции 1 0 2 пусть верно при 3 докажем при 1 Значит, точка является единственной точкой минимума функции, ..., . Следовательно, в этой точке функция достигает своего наименьшего значения. Поскольку должны быть целыми, то значения необходимо округлить до ближайшего целого и перебрать значения, удовлетворяющие условию Наименьшая доля времени, проведенного в состояниях сброса хвоста Введем обозначение где доля времени, которое процесс проводит в состоянии сброса хвоста, при оптимальном разбиении памяти размером между очередями доля времени, в течение которого происходит потеря элементов только для -й очереди при размере памяти . Рассмотрим рекуррентную формулу Начальное значение равно по формуле т. е. при отсутствии памяти любая попытка включения элемента в одну из очередей будет приводить к его потере. Был реализован эффективный алгоритм решения задачи на основе предложенной модели динамического программирования, который за время вычисляет оптимальное разбиение памяти и долю времени, проведенного в состояниях сброса хвоста. Также была построена математическая модель этого процесса в виде случайного блуждания по целочисленному -мерному параллелепипеду с вершиной в начале координат, ребрами, параллельными осям координат, и длинами ребер 1, ..., 1. Гиперплоскости соответствуют состояниям сброса хвоста. Была предложена нумерация состояний и на ее основе разработан алгоритм генерации соответствующей цепи Маркова и решения задачи с использованием результатов теории регулярных цепей Маркова. Этот метод решения задачи будет подробно изложен далее на примере анализа связанного представления очередей. Метод динамического программирования в данном случае приводит к более эффективному алгоритму. При связанном представлении каждая очередь хранится в виде связанного списка, в котором 1 -я часть памяти тратится на хранение указателей. Пусть 1 1 . В качестве математической модели рассмотрим блуждание по целочисленной -мерной пирамиде с ребрами 0, 0, ..., 0 и основанием . Для каждого состояния, ..., на плоскости, т. е. когда вся память уже занята, введем состояние соответствующее сбросу хвоста. В это состояние можно попасть в случае попытки включить элемент в любую из очередей, когда вся память занята. Переход процесса из состояния, ..., определяется по следующим правилам На плоскости количество состояний сброса хвоста Перечислим все состояния области блуждания 0, 0, 0, ..., 0, 0, 1, 0, 0, ..., 0, 0, ..., 1, 0, 0, ..., 0, 0, 0, 0, ..., 0, 0 0, 1, 0, ..., 0, 0, 1, 1, 0, ..., 0, 0, ..., 2, 1, 0, ..., 0, 0, 1, 1, 0, ..., 0, 0 0, 1, 0, ..., 0, 0, 1, 1, 0, ..., 0, 0 0, 0, ..., 0, 0 0, 0, 1, ..., 0, 0, 1, 0, 1, ..., 0, 0, ..., 2, 0, 1, ..., 0, 0, 1, 0, 1, ..., 0, 0 0, 1, 1, ..., 0, 0, 1, 1, 1, ..., 0, 0, ..., 3, 1, 1, ..., 0, 0, 1, 1, 1, ..., 0, 0 0, 0, 1, ..., 0, 0, 0, 0, ..., 0, 0 0, 0, 0, ..., 0, 1, 1, 0, 0, ..., 0, 1, ..., 2, 0, 0, ..., 0, 1, 1, 0, 0, ..., 0, 1 0, 1, 0, ..., 0, 1, 1, 1, 0, ..., 0, 1, ..., 3, 1, 0, ..., 0, 1, 2, 1, 0, ..., 0, 1 0, 2, 0, ..., 0, 1, 1, 2, 0, ..., 0, 1 0, 1, 0, 0, 1 0, 0, 0, ..., 0, . Введем нумерацию этих состояний, начиная с 0. Для того чтобы построить матрицу переходных вероятностей, построим функцию, где, ..., текущие длины очередей номер состояния. Будем искать ее в виде, 0, 0, 0, 0, 0, 0, 0, 0, 0, т. е. будем увеличивать значения аргументов, начиная с последнего, и вычислять, на сколько увеличится значение функции. Увеличение значения разности функций 0, 0, 0, 0, 0, 0, 0, зависит от номера, от значения и от суммы, т. е. от количества уже занятых ячеек памяти. Теперь пронумеруем состояния сброса хвоста таким образом, чтобы состоянию на плоскости с меньшим номером соответствовало состояние сброса хвоста с меньшим номером. На рисунке показан пример нумерации состояний при 2, 4. Для нахождения доли времени, проведенного в состояниях сброса хвоста, необходимо найти предельный вектор и просуммировать его компоненты с номерами от до В приведенном примере необходимо найти сумму . Был разработан комплекс программ для ЭВМ, который реализует вышеописанные алгоритмы нахождения доли времени, проведенного в состояниях сброса хвоста. Приведем некоторые численные результаты. Сравним последовательное и связанное представление очередей с точки зрения доли времени, в течение которого происходят потери пакетов табл. 1. В строке указана минимальная доля времени, проведенного в состояниях сброса хвоста, для последовательного представления. В строке указана доля времени, проведенного в состояниях сброса хвоста, для связанного представления, когда на связи тратится 12 часть памяти размер информационной части равен размеру указателя, в строке когда на связи тратится 13 часть памяти размер указателя равен 12 размера информационной части, в строке когда на связи тратится 15 часть памяти размер указателя равен 14 информационной части, в строке когда на связи тратится 19 часть памяти размер указателя равен 18 информационной части. На практике вероятности включения и исключения, которые считались известными, не всегда могут быть вычислены. В этом случае будет логичным разделить память поровну между всеми структурами данных в случае последовательного представления. В табл. 2 сравнивается связанное и последовательное представление в том случае, если память разделена поровну между очередями. B строке указана доля времени, проведенного в состояниях сброса хвоста, когда память разделена поровну между очередями, в строке указана минимальная доля времени, проведенного в состояниях сброса хвоста, когда память разделена оптимально. Строки, такие же, как в табл. 1. Из приведенных таблиц видно, что связанное представление предпочтительнее использовать, если вероятности включения элемента в очереди меньше, чем вероятности исключения, и на связи тратится 13 часть памяти или меньше. В остальных случаях лучше использовать последовательное представление, даже если вероятностные характеристики очередей заранее неизвестны и разбиение памяти может быть неоптимальным. Работа выполнена при финансовой поддержке РФФИ, грант 09-01-00330-а. 