ТЕСТИРОВАНИЕ МИКРОПРОЦЕССОРОВ И ИХ RTL-МОДЕЛЕЙ ПРИЛОЖЕНИЯМИ ПОЛЬЗОВАТЕЛЯ ПОД ОС LINUX 

Рассматриваются методы верификации и тестирования современных микропроцессоров. Особое внимание уделяется методу тестирования RTL-моделей (модель на уровне регистровых передач), ПЛИС-прототипов и тестовых кристаллов микропроцессоров реальными пользовательскими приложениями под операционную систему Linux. Описываются взаимосвязь этих объектов и степень применимости обсуждаемой методики к каждому из них в контексте общего плана верификации. Перечисляются достоинства и недостатки метода. Так как скорость выполнения программ на RTL-модели микропроцессора крайне мала, предлагается использовать механизм среза-восстановления состояния модели микропроцессора для  разбиения всей последовательности команд загрузки операционной системы на множество подпоследовательностей, которые выполняются параллельно на разных вычислительных устройствах. Наличие огромного количества свободно распространяемых программ с открытым исходным кодом, большинство из которых имеют встроенные автоматизированные механизмы самопроверки, делает возможным выделение запуска приложений под ОС Linux в отдельный подход к тестированию универсальных микропроцессоров. Применение описываемого метода не исключает, а лишь дополняет современный набор методов и средств тестирования и верификации микропроцессоров и их моделей. Многие авторитетные фирмы-разработчики микропроцессоров признают полезность как можно более ранней загрузки какой-либо операционной системы на разрабатываемой RTL-модели. Успешность этой операции зачастую дает разработчикам больше уверенности в правильности уже проделанной работы, чем десятки тысяч прошедших тестов. В статье рассматривается пример репрезентативного тестового набора, позволяющего использовать готовые пакеты программ пользователя, приводятся примеры источников тестовых программ. Кроме того, предложен общий алгоритм действий при нахождении ошибки в микропроцессоре, даются примеры найденных ошибок в микропроцессоре с архитектурой MIPS64.

 По данным различных источников, трудозатраты на верификацию и валидацию микропроцессора МП составляют до 70 общих трудозатрат на разработку. Так как современные микропроцессоры постоянно усложняются, для проведения работ по верификации в заданное время требуется применение разнообразных методов и средств. Основные усилия инженеров-верификаторов направлены на нахождение ошибок на стадии RTL-модели. Причина в том, что время нахождения и стоимость исправления таких ошибок на порядки ниже времени и стоимости, затрачиваемых на правку ошибок, найденных на второй и третьей стадиях. Однако верификация RTLмодели имеет ряд недостатков. Главный из них очень низкая скорость выполнения инструкций на модели, которая приводит к невозможности выполнения достаточного количества тестов. Поэтому верификацию и тестирование следует продолжать на стадиях ПЛИС-прототипа, тестового кристалла и после выпуска партии готовых СБИС. На второй и третьей стадиях верификации благодаря возросшей скорости появляется возможность выполнить гораздо более объемные тесты, существенно увеличить покрытие кода RTL-модели. Состоятельность этого подхода подтверждает информация различных фирм-изготовителей об ошибках в уже выпущенных микропроцессорах . В данной статье исследуются методы верификации и тестирования современных микропроцессоров. Обзор тестов верификации Тесты, разрабатываемые для верификации микропроцессоров и их RTL-моделей, делятся на четыре основные группы. 1. Тесты разработчика тесты, направленные на инструкцию, набор инструкций микропроцессора или на какой-либо функциональный блок. Такие тесты почти всегда создаются со встроенным механизмом самопроверки и развитой диагностикой ошибочных ситуаций. Как правило, разрабатываются на языке ассемблера или С. 2. Псевдослучайные тесты тесты, созданные с помощью генератора тестов на основе шаблона. Метод основан на покомандном сравнении трасс RTL-модели с эталонным эмулятором, который называют golden model . 3. Переборные тесты тесты для одной или нескольких инструкций, которые создаются автоматически. 4. Запуск одной или нескольких ОС и приложений под ОС. В настоящей работе предлагается развитие последнего метода запуска ОС и существующего ПО под ОС. Этот метод имеет следующие достоинства. ОС является большим программным комплексом, использующим различные особенности микропроцессорной архитектуры. Поэтому сама по себе ОС большой архитектурный тест. Пользовательские пакеты программ под ОС, как правило, содержат встроенные в дистрибутивы пакетов наборы готовых самопроверяющихся тестов. Найденные в результате прохождения тестов ПО ошибки служат основой для создания шаблонов псевдослучайных тестов. Простота процесса запуска ПО и тестов под него означает невысокие накладные расходы на один тест. Возможно изучение производительности процессора, например, анализ трасс на потактовом эмуляторе и результатов тестов, измеряющих производительность на готовом кристалле. Возможно решение задач на родной платформе, таких как программирование в среде ОС специализированных сопроцессоров, входящих в состав разрабатываемого микропроцессора. Можно выбрать из множества программ пользователя подходящий набор тестов для создания блока функционального контроля, на котором проводятся приемочные испытания изготавливаемых СБИС микропроцессоров. Отсутствие сбоев на выбранных стрессовых тестах за определенный период времени позволяет судить о стабильности работы системы в целом, особенно на предельных частотах работы ядра микропроцессора. Частный случай применения метода тестирования микропроцессоров готовыми пользовательскими приложениями описывается создателями процессора OpenRISC 1200 3. Авторы статьи используют для верификации лишь внутренние тесты компилятора GCC, обходясь при этом без ОС . Этот подход позволяет запускать в общей сложности более 80 000 тестов для тестирования микропроцессора. Однако есть возможность расширить данный подход, включив в перечень тестов загрузку ОС, другое ПО и его внутренние проверки. Наличие огромного количества свободно распространяемых программ с открытым исходным кодом, большинство из которых имеют встроенные механизмы самопроверки, делает возможным выделение запуска приложений под ОС Linux в отдельный подход к верификации универсальных микропроцессоров. Конечно, применение описываемого метода ни в коем случае не исключает, а лишь дополняет современный набор методов и средств тестирования и верификации микропроцессоров и их моделей. Стоит отметить факт создания специальной ОС для верификации аппаратного обеспечения 4. Многие авторитетные фирмы-разработчики микропроцессоров признают полезность как можно более ранней загрузки какой-либо ОС на разрабатываемой RTL-модели 5. Успешность этой операции зачастую дает разработчикам больше уверенности в правильности уже проделанной работы, чем тысячи прошедших тестов. Для загрузки ОС Linux процессору требуется выполнить порядка 10 10 инструкций. Скорость симуляции RTL-модели сложного МП весьма низкая до 10 инструкций в секунду при моделировании на современном ПК. Поэтому целесообразно использовать механизм среза-восстановления состояния модели микропроцессора для разбиения всей последовательности команд загрузки ОС на несколько подпоследовательностей, которые выполняются параллельно на разных вычислительных устройствах. Критерием успешной загрузки ОС служит результат покомандного сравнения трасс выполнения кода на RTL-модели с трассами, полученными на покомандном эмуляторе. Как только ОС загружена на RTL-модели, код проекта, написанный на языке Verilog или VHDL, синтезируется в ПЛИС. В зависимости от назначения разрабатываемого микропроцессора отладочная плата с ПЛИС либо с тестовым кристаллом может содержать контроллеры Ethernet, IDEили SCSI-HDD-дисков, USB, графический контроллер. Существующее ПО В качестве тестов в рассматриваемой методике предлагается запускать реальные пользовательские пакеты программ и встроенные в дистрибутивы пакеты тестов . Источником большинства тестовых программ является глобальная сеть Интернет, например, пакеты набора GNU 7. Для сборки программ требуется наличие нативного или кросскомпилятора для различных языков программирования . Тестовый набор зависит от имеющегося на верификацию времени, скорости работы ПЛИС-прототипа или тестового кристалла. Например, он может включать в себя запуск следующего ПО. Операционные системы сборка ядра ОС Linux 3264-разрядные версии дистрибутивов Red Hat и Debian сборка и запуск ОС реального времени VxWorks. Приложения, получаемые с помощью команды apt-get в ОС Debian 8. Встроенные тесты пакетов пользовательского ПО компиляторы набора GNU gcc, g, gfortran, gcj трансляторы языков программирования ruby, python, perl, php, haskell кодерыдекодеры аудио mp3flac lame, flac и видео ffmpeg математические библиотеки точных вычислений gmp, mpfr, mpc, gappa и другие. Предложенный перечень тестовых задач является лишь начальной точкой при рассмотрении тестового набора. Поиск ошибок С помощью описываемого метода в ходе верификации моделей двух микропроцессоров с архитектурой MIPS64 было найдено несколько десятков ошибок на стадии RTL-модели и ПЛИСпрототипа, а также 5 ошибок на стадии выпуска тестового кристалла. Предлагается следующий алгоритм действий при нахождении ошибки. 1. Подробно описать условия возникновения ошибки. 2. Локализовать исполняемый файл и shellкоманду, запуск которой приводит к обнаружению ошибки. 3. Снизить частоту работы микропроцессора отключить суперскалярность, предсказание переходов и другие аппаратные возможности. 4. Проверить, как ведет себя тестовый случай на покомандном эмуляторе. 5. Если это программная ошибка, исправить тест. 6. Найти ошибку в RTL-коде и исправить, после чего убедиться в исчезновении ошибки, запустить регрессионное тестирование. Примеры ошибок Рассмотрим несколько примеров найденных данным методом ошибок. 1. Ошибка возникала в результате конфликта по данным для регистра fp1 между записью пары регистров fp0,fp1 от инструкции madd и чтением от инструкции mfc1. Обходной путь для этой ошибки может быть следующим при компиляции всех программ использовать ключ компилятораней. Ошибка была найдена в тестовом кристалле, что позволило исправить ее до выхода микропроцессора в серийное производство. 2. Выполнение одного из встроенных тестов для пакета perl-5.8.8. Кроме выравнивания инструкций, должны быть соблюдены еще три условия для зависания процессора. 3. Ошибка во время работы программы cc1, входящей в состав gcc, вызванной с определенными ключами. Ошибка в цикле, заключающаяся в том, что в случае прихода прерывания в один из тактов выполнения инструкции перехода переход ошибочно происходит несмотря на то, что регистр v0 имеет нулевое значение 0x72d62c sw zero,20 0x72d630 lw v0,4 0x72d634 nop 0x72d638 bnez v0,72d62c 0x72d63c nop. Эта ошибка исчезала при отключении режима суперскалярности. Все три примера ошибок, приведенные выше, показывают, что достаточно простые тестовые ситуации, по каким-либо причинам не созданные генератором псевдослучайных тестов или вручную, встречаются в реальных приложениях пользователя. Анализ ошибок позволяет подтвердить известную истину то, что не было протестировано, не работает. Тестирование микропроцессора всегда начинается с запуска первых описанных выше трех групп тестов. Как правило, исследование причин возникновения ошибок позволяет найти недостатки в реализации других групп тестов. При изучении кода ошибок следует зафиксировать такие условия, как трассы выполнения кода на потактовой модели, набор инструкций сегментация памяти режим работы процессора исключительные ситуации и прерывания кэш-память сопроцессоры. По результатам разбора причин возникновения ошибок могут быть написаны новые направленные тесты, созданы новые шаблоны для псевдослучайного тестирования. Пути развития методики Большим преимуществом описываемой методики является ее расширяемость. Поскольку существует большое разнообразие свободного ПО, развитие тестового набора сводится к поиску программ. Стоит также упомянуть о возможности автоматизированной сборки полного набора инструментальных средств и корневой файловой системы для целевой Linux-системы с помощью набора buildroot 9. Кроме того, большой интерес представляет объединение тестируемых микропроцессоров в вычислительные кластеры и запуск параллельных вычислений с использованием MPI . Для программной эмуляции и получения эталонного вывода тестов, время выполнения которых составляет несколько часов или даже суток, можно уменьшить уровень детализации эмулирования. Такую возможность поддерживает эмулятор с открытым исходным кодом QEMU, одним из достоинств которого является поддержка эмуляции многопотоковых многоядерных микропроцессоров. В заключение необходимо отметить, что в статье рассматривается метод тестирования RTLмоделей, ПЛИС-прототипов, тестовых кристаллов и серийных СБИС микропроцессоров реальными пользовательскими приложениями под ОС Linux . В качестве тестов выступали пакеты тестов под ОС, сама ОС, встроенные механизмы диагностики и самотестирования пакетов ПО, реальные пользовательские приложения. Данный метод в комплексе с остальными был успешно применен для верификации разрабатываемых микропроцессоров и позволил найти несколько десятков ошибок на стадии RTL-моделирования микропроцессора с архитектурой MIPS64 и его ПЛИС-прототипа, а также 5 ошибок на стадии выпуска тестового кристалла. 