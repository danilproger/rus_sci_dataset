АНАЛИЗ СТРУКТУРЫ ИСХОДНЫХ ФАЙЛОВ ПРОЕКТА  ДЛЯ ПРОГРАММИРУЕМЫХ ЛОГИЧЕСКИХ  ИНТЕГРАЛЬНЫХ СХЕМ 

Постановка проблемы:  технология автоматизированного проектирования «систем на кристалле» на базе программируемых логических интегральных схем включает всестороннее тестирование проекта. Одним из методических инструментов тестирования является инженерный анализ, позволяющий осуществлять обратное проектирование микроэлектронных изделий на основе изучения их текущего состояния и находить программные ошибки проекта. Для эффективного решения задач инженерного анализа систем на базе программируемых микросхем авторы предлагают методику анализа структуры исходных файлов проекта, позволяющую распознавать блоки программы или группы элементов  схемы.  Методы:  анализ структуры исходных файлов проекта программируемой логической интегральной микросхемы  на основе перехода от низкоуровневого описания к описанию регистровых передач.  Результаты:  на примере проекта  для программируемой логической интегральной микросхемы выявлено, что фреймовая структура с фиксированным  размером слов в файлах форматов BIT и RBT позволяет восстанавливать логику работы системы на уровне регистровых  передач с последующим восстановлением файлов форматов NCD и XDL. Предложено представление файлов проекта  в удобном для определения структурных блоков и выявления внутренних связей проекта формате, представляющем из  себя разбитые на фреймы именованные области с комментариями.  Практическая значимость:  полученные результаты позволяют сократить время отладки «систем на кристалле» за счет выявления особенностей конфигурации, проявляющихся в процессе компиляции проекта в генерируемых системой автоматизированного проектирования файлах. Ключевые слова  — программируемые логические интегральные микросхемы, исходные файлы проекта, конфигурационный вектор, обратное проектирование. 

В настоящее время при создании информационно-управляющих систем различного назначения широко используются программируемые логические интегральные схемы ПЛИС 1, 2. На современном этапе ведущей тенденцией развития цифровой техники является применение программируемых микроэлектронных компонентов для реализации не только отдельных блоков, но и проектируемых устройств в целом, вплоть до создания так называемых систем на кристалле. Наряду с прямыми задачами проектирования таких систем в ряде случаев, например, при анализе программных ошибок или при перепроектировании, решаются задачи обратного проектирования микроэлектронных изделий на ПЛИС. Обратное проектирование является результатом инженерного анализа 3. Процесс обратного проектирования reverse engineering принято рассматривать как инверсию процесса прямого проектирования построение по готовому изделию функционального представления высокого уровня, призванное облегчить понимание работы устройства 4. При инженерном анализе цифровых систем на ПЛИС необходимо оперативно распознавать их архитектуру и принципы работы, и особую ценность представляют сведения о принципах функционирования ПЛИС в данном конкретном изделии. Эту информацию можно получить из исходных файлов проекта конфигурационных файлов, файлов регистровых передач и др.. В настоящей статье на примере анализа ПЛИС типа, основанных на архитектуре матриц логических элементов, представлено описание структуры исходных файлов проекта для обеспечения процесса обратного проектирования систем на кристалле. В современных условиях процесс обратного проектирования микроэлектронных изделий является существенной частью создания конкурентоспособной продукции и обычно направлен на разработку устройств более эффективных, чем имеющиеся у конкурентов. Обратное проектирование позволяет выявить программные ошибки устройств, полные спецификации на которые отсутствуют. Дополнительная область применения обратного проектирования перепроектирование на современной элементной базе устаревших компонентов, находящихся в составе долговечного оборудования сложных технических систем. Как показывает анализ, в полупроводниковой промышленности заказчиками перепроектирования являются те, кто интересуется либо технической информацией об устройстве, либо компонентами устройства, защищенными патентом 4. Главные особенности обратного проектирования в сравнении с прямым проектированием состоят в следующем. Отличается, во-первых, порядок следования процессов, составляющих прямое и обратное проектирование, во-вторых, возможности и условия достижения результата. Прямое проектирование представляет собой процесс превращения спецификации в продукт, удовлетворяющий этой спецификации. Между спецификацией и продуктом находятся процессы разработки и изготовления. Соответствующая организация и корректная постановка задач создают возможность реализации всех процессов прямого проектирования и условия получения ожидаемого результата. Обратное проектирование является инверсией прямого проектирования в смысле порядка следования и направленности составляющих его процессов. Задача заключается в построении спецификации на основании анализа продукта. При этом результат обратного проектирования не гарантирован, что является следствием решения в процессе обратного проектирования обратных задач, в общем случае не имеющих решения. Процесс обратного проектирования включает следующие основные стадии анализ продукта, извлечение описания продукта промежуточного уровня, анализ описания продукта для построения новой спецификации. По построенной спецификации можно разработать новый продукт, обеспечивающий эффективную реализацию тех или иных функций в другом технологическом базисе 4, 5. Разработка новой спецификации при перепроектировании ПЛИС может быть автоматизирована, если возможно использовать промежуточные описания программных продуктов, созданных при прямой разработке. В настоящее время применение современных информационных технологий существенно расширяет возможности инженерного анализа при обратном проектировании. Это обусловлено следующими факторами. Во-первых, методики проектирования становятся более формализованными, все большая часть работы по проектированию реализуется средствами автоматизации. Возникает возможность распознавания блоков программы или группы элементов схемы на основании знания преобразований, производимых компьютерной программой системы автоматизированного проектирования САПР, одной и той же в разных компаниях-изготовителях. Внутреннюю структуру продукта в этом случае легче исследовать и интерпретировать, чем в случае, когда продукт является результатом проектирования конкретного разработчика, использующего не в полной мере формализованные методики проектирования. Во-вторых, методики искусственного интеллекта для распознавания образов в исследовании и интерпретации достигли уровня, на котором распознавание структуры в продукте можно выполнить автоматически 6. Существенной особенностью ПЛИС является то, что алгоритм их функционирования задается конфигурирующей битовой последовательностью, являющейся результатом работы САПР. Поэтому для выявления особенностей работы систем на ПЛИС в процессе их обратного проектирования наряду с анализом выходных электрических сигналов используется анализ конфигурирующей битовой последовательности и промежуточных исходных файлов проекта. Следует отметить, что тестирование ПЛИС по их выходным сигналам является достаточно трудоемким, а вероятность получения правильного результата при анализе выходных сигналов достаточно низкая, и не всегда с результатами такого тестирования удается сопоставить весь функционал работы ПЛИС 5. В то же время анализ исходных файлов проекта предоставляет широкие возможности обратного проектирования ПЛИС и является наиболее приемлемым способом их инженерного анализа. Практический интерес представляет инженерный анализ получающих широкое использование в цифровых системах различного назначения ПЛИС типа FPGA, основанных на архитектуре матриц логических элементов, разработки ведущих мировых производителей. К числу ведущих производителей ПЛИС относится фирма Xilinx, которая предоставляет разработчикам широкий спектр кристаллов с различной технологией производства, степенью интеграции, архитектурой, быстродействием, потребляемой мощностью и напряжением питания. Фирма выпускает линейку ПЛИС в различных типах корпусов и в нескольких вариантах исполнения, включая промышленное, военное и радиационно-стойкое 2, 7. Кристаллы, выпускаемые фирмой Xilinx, в полной мере реализуют преимущества современных ПЛИС по сравнению с микроэлектронными устройствами с жесткой логикой. К числу достоинств ПЛИС фирмы Xilinx относятся высокие быстродействие и степень интеграции, возможность перепрограммирования непосредственно в системе, наличие мощных инструментов САПР, позволяющих устранить возможные ошибки в процессе проектирования устройства, сравнительно низкая стоимость в пересчете на один логический вентиль. При разработке проекта исходных файлов проекта ПЛИС анализируемого типа пишется исходный код на языке 6. Основной интерес при обратном проектировании таких ПЛИС представляют файлы типов, названия типов файлов соответствуют их расширениям. Файл с расширением является файлом регистровых передач, который создается САПР по завершении написания программы, если не обнаружены программные ошибки. Этот файл после компиляции преобразуется в файл с расширением, который впоследствии с помощью программатора записывается в ПЛИС. Одновременно создаются файлы их текстового отображения с расширениями и для файла файл, для файла файл . В настоящей статье представлено описание структуры этих файлов, которое может быть использовано при обратном проектировании ПЛИС фирмы Xilinx. Файлы формата, называемые также файлами регистровых передач ФРП, несут информацию о том, какие связи и ячейки в ПЛИС должны быть активированы для выполнения функции, предусмотренной проектом. Данные файлы получаются путем компиляции из исходного кода проекта, написанного на языке программирования . Из файлов формата с помощью САПР получают файлы формата конфигурационные файлы. Процесс получения ФРП представлен на рис. 1, где обозначены . источник кода на языке описания аппаратуры . источник кода на языке описания аппаратуры . подробный отчет синтезатора, который будет сгенерирован по окончании процесса синтеза. Часть отчета попала в вывод консоли . список соединений для интегрированной программной среды версии до 6.1i . список соединений для интегрированной программной среды версии старше 6.1i . файл регистровых передач . список ограничений проекта. На рис. 1 также выделены следующие программные модули утилиты САПР утилита-синтезатор . Преобразует исходное описание проекта в так называемый список связей . Эти связи устанавливаются между специфичными для архитектуры программного обеспечения ПЛИС примитивами элементарными объектами утилита-транслятор. Во время трансляции переводит файл списка цепей в файл списка данных . Файлов может быть несколько, при этом они все будут объединены в один файл. Например, это могут быть уже синтезированные файлы коммерческих компонентов, код которых закрыт утилита отображения. Упаковывает примитивы, полученные в результате трансляции в стандартные последовательности слайсы, а также генерирует файл физических ограничений . В результате отображения образуется файл, в этом файле учитываются ресурсы конкретной модели ПЛИС средство размещения и трассировки . Управляет размещением слайсов, сформированных на предыдущем этапе в матрице логических блоков . После этого выполняется трассировка распределение связей между сигналами слайсов . Структурно ФРП формата состоят из заголовка и основной части файла. В заголовке содержатся маркеры структуры функциональных ячеек и связей, а также контрольная информация для проверки целостности и настройки синтезатора конфигурационного файла. Эта служебная информация является исходной для анализа основной части файла. Заголовок ФРП включает в себя следующие элементы 1 маркер использования стандарта построения ячеек 2 маркер использования стандарта построения связей между ячейками 3 количество байт оставшейся части файла после этого блока . Служит для контроля целостности файла 4 версию программы, построившей данный ФРП 5 количество байт оставшейся части файла после этого блока . Служит для контроля целостности файла 6 размер основной части ФРП . Основная часть ФРП состоит из блоков, которые могут выполнять одну из следующих функций быть адресом ячейки ПЛИС быть адресом связи между этими ячейками быть определением того, что будет выполняться в ячейке быть определением типа связи между ячейками. Как правило, все эти возможные функции ФРП следуют друг за другом для определенной ячейки. Для формализованного представления структуры файлов формата опишем ее с помощью множеств и их элементов. Введем следующие обозначения множество заголовок файла, множество основная часть файла. Эти множества содержат непересекающиеся подмножества в качестве информационных единиц элементов файла. С учетом введенных обозначений выразим множества и через их элементы, где число символов заголовка и число символов основной части файла в общем случае произвольное и для современных ПЛИС достигает значений 10 10 . Элементы множеств представляются в шестнадцатеричном коде, const 0.1 0.1 показывает версии стандарта построения ячеек и преобразователя в кодировку 0 константа, зарезервировано, const 1.6 показывает версию стандарта построения связей между ячейками 0 константа, зарезервировано, 0x23, 0x23, 0x23 назначение не выяснено, начальная контрольная сумма 3 константа, зарезервировано, 0x58, 0x6, 0x78, 0x56, 0x33, 0x32, 0x44, 0x4 назначение не выяснено, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20. Элементы множеств представляются в двоичном коде, размер основной части файла, 0 0110010101001110 назначение не выяснено, 0 00101111 разделитель между блоками. В процессе обратного проектирования файлам данного типа принадлежит очень важное место. Зная структуру этих файлов, можно считать, что задача распознавания принципа работы данной ПЛИС решена. Распознавание файлов формата позволяет выявить внутренние связи между блоками ПЛИС и тип связей, что дает представление о том, как работает данная ПЛИС и какие функции она выполняет. Зная ФРП анализируемого типа ПЛИС, можно последовательно шаг за шагом восстановить все исходные файлы проекта, созданного для этой ПЛИС. Полное внутреннее состояние конфигурации памяти программируемых логических устройств содержится в программном файле, называемом . Это состояние при функционировании обычно хранится в памяти типа и загружается из энергонезависимого устройства памяти при каждом включении питания . В мире программного обеспечения изготовителями процессоров общепринято публиковать формат потока двоичных сигналов их продукта в руководстве архитектуры для использования при разработке компиляторов. В мире программирования ситуация противоположная. В настоящее время ни один изготовитель не опубликовал формат файлов своих устройств. Более того, чтобы защитить авторские права разработчиков при передаче устройства заказчику, файл программирования шифруется. Такой кодированный программный файл и загружается из энергонезависимого устройства памяти при включении питания 6. Задача декомпиляции файла, извлеченного из в готовом устройстве, практически безнадежна. Но если перепроектирование выполняется организацией-разработчиком оригинального устройства на, например, с целью использовать более дешевую в массовом производстве технологию изготовления, то задача декомпиляции может быть решена. Задача декомпиляции файла возникает и при оригинальном проектировании, например, САПР поддерживает методику проектирования с использованием предварительно размещенные блоки в матрице элементов вместе с внутренними межсоединениями. Эта же САПР обеспечивает проектировщику возможность преобразования блока, скомпилированного до уровня, в сеть элементов . Таким образом, декомпиляция файла становится возможной, но только с использованием инструментов, составляющих собственность изготовителя . Система автоматизированного проектирования обеспечивает декомпиляцию с помощью файла формата . Формат это текстовое представление структуры запрограммированной компиляция и декомпиляция осуществляются программой, имеющейся в последних версиях САПР . Эта программа имеет опции, позволяющие построить файлы отчета с расширением ., которые содержат описательную информацию о запрограммированной фирмы Xilinx. Файлы отчета имеют формат, отличный от формата поскольку они описывают, а не проектируемое устройство, и содержат огромный объем информации несколько гигабайт текста, описывающей всю сетку элементов запрограммированной . Формат фирмой Xilinx официально не опубликован. Краткое описание формата приводится в руководстве пользователя 8. Данное текстовое описание вполне доступно для понимания. Оно включает комментарии, которые помогают пользователю в интерпретации файла. Информация, содержащаяся в файле формата, полностью описывает настройку конкретной для выполнения функций проектируемого устройства 7. Для понимания функционирования устройства по описанию в формате необходимы функциональные описания элементов и коммутационных блоков конкретного типа . Структурные описания этих элементов и непрограммируемые соединения можно найти в файле отчета. Файл формата может содержать два типа конструкций блоки и цепи . Блок может быть любым логическим элементом в, например, логическим элементом сетки, блоком оперативного запоминающего устройства или процессором цифровой обработки сигналов . Описание цепи содержит название цепи и компонентов блоков, которые связаны этой цепью. Каждый элемент сетки имеет описание в формате . Настройки компонентов внутри описаний элементов везде имеют один и тот же вид . Названия компонентов настройки приведены в описании . Значение параметра, отличное от, указывает, что соответствующий компонент используется. Для извлечения структуры устройства, пригодной для перепроектирования в другом технологическом базисе, требуется разработка анализаторов файлов формата и файла отчета. Результат работы анализатора файлов формата должен быть представлен в виде структурного описания, которое может служить исходными данными для нового проектирования 8. Знание структуры файлов формата позволит получить те же результаты, что и при распознавании файлов формата, так как эти файлы являются взаимополучаемыми с помощью стандартных инструментов САПР. Отличие между ними заключается в том, что файлы формата непосредственно воспринимаются человеком, а файлы формата являются формализованными и непосредственно человеком не воспринимаются. Файлы формата, также называемые конфигурационными файлами КФ, несут информацию, необходимую для непосредственного конфигурирования ПЛИС 9. КФ получают с помощью САПР в результате генерации из ФРП. После генерации файлы формата с помощью программатора записываются в ПЛИС, в результате чего ПЛИС может выполнять свои функции согласно своему предназначению. Схема преобразований при трансляции ФРП в КФ представлена на рис. 2. Очередность выполнения преобразований указана номерами над стрелками. На рисунке введены следующие обозначения модуль САПР, синтезирующий конфигурационный файл для ПЛИС объект программного модуля, соответствующий конфигурационному файлу объект программного модуля, соответствующий ограничениям проекта объект программного модуля, соответствующий модели ПЛИС таблица итераций объект программного модуля, соответствующий файлу регистровых передач. Структурно КФ формата состоят из заголовка и основной части файла. Заголовок файла необходим для правильной работы загрузчика ПЛИС, в нем содержится информация о микросхеме, для которой сгенерирован файл, информация для контроля целостности данных и сведения об источнике. Эта служебная информация является исходной для анализа основной части файла. Заголовок КФ включает в себя следующие элементы 1 маркер начала файла 2 название ФРП, из которого был сгенерирован КФ и идентификационный номер пользователя, сгенерировавшего КФ 3 структуру ПЛИС, для которой был создан КФ 4 дату создания 5 время создания 6 размер основной части КФ . Для формализованного представления структуры файлов формата опишем ее с помощью множеств и их элементов. Введем следующие обозначения множество заголовок файла, множество основная часть файла. Эти множества содержат определенное число элементов, каждый из которых выражает определенную информацию. С учетом введенных обозначений выразим множества и через их элементы, где число символов заголовка и число символов основной части файла в общем случае произвольное и для современных ПЛИС достигает значений 10 10 . Элементы множеств и представляются в шестнадцатеричном виде, 0x00, 0x09, 0x0, 0x 0, 0x0, 0x 0, 0x0, 0x 0, 0x0, 0x 0, 0x00, 0x00, 0x01 0x61, начало 0x00 константа, зарезервировано количество байт, отображающих имя ФРП, имя ФРП, из которого сгенерирован КФ, 20, 271, 3 константа, зарезервировано, может отсутствовать, 55, 73, 65, 72, 49, 44, 3, 30, 78, 46, 46, 46, 46, 46, 46, 46, 46 по умолчанию 00, 2, если отсутствует 19, если присутствует, начало блока Семейство ПЛИС, для которой был создан КФ, 62 00 константа, зарезервировано размер блока, семейство ПЛИС, для которой был создан КФ, 11, 35, количество ножек у данной ПЛИС 00 константа, зарезервировано начало блока Дата создания, 63 00 константа, зарезервировано размер блока, дата создания КФ ггггммдд 00 константа, зарезервировано начало блока Время создания, 64 00 константа, зарезервировано размер блока, время создания КФ ччммсс 00 константа, зарезервировано начало блока Размер основной части КФ, 65 размер блока, размер основной части КФ, блок начала основной части, 0 mod8, конфигурация соединений между программируемыми логическими блоками. Последовательность КФ представляет собой поток 32-разрядных слов, которые являются или командами, или конфигурируемыми данными. Основная часть КФ состоит из так называемых фреймов 8. Фрейм данных конфигурации это последовательность бит данных конфигурации определенной длины. Для каждой микросхемы фирмы Xilinx длина фрейма различна. Если длина бит конфигурации фрейма не кратна 32-разрядному слову, то фрейм дополняется нулевыми битами до полного 32-разрядного слова 10. Такие фреймы, собственно, и содержат информацию о конфигурации программируемых элементов архитектуры ПЛИС. Текстовое представление файла формата содержится в файле формата аналогично тому, как текстовое представление файла формата содержится в файле формата 11. Файлы форматов и используются на первом шаге обратного проектирования как исходный материал для получения файлов и . Следует отметить, что данное преобразование не является тривиальным и представляется самостоятельным объектом исследований. Проведенный анализ структуры исходных файлов проекта ПЛИС ориентирован на обеспечение процесса обратного проектирования систем на кристалле по файлам конфигурации. Систематизированы и формализованы структуры исходных файлов проекта, которые используются для конфигурирования ПЛИС фирмы Xilinx. Рассмотрены схемы получения этих файлов и их место в общем процессе конфигурирования ПЛИС. По результатам проведенного анализа можно сделать вывод, что главную роль в процессе конфигурирования ПЛИС играют файлы форматов и, получаемые в ходе многопроходного компилирования высокоуровневых структур описания на матрицу кристалла. Описание связей между этими файлами и разработка математической модели получения ФРП из КФ является основой инженерного анализа микроэлектронных устройств, использующих программируемую логику. 