РАЗРАБОТКА ЯЗЫКА УПРАВЛЕНИЯ  КОСМИЧЕСКИМИ АППАРАТАМИ 

Постановка проблемы:  в настоящее время возможности языка управления космическими аппаратами, эксплуатируемого на базе акционерного общества «Информационные спутниковые системы» им. академика М. Ф. Решетнёва», перестали соответствовать требованиям предметной области: язык не поддерживает новых возникающих функциональных задач  и слишком сложен для быстрого освоения, что вызвало необходимость разработки нового языка управления.  Результаты:   на основании анализа ограничений применяемого языка управления, требований предметной области и существующих  аналогов был спроектирован и разработан проблемно-ориентированный язык управления «Дельта», обладающий простым  синтаксисом, с применением терминов предметной области в качестве ключевых слов, поддерживающий как русский, так  и английский варианты написания операторов языка. В языке поддерживаются основные функции управления: выдача  управляющих воздействий, анализ поступающей телеметрии, паузы, печать сообщений, условные операторы и др.  Практическая значимость:  данная разработка предназначена для управления большинством космических аппаратов производства  акционерного общества «Информационные спутниковые системы» как в отечественных, так и в международных проектах. Ключевые слова  — предметно-ориентированный язык, проблемно-ориентированный язык, управление космическими аппаратами, процедура управления. 

В настоящее время возможности, предоставляемые использованием космических систем, применяются в различных областях связи, навигации, геодезии, телевещании и др. Для поддержания выполнения системой указанных целевых функций необходимо обеспечить решение задач управления космическими аппаратами КА удержание на заданной орбите, включениеотключение различных режимов работы, изменение алгоритма функционирования полезной нагрузки и др., что решается выдачей соответствующих команд с Земли на КА 1, 2. Логическая совокупность команд, выдаваемая на борт КА для реализации единичной задачи управления, называется процедурой управления. Проблемно-ориентированные языки позволяют описать процедуру управления в виде сценария и выполнять его в ходе сеансов связи с КА в автоматизированном режиме неограниченное количество раз. Примеры таких языков Python, PLUTO, CSL, STOL, TAO, CSTOL, CCL, JAS, ICL, Btscript, Cecil, CIL, TOPEtcl, UCL, Elisa, PIL, ЯОТР и др. Функциональные возможности языков управления КА обоснованы необходимостью решения задач управления КА и включают, но не ограничиваются, следующим набором выдача команд управления на КА анализ текущих значений телеметрических ТМ параметров на соответствие допустимому интервалу значений сообщение оператору паузы между командами вызов другой процедуры управления из данной комментарии к тексту процедуры. В связи с большим разнообразием существующих языков управления 3 производятся попытки унификации, для чего разработаны следующие документы стандарт ECSS-E-ST-70-32C Test and Operations Procedure Language PLUTO 4 спецификация OMG SOLM 5, содержащие описание возможностей, которыми, по мнению разработчиков, должен удовлетворять любой язык управления для обеспечения совместимости различных систем управления. Рассмотрим некоторые применяемые языки. Язык Python 6 переносимый, высокоуровневый, объектно-ориентированный универсальный язык, поддерживающий параллельное выполнение сценариев управления КА. Применяется в специальном программном обеспечении управления СПО-У GSEOS, разработанном компанией IT, США. Помимо этого, язык Python применяется для автоматизации управления КА с помощью СПО-У hifly 7, разработанном компанией GMV, Испания. Язык PLUTO 8, применяющийся в СПО-У SCOS Mission Control System, разработанном компанией SciSys Англия, Германия, а также в СПО-У STEPS, разработанном институтом INPE, Бразилия, высокоуровневый язык программирования, поддерживающий циклы, арифметические операции, планирование выполнения. Процедура управления, созданная с использованием данного языка, должна содержать следующие разделы раздел объявлений раздел условий старта выполнения процедуры по наступлению конкретного времени или выполнению ряда условий тело процедуры раздел проверок оборудования если в ходе выполнения данного раздела произошел сбой, то выполнение процедуры останавливается раздел постусловий проверка того, что процедура была выполнена правильно. Язык SCL применяется для управления КА в СПО-У ASPEN, компания Jet Propulsion Laboratory 9, США, а также в СПО-У SCL 10, компания Interface Control Systems, Inc, США. На SCL можно создавать как скрипты управления, так и правила управления. Правила предназначены для мониторинга внештатных ситуаций в подсистемах КА, при появлении которых предусматривается автоматический запуск соответствующего скрипта. Скрипты управления предназначены для исполнения в ходе сеанса связи с КА для выполнения какой-либо целевой задачи. Скрипты могут выполняться параллельно, на основе приоритетов, назначаемых при создании скрипта. Кроме функций, общих для всех языков управления, SCL поддерживает циклы и выражения присваивания. Компанией NASDA, Япония 11, разработан язык управления КА, предназначенный для формирования и исполнения процедур управления в составе СПО-У SMACS. Помимо общих функций языка управления, данный язык поддерживает обработку следующих событий изменение конфигурации сети, смену используемой для управления КА станции. Процедура также может производить запись телеметрических данных и сигнализировать о возникших аномалиях. Компанией Kratos Integral Systems International, США, разработан язык управления КА 12, применяющийся в составе СПО-У Ares. Скрипт представляет собой текстовый файл в виде таблицы с использованием символов табуляции в качестве разделителей со следующими столбцами номер шага, инструкция, команда, ТМ-параметр, метка, вызов функции. Позволяет вызывать функции из предоставляемой библиотеки функций. Помимо общих функций языка управления, дополнительно поддерживается загрузка файлов с аргументами команд. Язык описания типовых работ ЯОТР разработан на базе акционерного общества Информационные спутниковые системы им. академика М. Ф. Решетнва АО ИСС, Россия. В 1983 г. на базе Института прикладной математики им. Келдыша совместно с РКК Энергия был разработан проблемно-ориентированный табличный язык Диполь для проведения наземных испытаний проекта Энергия-Буран. В 1987 г. язык Диполь-4 был внедрен в Научнопроизводственное объединение прикладной механики им. академика М. Ф. Решетнва для написания программ наземных испытаний КА различного назначения и в 1993 г. был изменен и доработан до версии Диполь-5. Затем, в 1999 г. на основе языка Диполь-5 был разработан ЯОТР путем исключения команд, не применимых для управления КА табличная структура языка, а также написание отдельных операторов было сохранено. Язык применяется для управления и эксплуатации КА разработки АО ИСС. В 2004 г. на базе языка Диполь-5 была разработана очередная версия языка Диполь-6 13, которая применяется для комплексных электрических испытаний КА производства АО ИСС. Язык описания типовых работ, применяемый для управления КА, это интерпретируемый скриптовый процедурный язык с текстовой нотацией. Типовая работа ТР представляет собой текстовый файл в виде таблицы с использованием символов псевдографики со следующими столбцами номер строки, тип строки, оператор языка, аргументы. Пример ТР управления КА показан на рис. 1. Результаты сопоставления перечисленных языков управления КА по общим характеристикам языков программирования тип языка, используемая парадигма, возможность параллельного выполнения сценариев, используемая нотация представлены в табл. 1. Анализ полученных данных показывает, что несмотря на сходные функциональные задачи, связанные с выдачей команд на КА, реализация языков управления КА сильно различается языки управления могут быть как общего назначения, так и специализированными разработанными специально для автоматизации процесса управления КА возможно использование как процедурного, так и объектно-ориентированного стилей программирования отдельные языки поддерживают только последовательное выполнение сценариев управления, другие как последовательное, так и параллельное для написания сценариев может применяться как текстовое, так и табличное представление. Многолетний опыт эксплуатации ЯОТР в качестве языка управления КА выявил в нем ряд ограничений. 1. Использование текстово-табличной нотации крайне затруднительно, так как она требует запоминания правил заполнения каждого отдельного поля и различается от одного оператора к другому, что особенно неудобно, например, в условиях, когда необходимо создать ТР за ограниченный промежуток времени для обработки нештатной ситуации в ходе испытаний или управления КА. 2. Не поддерживается английский язык написания ТР, что является несоблюдением одного из требований международных контрактов, заключаемых АО ИСС. 3. Отсутствуют возможности для автоматизации выполнения отдельных функций, необходимых для проведения процесса управления современными КА. Последний недостаток следует уточнить невозможно использовать номер КА в качестве параметра, по значению которого меняется логика ТР для систем управления группировками КА для ситуации множественного выбора не предусмотрена обработка случая, когда ни один из предложенных вариантов не подошел не поддерживается использование ТМ-параметров в качестве аргументов операций сравнение, ожидание, выбор из нескольких вариантов и т. д. отсутствует обработка ТМ-параметров из заранее сохраненного архива например, для восстановления состояния бортового ретрансляционного комплекса в исходное состояние после какого-либо сбоя невозможно использовать дробные числа в качестве параметров для проверки различных условий например, принадлежности ТМпараметра некоторому интервалу и т. д. не поддерживается возможность выдачи команды смены декодера средствами языка. Применение зарубежных аналогов в качестве языка управления является нецелесообразным из-за проблем интеграции с существующими средствами управления КА, отсутствия детального описания языков в открытом доступе и пр. Это привело к необходимости разработки нового проблемно-ориентированного языка управления КА. Для соответствия набору предъявляемых требований разрабатываемый язык должен обладать следующими характеристиками быть императивным описывать логику программы в виде последовательности инструкций иметь простой синтаксис т. е. содержать минимум синтаксических конструкций, что упрощает процесс обучения конечных пользователей, увеличивает скорость разработки сценариев, и вследствие простоты получаемых программ управления уменьшает количество потенциальных ошибок использовать термины, близкие к предметной области, с сохранением преемственности с существующим языком управления, что упрощает восприятие нового языка пользователями содержать как русский, так и английский варианты написания операторов языка для использования в отечественных и международных проектах АО ИСС. Язык управления КА должен поддерживать следующие функции выдачу управляющих воздействий, например команд управления КА и массивов командно-программной информации проверку выполнения заданного условия, например попадания текущего значения указанного ТМ-параметра в допустимый интервал проверку многовариантного ветвления, включая случай, когда ни один вариант из предложенных не подошел проверку выполнения нескольких заданных логических условий И, ИЛИ, НЕ задание паузы на указанный промежуток времени печать текстовых сообщений оператору комментарии, содержащие пояснения к тексту программы вызов других ТР из данной с возможностью передачи некоторых параметров, что обеспечивает повторное использование уже созданных и отлаженных сценариев, например путем вызова на выполнение одного сценария из другого остановку выполнения ТР, что применяется для обработки нештатной ситуации в управлении, прерывания стандартного хода выполнения типовой процедуры в случае, когда необходимо вмешательство оператора для анализа сложившейся ситуации циклы, необходимые для выполнения повторяющихся действий. Рассмотренные выше требования были реализованы в языке управления КА Дельта, который относится к классу предметно-ориентированных языков. В соответствии с работой 14 последовательность разработки внешнего проблемно-ориентированного языка состоит из трех шагов определение семантической модели определение синтаксической модели абстрактный и конкретный синтаксис определение правил трансформации правила, по которым абстрактное представление транслируется в исполнимое. Третий этап подразумевает разработку транслятора языка, описание которого выходит за рамки данной статьи. предметной области разрабатываемого языка представим в виде семантической сети рис. 2. описание синтаксиса, не зависящее от способа представления данных от текстового представления команд или пиктограмм, используемых для визуализации объектов. Метамодель разрабатываемого языка, созданная на основе анализа семантической модели предметной области, представлена с помощью диаграммы классов UML на рис. 3. Данная метамодель несколько отличается от существующих универсальных метамоделей языка управления КА 5, 12, что объясняется отличиями в автоматизируемых технологиях управления. набор правил, определяющих допустимые цепочки входных символов. Из возможных форм представления текстовой, табличной, графической выбрано текстовое представление. Это связано с тем, что автоматизируемая логика управления КА является линейной, т. е. относительно простой для восприятия в виде текста. Сценарий является текстовым файлом, хранящимся в базе данных и обладающим уникальным именем, по которому его можно вызвать на исполнение в ходе сеанса управления. Также его можно вызывать из других сценариев, для чего в состав сценария могут входить формальные параметры, которые при вызове должны быть заменены на фактические. В случае отсутствия такой замены выдается сообщение об ошибке. Операторы сценария выполняются последовательно, исключая случаи обработки управляющих конструкций операторов ветвления. Имена ТМ-параметров идентификаторы которых представляют собой произвольную последовательность символов и могут меняться от одной космической системы к другой. Текущие значения ТМ-параметров числа с плавающей точкой. ТМ-параметр из сохраненного архива. При необходимости оператор может сохранить текущие значения ТМ-параметров на определенный момент времени в некоторый архив. Для использования сохраненных значений необходимо указать их в формате имятмпараметра. Состояние выданной команды булева переменная на каком этапе прохождения она находится дошла до программного обеспечения САО, куда выданные команды попадают перед тем, как быть отправленными на наземную станцию доСАО, выдана наземной станцией доНИП, выполнена на КА ИСП. Номер КА применяется для систем из нескольких КА, для управления которых применима одна и та же ТР. Номер КА должен быть указан в формате КА. Перечень операторов языка Дельта создан на основе разработанной метамодели см. рис. 3. Многие ключевые слова, используемые в языке, совпадают с терминами предметной области. В качестве аргументов оператора должны быть использованы тип и номер команды. Допус каются следующие типы команд разовые команды РК, программные команды ПК и некоторые другие, зависящие от конкретной реализации космической системы. Помимо этого можно выдать массив КПИ, также обладающий уникальным именем и хранящийся в специализированной таблице баз данных. Применяемое ключевое слово для обозначения оператора ВЫДАТЬ Пример использования Ключевое слово для обозначения оператора ПЕЧАТЬ. Цвет выводимого сообщения можно указать, включив в сообщение наименование цвета в формате ЦВЕТ, например КРАСНЫЙ или ЗЕЛЕНЫЙ Пример использования Ключевое слово ПАУЗА Пример использования Ключевое слово СТОП. При необходимости выполнение ТР можно продолжить СПО-У Пример использования . Ключевое слово ДЕКОДЕР, затем идет номер активируемого декодера, A или B Пример использования Помимо целевых операторов, описывающих действия по управлению КА, в язык должны быть введены управляющие конструкции, обеспечивающие возможность нелинейного выполнения скрипта управления. . Операции ЕСЛИ, ИНАЧЕ, КЕСЛИ позволяют выполнять определенную последовательность действий в зависимости от вы полнения некоторого условия. В случае если условие выполнилось, исполняется указанная далее последовательность операций. Внутри операции ЕСЛИ допускается использовать оператор ИНАЧЕ, который задает альтернатив ную последовательность действий на тот случай, когда условие, заданное в дополнительных строках оператора ЕСЛИ, не выполнено. В любом случае оператор ЕСЛИ должен быть закрыт оператором КЕСЛИ Пример использования Операторы ВЫБОР, ВАРИАНТ, ОСТАЛЬНОЕ КВЫБОР образуют конструкцию многовариант ного ветвления в ТР аналог оператора SWITCH в языках высокого уровня. Конкретная операция ВАРИАНТ выбирается для исполнения в том случае, если текущее проверяемое значение переменной оказалось в указанном диапазоне. Внутри операции ВЫБОР может содержаться операция ОСТАЛЬНОЕ, которая будет выполняться, если ни один из предложенных вариантов не исполнился. Пример использования Операция обеспечивает повторение выбранных операций по управлению указанное количество раз Пример использования Оператор ВЫЗВАТЬ инициирует выполнение указанной ТР из текущей. При необходимости можно передать в вызываемую ТР значения некоторых параметров. В тексте вызываемой ТР должны быть указаны параметры для замены в формате 1, 2, которые будут заменены переданными при вызове значениями. В случае отсутствия замены параметра ситуация считается ошибочной, о чем выдается соответствующее сообщение Пример использования Должна быть предусмотрена возможность включения в текст процедуры произвольных пояснений к особенностям ее написания, не обрабатываемых интерпретатором языка. Для включения комментария должно использоваться ключевое слово К Пример использования Для международных проектов АО ИСС поддерживается также вариант на английском языке, сохраняющий все особенности разработанного синтаксиса, за исключением написания ключевых слов. Соответствие русскоязычных и англоязычных слов представлено в табл. 2. Пример ТР на разработанном языке управления Дельта показан на рис. 4. Стоить отметить, что разработанный язык Дельта поддерживает и расширяет функциональные возможности ранее эксплуатируемого ЯОТР для обеспечения переносимости управления в уже существующих системах управления КА. В ходе выполнения исследования были рассмотрены существующие зарубежные аналоги языки управления космическими аппаратами, выявлена схожесть выполняемых ими функциональных задач и отсутствие общих тенденций в реализации. Проанализирован эксплуатируемый на АО Информационные спутниковые системы язык управления космическими аппаратами ЯОТР, сформулированы его недостатки. Выявлены требования к новому языку управления КА императивность простой синтаксис использование терминов, близких предметной области наличие как русского, так и английского вариантов написания операторов языка необходимость в расширении существующих функциональных возможностей. В соответствии со сформулированными требованиями был разработан новый язык управления КА Дельта, удовлетворяющий текущим функциональным задачам предметной области и обеспечивающий лаконичность и простоту создаваемых сценариев управления. Язык является более простым в освоении для специалистов по управлению КА, чем предыдущий вариант языка управления, что увеличивает скорость разработки сценариев управления и уменьшает количество потенциальных ошибок. Данная разработка предназначена для управления большинством КА производства АО ИСС как в отечественных, так и в международных проектах. 