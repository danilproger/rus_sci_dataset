СЛОЖНОСТЬ ПРОВЕРКИ МОДЕЛИ  ПАРАЛЛЕЛЬНЫХ ПРОГРАММНЫХ СИСТЕМ 

Рассматривается принадлежность метода проверки модели параллельных программных систем к одному из классов сложности. Показаны особенности моделирования асинхронных вычислительных процессов. 

 Использование параллельных вычислений, которое становится все более актуальным, дает особые преимущества, повышая надежность, достоверность и быстроту получения результата. Вместе с тем параллельные программные системы требуют особой проверки, так как при параллельной работе нескольких составляющих системы возможно появление ошибок, не определяемых традиционными методами. Метод проверки модели является удобным инструментом при поиске ошибок в параллельных программных системах, однако его использование может быть ограничено из-за сложности реальных параллельных программных систем. Обычно данные системы состоят из нескольких частей, работающих асинхронно и разделяющих общие ресурсы. Исходя из этого, размер пространства состояний всей системы будет равен произведению размеров пространств состояний частей, входящих в систему 1. Итоговая величина может достигать 10 2. В связи с этим необходима оценка сложности проведения верификации параллельных программных систем с использованием метода проверки модели. В 3 дается общая оценка сложности проверки модели с использованием темпоральной логики линейного времени . В настоящей работе рассматривается сложность проверки модели с использованием LTL параллельных программных систем. Одна из проблем, возникающих при анализе параллельных программных систем, отсутствие непрерывности при моделировании многопоточности. Широко используемой моделью многопоточности является представление возникающих событий в виде набора многочисленных базовых шагов. Такой подход называется моделированием с помощью чередования. Особенность его в том, что в любой временной отрезок только один процесс выполняет свою элементарную операцию. Другой процесс может выполнить свою элементарную операцию лишь по окончании предыдущей. Таким способом можно моделировать асинхронные процессы в параллельной программной системе. CTL является логикой ветвящегося времени, в которой рассматриваются различные пути вычислений программы. В отличие от CTL в LTL рассматривается единственный путь вычисления программы 2. В данной работе рассматривается проверка с применением темпоральной логики линейного времени, что в совокупности с некоторыми ограничениями позволяет чередованием моделировать параллельные вычислительные системы. Рассмотрим программную систему P, состоящую из n модулей P, P, P. Каждый из модулей P работает параллельно с остальными модулями и выполняет отдельный процесс П программной системы P. Вектор значений общих переменных V хранится в общей памяти M. Для того чтобы обратиться или сохранить значение переменной, процесс П должен получить доступ к памяти. В дополнение к этому каждый из процессов обладает своим набором частных переменных. Они используются для хранения результатов промежуточных вычислений или данных, не используемых другими процессами. Предполагается, что общая память М аппаратно или программно защищена таким образом, чтобы в определенный момент времени только один процесс мог обращаться к общим переменным. Если к переменной открыт доступ одному процессу, то другим он закрыт. За одну операцию доступа к переменной процесс может либо прочитать, либо изменить ее значение. Выполнение обоих действий за одну операцию не допускается. Таким образом, разные события не могут произойти одновременно, так как механизм исключительного доступа к памяти М не даст это сделать. Значит, при всех возможных вариантах работы параллельной программной системы все события будут происходить в линейной последовательности. Область определения переменных программной системы чаще всего является бесконечной, следовательно, она имеет бесконечное количество состояний. При проверке модели параллельной программной системы требуется, чтобы она имела конечное количество состояний. Для этого используются представления первого порядка каждой переменной vV сопоставляется значение из множества D, называемого областью интерпретации 2. Таким образом, состояние это оценка s VD для множества переменных из V. Такая последовательность является вычислением программы. Модель программы K удовлетворяет формуле темпоральной логики линейного времени, если все вычисления K удовлетворяют формуле. Таким образом, для модели K программы с конечным числом состояний и формулы проверка модели состоит в подтверждении того, что все последовательности, допускаемые автоматом А, удовлетворяют формуле. Известно, что можно построить автомат А, принимающий только те последовательности, которые удовлетворяют формуле 3. Таким образом, проверка модели сводится к проверке того, что все состояния, принимаемые автоматом А, принимаются и автоматом A. Количество состояний в этом автомате будет равно 2. Следовательно, задача относится к классу PSPACE 5. Это означает, что проверка модели может быть выполнена с полиномиальным ограничением пространства. Применим данный результат к параллельной программной системе P. При параллельной работе процессов используется моделирование чередованием с применением правил, описанных выше. При моделировании необходимо выполнить требование справедливости, то есть запрет на бесконечные последовательности состояний, определяемые только одним из n процессов. Сложность проверки модели параллельной программной системы P определяется относительно размера модулей P, из которых состоит система, и длины проверяемой формулы. Применение конечных автоматов позволяет разделить проверку модели параллельной программной системы на отдельные составляющие построение автомата по проверяемой программной системе, построение автомата по формуле и проверка пересечения этих двух автоматов. Причем для любой формулы линейной темпоральной логики можно построить автомат A, принимающий только вычисления, удовлетворяющие. Проведенная оценка принадлежности метода к одному из классов сложности показывает, что проверка модели параллельной программной системы относится к классу PSPACE. В связи с тем, что размер проверяемых формул часто бывает небольшим, временная сложность оказывается приемлемой. Таким образом, можно заключить, что возможно построение эффективных алгоритмов, применяемых на практике и позволяющих автоматизировать процесс доказательства соответствия параллельных программных комплексов своей спецификации. 