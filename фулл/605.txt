АРХИТЕКТУРА ПРОЦЕССОРА МЕТАДАННЫХ 

Приводятся краткие сведения о методологии метауправления и описывается подход, обеспечивающий независимость реализации метауправления в информационных системах от конкретного языка представления и средства доступа к метаданным. 

На заре развития компьютерных технологий разработка программного обеспечения ПО была искусством, которым владела горстка посвященных. Сейчас программирование относится к категории общепризнанных научных технологий 1. Создание, внедрение и сопровождение программных систем это набирающий обороты бизнес, в который вовлечены сотни тысяч квалифицированных специалистов. Свободная конкуренция вынуждает производителей ПО выпускать качественные программы в максимально короткие сроки. Современные реалии таковы, что помимо первичных требований к программным системам, таких как полнота функциональных возможностей, надежность, производительность и дружественность интерфейса пользователя, все большую значимость приобретают требования, ранее бывшие вторичными. Речь идет об оперативности создания и модернизации программных продуктов, а также независимости успешного выполнения проекта от конкретных исполнителей. В таких условиях, как отмечает Эдвард Йордон 2, параметры срок разработки, штат разработчиков и бюджет большинства современных софтверных проектов отклоняются от нормальных значений на 50 и больше. Подобные проекты Йордон относит к категории безнадежных и утверждает, что безнадежные проекты являются нормой, а не исключением. В целом проблема выживания в безнадежных проектах является весьма актуальной и только совершенствованием методов управления решена быть не может необходимо использование прогрессивных технологий, таких как обобщенное и объектно-ориентированное программирование, программирование с использованием шаблонов паттернов, мультипарадигменное программирование, рефакторинг, разработка через тестирование, методология метауправления функциональностью информационных систем и др. Применение этих технологий должно повысить сопровождаемость ПО и, как следствие, оперативность разработки, а также обеспечить читабельность исходного текста, полноту и актуальность документации, что позволит добиться независимости от исполнителей. Таким образом, исследования, направленные на повышение гибкости и унифицированности прогрессивных технологий, всегда будут своевременными и актуальными. В настоящей статье рассматривается архитектура процессора метаданных MDE Metadata Engine как средства повышения гибкости реализации метауправления в информационных системах. Метауправление МУ это методология построения информационных систем ИС, при которой пользователю предоставляется возможность варьировать структуру данных и содержание вычислительного процесса их обработки при изменениях в соответствующей предметной области 3. Другими словами, в ИС с МУ реализована возможность метауправления функциональностью во время ее эксплуатации с использованием понятийной модели соответствующей предметной области. Совокупность структур хранения данных и алгоритмов выполнения типовых операций их обработки можно рассматривать как алфавит ИС, который определим как язык реализации функциональности ЯРФ. При метауправлении со стороны пользователя алфавиту ставится в соответствие метаописание понятийной модели предметной области и типовых операций обработки предметных данных. Используя имеющийся алфавит, пользователь формирует изменяет метаописания, далее преобразуемые в описания структур баз данных БД и или определяющие содержание процессов обработки предметных данных. Таким образом, суть МУ функциональностью информационной системы заключается в возможности задания метаописаний компонентов ИС, определяющих ее функциональность, на предметно-ориентированном дескриптивном языке. Выполнение метаописаний должно приводить к получению результатов решения прикладных задач, а при необходимости и к изменению используемых структур хранения данных. Алфавит ЯРФ образуют идентификаторы структур хранения данных в БД и заданных на них отношений, а также идентификаторы алгоритмов обработки данных . Синтаксис ЯРФ определяется его алфавитом и правилами композиции символов алфавита в логически правильные синтаксически допустимые цепочки предложения, описывающие структуру БД и процессы обработки данных . В свою очередь, правила это правила, являющиеся результатом применения синтаксических правил инструментальных лингвистических средств, использованных при создании БД и функциональных приложений ИС к алфавиту . Для любой ИС можно определить следующие понятия алфавит ЯРФ, грамматика, описывающая синтаксис ЯРФ собственно ЯРФ как множество всех терминальных цепочек, порождаемых грамматикой совокупность предложений ЯРФ, реализованных в ИС и определяющих ее функциональность. Реализация свойства синтаксической вариантности возможности варьирования алфавита в ИС предполагает введение нового языка языка описания функциональности ЯОФ, предоставляемого пользователю для задания описания, и, рис.1. По своей сути это должен быть предметно-ориентированный язык декларативного типа, синтаксис и семантика которого определяются при создании конкретной ИС на рис. 1 этот язык обозначен, а его грамматика . Поскольку, манипулируя предложениями на ЯОФ, пользователь осуществляет управление синтаксисом ЯРФ и или описаниями на ЯРФ, а предложения на ЯРФ определяют структуру БД и возможные процессы содержательной обработки данных в интересах решения прикладных задач, в синтаксически вариантной информационной системе реализуется двухуровневая схема управления. Верхний уровень управления по данной схеме является уровнем метауправления. Совокупность предложений на ЯОФ см. рис. 1 можно рассматривать как совокупность компонентов метаинформации МИ, имеющейся в ИС. Каждый компонент метаинформации является одним предложением на ЯОФ . Таким образом, метауправление функциональностью ИС заключается в разнесении предметно-ориентированного описания компонентов, определяющих функциональность ИС, и программной реализации этих компонентов так, что изменение описания приводит к формально вычисляемым изменениям в указанной выше реализации. Для представления МИ необходима соответствующая модель. В настоящее время во множестве приложений с МУ используется так называемая базовая модель представления метаинформации БМПМ, организующая знания в виде дерева следующих понятий сущностей, атрибутов, экземпляров сущностей, значений атрибутов и отношений. В качестве языка представления метаинформации во многих ИС с МУ используется расширяемый язык разметки XML Extensible Markup Language, соответствующий БМПМ таблица. Однако такое решение ограничивает разработчиков возможностями языка и средств доступа к сформированным на этом языке компонентам МИ. XML как языку представления МИ присущи следующие недостатки 1 отсутствие типизации атрибутов 2 отсутствие поддержки для указания отношений между сущностями, кроме отношения предок потомок, что вызвано отсутствием поддержки для идентификации экземпляров сущностей xml-документа как категории сущностей 3 большой объем xml-документа. Что касается средств доступа к компонентам МИ, описанным на XML, то их недостатками являются 1 низкая производительность, что обуславливается необходимостью загрузки всего xml-документа в оперативную память возможностью только последовательного доступа к экземплярам сущностей 2 отсутствие приемлемого контроля семантической целостности действительности xml-документа. Кроме того, метаданные в свою очередь могут выступать в роли данных, подлежащих учету в другой ИС. В этом случае метаданные должны храниться в сетевой или локальной БД, а для доступа должны использоваться средства соответствующей системы управления базами данных СУБД, которые для разных СУБД принципиально различны. Таким образом, использование при реализации МУ в информационных системах конкретного языка представления метаинформации и, следовательно, соответствующих средств доступа к метаданным в общем случае представляется неэффективным. Наиболее предпочтительным выглядит подход, обеспечивающий независимость реализации МУ в ИС от конкретного языка представления, что достигается путем внесения дополнительной прослойки между средствами формирования, перевода и интерпретации компонентов МИ и метаданными. При этом метаданные целесообразно представлять в виде БМПМ. В качестве упомянутой прослойки можно предложить процессор метаданных MDE Metadata Engine. MDE это унифицированный механизм доступа к метаданным рис. 2. это объекты ИС с МУ, осуществляющие формирование, перевод и интерпретацию компонентов МИ. Для доступа к метаданным абоненты используют MDE, а точнее провайдеры служб через интерфейсы оболочки. предоставляет абонентам доступ к метаданным, выраженным с использованием конкретного средства представления, в виде БМПМ. Таким образом, MDE обеспечивает независимость абонентов от средств представления метаданных. MDE состоит из оболочки доступа к метаданным и провайдеров служб. представляет метаданные в виде БМПМ. Оболочка является набором полиморфных интерфейсов семейства IMetaDataEngine. Под интерфейсом понимается абстрактный класс, состоящий только из открытых чисто виртуальных функций. Здесь и далее используются понятия объектно-ориентированного программирования ООП, подробнее о котором можно узнать, например, из работы 4. представляют метаданные, выраженные с использованием конкретных средств представления, в виде БМПМ. Доступ к метаданным осуществляется через провайдеры метаданных. Провайдеры служб являются классами, реализующими интерфейсы семейства IMetaDataEngine. Под реализацией интерфейса понимается наследование и реализация всех его методов. Для каждого средства представления метаданных должна быть своя группа провайдеров служб. обеспечивают доступ к метаданным, выраженным с использованием конкретного средства представления. это выраженные с использованием конкретного средства представления компоненты МИ. Таким образом, при использовании MDE разработчик абонентов метаданных оперирует не с понятиями языка представления МИ, такими как xml-тег, xml-атрибут, таблица БД, столбец таблицы БД и т. п., а с понятиями БМПМ. Рассмотрим MDE подробнее. На рис. 3 показана структура гипотетического MDE, обеспечивающего доступ к метаданным, одна часть которых хранится в виде xml-документов, вторая в БД MS SQL Server, а третья в БД Oracle. Доступ к xml-документам осуществляется использованием анализатора MSXML Microsoft XML Core Services и некоторого альтернативного гипотетического анализатора. К семейству IMetaDataEngine относятся следующие интерфейсы интерфейсы для доступа к структуре МИ IMDEntity сущность IMDAttribute атрибут сущности IMDRelationship отношение интерфейсы для доступа к МИ IMDInstance экземпляр сущности IMDProperty значение атрибута сущности. соответствует понятию сущность БМПМ и представляет ее сущности структуру, а именно наименование, сведения об атрибутах IMDAttribute и сведения о сущностях, находящихся в отношении с данной сущностью IMDRelationship. соответствует понятию атрибут сущности БМПМ и представляет о нем атрибуте следующие сведения наименование, тип данных, ограничения целостности данных. соответствует понятию отношение БМПМ и представляет о нем отношении следующие сведения сведения об объектах отношения IMDEntity, вид отношения зависимость, ассоциация, агрегация, композиция или обобщение. Виды отношений заимствованы из унифицированного языка моделирования UML Unified Modeling Language 5. соответствует понятию экземпляр сущности БМПМ и инкапсулирует следующие данные ссылку на сведения о структуре сущности IMDEntity, значения атрибутов IMDProperty, а также сведения об экземплярах сущностей, находящихся в отношении с экземпляром данной сущности IMDInstance, IMDRelationship. соответствует понятию значение атрибута сущности БМПМ и инкапсулирует следующие данные ссылку на сведения об атрибуте IMDAttribute, данные атрибута. Соответствующие диаграммы классов на языке UML представлены на рис. 4, . В качестве примера реализации MDE в листинге приведен исходный текст части интерфейса IMDProperty на языке C, детально описанном в работе 6. Интерфейс IMDProperty Пример демонстрирует независимость абонента данных функция SetVals от конкретного представления метаданных. К достоинствам предложенного подхода следует отнести гибкость и унифицированность, а к недостаткам необходимость дополнительных накладных расходов на реализацию MDE. В настоящей работе рассмотрен процессор метаданных MDE как средство повышения гибкости реализации метауправления в информационных системах путем обеспечения независимости объектов информационных систем с метауправлением, осуществляющих формирование, перевод и интерпретацию компонентов метаинформации, от средств представления метаданных. 