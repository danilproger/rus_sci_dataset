МЕТОДИКА ПОВЫШЕНИЯ ПРОИЗВОДИТЕЛЬНОСТИ   НЕБОЛЬШИХ ИНФОРМАЦИОННЫХ СИСТЕМ   ЗА СЧЕТ ОПТИМАЛЬНОЙ РЕСТРУКТУРИЗАЦИИ ДАННЫХ   НА ОСНОВЕ МНОГОМОДАЛЬНОГО РАСПРЕДЕЛЕНИЯ АТРИБУТОВ 

Рассматривается системный подход к повышению производительности небольших информационных систем  за счет оптимальной реструктуризации табличных структур данных. Авторами сформулирована задача оптимизации количества информационных блоков, необходимых для выполнения группы запросов на считывание информации, предложена целевая функция и структурные ограничения. Проанализирована невозможность использования грубых методов поиска оптимального решения. Предложена методика многомодального распределения  атрибутов в зависимости от частоты появления в группе запросов. Проведен эксперимент, подтверждающий эффективность разработанной методики для небольших информационных систем.  : система поддержки принятия решений, оптимизация, структуры данных, базы данных, системный анализ. 

Большинство многопользовательских информационных веб-систем выделяется такими требованиями, как оперативное взаимодействие с пользователем 1. Эффективное исполнение данного требования зависит не только от аппаратной составляющей, включающей в себя серверное оборудование и линии связи, но и от реализации программных компонентов, среди которых программное приложение, реализованное с применением веб-технологий и система управления базой данных СУБД. В статье рассмотрена методика повышения производительности информационной системы, за счет уменьшения среднего времени выполнения группы запросов на чтение информации базы данных. От структуры данных, способах ее физического размещения на жестких дисках зависит количество обращений к дисковым накопителям, которые сопровождаются соответствующими прерываниями и задержками по времени 2. Важным понятием при рассмотрении вопроса физической организации баз данных является понятие блока. Блок это минимальный адресуемый элемент внешней памяти, с помощью которого осуществляется обмен информацией между оперативной и внешней памятью. Запись и чтение блоков осуществляется через буферную часть оперативной памяти. Для организации каждого файла базы данных в зависимости от его размера во внешней памяти выделяется от одного до блоков, где размещаются записи. В одном блоке могут разместиться все записи или в нескольких блоках одна запись, или в одном блоке одна запись. От этого будет зависеть время считывания и записи элементов файла. Записи в блоках размещаются плотно, без промежутков, последовательно. В блоке часть памяти отводится под служебную информацию относительный адрес свободных участков памяти, указатели на следующий блок и т. д. Для хранения поступающих данных, которые должны размещаться в одном блоке, заполненном уже полностью, выделяется дополнительный блок памяти в области переполнения записи, организованной в виде одного блока, где записи связываются указателями в одну цепь. Таким образом, на скорость поиска влияют объем блока в байтах, объем файла, количество записей в блоке файла, количество записей в блоке индекса, количество блоков в файле, доля резервной части блока, число полей в записи, размер записи в байтах 2. Процесс построения оптимальной модели данных информационной системы включает оптимальное вертикальное распределение таблиц базы данных по блокам на дисковом накопителе. Основным критерием оптимизации модели данных информационной системы является минимальный размер строки таблицы реляционной базы данных, позволяющий в одном блоке хранить больше данных и, как следствие, минимизировать количество операций чтения блоков данных с жесткого диска при выполнении запросов к базе данных. Это достигается за счет уменьшения объема данных, побочно участвующих в запросе 3. В рамках методики предлагается разделить таблицы базы данных на несколько сущностей, связанных отношением один к одному. В соответствии с принципами блочного хранения данных в СУБД каждая таблица будет храниться в отдельном наборе блоков. При выполнении запроса на чтение информации СУБД считывает блоки данных с жесткого диска в оперативную память каждой таблицы, атрибуты которой участвуют в запросе. Задача повышения производительности информационной системы сводится к поиску оптимального разделения табличных структур базы данных с учетом конкретной группы запросов на чтение информации, выявленной статистически в рамках жизненного цикла БД 4. Для формализации задачи рассмотрим множества и параметры, влияющие на скорость обработки запросов на чтение информации к исследуемой таблице базы данных. 1. Целочисленный параметр, равный количеству атрибутов в исследуемой таблице. 2. Вектор типов данных 1, которые поддерживаются конкретной выбранной СУБД. Элемент вектора занимаемый элементом типа размер данных в байтах памяти. 3. Набор атрибутов столбцов таблицы, который задан бинарной матрицей, элемент которой равен единице, если столбец таблицы имеет тип, 1,..., 1,..., . 4. Множество, представляющее группу запросов 1, на чтение информации из таблицы базы данных, элемент множества кортеж из двух элементов, где числовой параметр, равный частоте появления запроса за выбранный период времени, 1, бинарный вектор, размерность которого равна количеству атрибутов таблицы . 1, если атрибут таблицы участвует в запросе, и 0 в противном случае. количество запросов в статистической выборке, выявленной в рамках жизненного цикла БД. 5. Множество индексов, характеризующихся набором полей таблицы, по которым построен индекс 1, . Элемент множества 1, бинарный вектор, размерность которого равна количеству атрибутов таблицы, 1, если атрибут таблицы участвует в индексе, и 0 в противном случае. 6. Хранимые процедуры и функции 1, характеризующиеся набором полей, используемых в теле хранимой процедуры или функции. Элемент множества 1, бинарный вектор, размерность которого равна количеству атрибутов таблицы, 1, если атрибут таблицы участвует в теле хранимой процедуры или функции, и 0 в противном случае. 7. Множество триггеров базы данных 1, характеризующихся набором полей таблицы, используемых в теле триггера. Элемент множества 1, бинарный вектор, размерность которого равна количеству атрибутов таблицы, 1, если атрибут таблицы участвует в теле триггера, и 0 в противном случае., Множество запросов к рассматриваемой таблице обрабатывается СУБД за время, . Временные затраты, можно представить в виде суммы временных затрат на чтение блоков данных таблиц, участвующих в запросах, и остальных временных затрат, к которым относятся временные затраты на выполнение плана обработки запроса, на передачу информации и т. д., . В рамках методики предлагается уменьшить слагаемое, влияющее на общее время выполнения запроса, . Временные затраты, в общем виде зависят от количества операций чтения блоков данных таблиц с жесткого диска. Пусть временная задержка, связанная со считыванием одного блока данных равна, тогда, где, число информационных блоков, которые необходимо считать с жесткого диска в кэш СУБД для дальнейшего выполнения запроса к таблице, заданной бинарной матрицей . Кэш СУБД находится в оперативной памяти вычислительного устройства. Функция, вычисляется как отношение, где количество строк в рассматриваемой таблице фиксированный размер блока данных выбранной СУБД в большинстве СУБД он равен 8Кб, величина, характеризующая дисковое пространство, занимаемое одной строкой таблицы в байтах, . Здесь, количество памяти, занимаемое служебными отметками СУБД для строки, считываемое при выполнении запроса, количество памяти, занимаемое атрибутами таблицы в строке, считываемое при выполнении запроса . Параметры и остаются неизменными. Так как временную задержку, связанную со считыванием одного блока данных, допускается считать постоянной величиной, на сумму временных затрат на чтение блоков данных таблицы, влияет количество блоков, необходимое для считывания, которое вычисляется как функция, . Подставим в формулу, формулу функции, . Функция, определяющая количество блоков, необходимых для считывания с жесткого диска в оперативную память при выполнении множества запросов к рассматриваемой таблице, ., В рамках методики предлагается разделить рассматриваемую таблицу на 1 дочерних таблиц, связанных с родительской отношением один к одному, 11. Введем следующую переменную 1, если-йатрибутнужновыделитьв-ютаблицу, 0 впротивномслучае. Переменные представляют собой бинарную матрицу для таблицы реляционной базы данных размерностью, где количество атрибутов таблицы. Строки матрицы соответствуют таблицам, на которые разбивается родительская таблица, а столбцы соответствуют их атрибутам. Количество блоков, которое необходимо считать с жесткого диска для выполнения множества запросов к таблице, вычисляется как функция, равная сумме блоков, которые необходимо считать с жесткого диска для выполнения множества запросов к каждой из дочерних таблиц. Максимальное количество дочерних таблиц равно числу атрибутов родительской таблицы и равно ., где, если 0, 0 впротивномслучае. 1,..., 1,..., 1,..., . Параметры и являются постоянными, функция, характеризующая количество информации, которая занимает одну строку дочерней таблицы в байтах, функция, характеризующая дисковое пространство, занимаемое служебными отметками СУБД в строке дочерней таблицы в байтах. Следовательно, задача повышения производительности системы сводится к поиску такого разделения таблицы на дочерние, при котором сумма блоков, которые необходимо считать в кэш СУБД для выполнения множества запросов, минимально. Целевая функция, min, где, если 0, 0 впротивномслучае. 1,..., 1,..., 1,..., . При структурных ограничениях 1 каждый атрибут родительской таблицы может присутствовать только в одной дочерней таблице 1, 1,..., 1,..., 2 атрибуты таблицы, используемые при построении индексов, должны принадлежать хотя бы одной дочерней таблице, 1,..., 0, 1,..., 1,..., 3 атрибуты таблицы, используемые в теле хранимых процедур или функций, должны принадлежать хотя бы одной дочерней таблице, 1,..., 0, 1,..., 1,..., 4 атрибуты таблицы, используемые в работе триггеров исследуемой таблицы, должны принадлежать хотя бы одной дочерней таблице, 1,..., 0, 1,..., 1,..., 5 отношение количества физических блоков данных, необходимого для хранения данных рассматриваемой таблицы до применения методики, к количеству блоков, необходимому для хранения данных в дочерних таблицах, полученных после применения методики, не должно превышать заданного параметра 01 Целевая функция не линейна, а также не линейны ограничения. Переменная бинарная матрица размерностью . Представим переменную в виде машинного слова длиной . Следовательно, количество возможных комбинаций переменной определяется как 2 . Исходя из этого задача обладает экспоненциальной сложностью и является трудной 5 6. Для решения задачи разработана методика, основанная на многомодальном распределении атрибутов исследуемой таблицы по критерию появления их в группе запросов на чтение информации. Для получения оптимального разбиения исследуемой таблицы с числом атрибутов, равным, необходимо выполнить следующие действия. 1. Получить для каждого атрибута значение частоты его появления в группе запросов к базе данных. Вектор частот появлений атрибутов исследуемой таблицы в группе запро сов, где 1, 1,..., . 2. Отсортировать атрибуты по частоте их появления в группе запросов 1, . 3. Сформировать группы атрибутов с одинаковой частотой. Получим разбиение конечного множества .,..., в котором ..., 1, где, если, 1, 1, . 4. Получить разбиение множества групп атрибутов. Получим разбиение конечного множества .,..., в котором ..., 1, где, 1, 1 . коэффициент, характеризующий количество разбиений множества групп атрибутов, 1, . Варьируя параметр 1, мы можем получать решения, эффективность которых оценивается при помощи выведенной в рамках исследования целевой функции. Для анализа эффективности полученной методики были выделены исходные данные и базовые множества. 1. Параметр 16, характеризующий количество столбцов в таблице пп Наименование столбца Тип данных СУБД 1 Id bigint 2 Attr1 nchar10 3 Attr2 nchar10 4 Attr3 nchar10 5 Attr4 nchar10 6 Attr5 nchar10 7 Attr6 nchar10 8 Attr7 nchar10 9 Attr8 nchar10 10 Attr9 nchar10 11 Attr10 nchar10 12 Attr11 nchar10 13 Attr12 nchar10 14 Attr13 nchar10 15 Attr14 nchar10 16 KeyForSearch nchar10 2. Множество типов данных, которые поддерживаются конкретной выбранной СУБД MS SQL 2012. Задано вектором, характеризующим занимаемое типом данных дисковое пространство в байтах, 4, 8, 20 количество типов данных СУБД уменьшено для компактности. Множество типов данных СУБД MS SQL 2012 может быть представлено в виде таблицы пп Наименование типа данных Занимаемое дисковое пространство, байты 1 int 4 2 bigint 8 3 nchar10 20 3. Набор атрибутов столбцов таблицы 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 4. Множество, представляющее группу запросов на получение информации из базы данных, состоящее из 3 элементов пп Количество запросов, поступивших на сервер за выбранный период времени Бинарный вектор атрибутов, участвующих в запросе 1 10 0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1 2 20 1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1 3 5 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 Для проведения эксперимента были исключены ограничения в виде индексов, триггеров и хранимых процедур, а также был исключен коэффициент дополнительного использования памяти. Это позволило продемонстрировать преимущества предлагаемой методики над традиционным подходом. В результате применения методики было предложено разделить исследуемую таблицу на четыре дочерних таблицы A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13 A14 A15 A16 T1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 T2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 T3 1 1 0 0 1 1 0 0 1 1 0 1 1 1 0 0 T4 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 Полученное решение было проверено статистически на всей группе запросов. Для повышения достоверности экспериментов были выполнены все 35 запросов на чтение информации. Это позволило получить сведения о запросах, которые после применения методики стали выполняться быстрее, а также выделить подмножество медленных запросов. Результаты экспериментов, а также суммарное время выполнения группы запросов представлены в виде таблицы Количество строк в исследуемой таблице Время выполнения группы запросов к исследуемой таблице, мс Время выполнения группы запросов к таблицам после разделения на дочерние, мс 300 000 28 312 23 021 600 000 59 521 48 271 1 200 000 130 485 107 363 2 400 000 311 223 279 491 Эффективность применения методики представлена на рисунке. а б В результате проведенного исследования была сформулирована проблема повышения производительности информационной системы за счет реструктуризации табличных структур данных. Получено ее описание в теоретико-множественном представлении. Сформулированы целевая функция и ограничения. Предложен подход к нахождению субоптимального разбиения исследуемой табличной структуры на дочерние путем многомодального распределения атрибутов по частоте их появлений в запросах на чтение информации. Предложенная методика особенно актуальна для таблиц БД, которые используют небольшие информационные системы. Полученные результаты могут быть использованы при проектировании отечественных СУБД. Дальнейшие исследования в этой области связаны с разработкой методик оптимальной реорганизации табличных структур данных для крупных информационных систем. Открытая апробация методики реализуется в виде веб-системы, в которой любой исследователь может ввести сведения о своей БД и получить рекомендуемое оптимальное разделение таблиц. 