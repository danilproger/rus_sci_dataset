ИСПОЛЬЗОВАНИЕ АЛГОРИТМОВ МУЛЬТИСТАРТА  И ПОИСКА С ЗАПРЕТАМИ ДЛЯ РЕШЕНИЯ ЗАДАЧИ  РАЗМЕЩЕНИЯ БАЗОВЫХ СТАНЦИЙ 

Постановка проблемы:  синтез топологической структуры беспроводной сети передачи данных подразумевает планирование территориального размещения базовых приемо-передающих станций на местах-кандидатах и подключение  к ним клиентов. Недостатками существующих подходов к решению этой задачи  являются использование методов, не  показывающих высокую скорость расчета (метода ветвей и границ, эвристического метода Лагранжа и др.); отсутствие  ограничений, учитывающих уровень затухания сигнала при распространении от базовой станции к клиенту и обратно,  а также уровень межсотовых помех; использование всего одного типа базовых станций. Целью исследования является  создание модели решения задачи размещения базовых станций, не имеющей указанных недостатков.  Результаты:  сформулирована задача размещения базовых станций с учетом уровня отношения сигнала к помехам для клиентов  сети. Решение задачи представляется в виде вектора структур, каждая из которых хранит информацию об одном месте-кандидате (тип установленной базовой станции, список подключенных клиентов). Разработаны модификации алгоритмов вероятностного поиска с запретами и мультистарта, в основе которых лежит понятие окрестности текущего  решения. Новое решение из окрестности текущего может быть получено при помощи одной из шести операций: смены  типа одной станции на более дешевый/дорогой, переподключения одного клиента, удаления одной базовой станции,  добавления одной станции, перемещения одной базовой станции. С целью избежать «застревания» в локальных оптимумах при поиске с запретами алгоритму запрещается просматривать решения из списка запретов. Новизна подхода  заключается в том, что в список запретов добавляются не конкретные прошлые решения, а операции по изменению  конфигурации сети, которые могут вернуть нас в старые локальные оптимумы. Сущность модифицированного алгоритма мультистарта состоит в следующем: используются всего две операции для получения нового решения (удаление базовой станции и смена типа на более дешевый), просматривается только часть окрестности, переход к новому решению  осуществляется по принципу «первое улучшение», алгоритм поиска лучшего решения запускается несколько раз. Разработанные алгоритмы реализованы как программное обеспечение на языке Delphi. Показано, что новые алгоритмы  демонстрируют лучшие результаты, чем метод локального поиска.  Практическая значимость:  разработанные модификации методов мультистарта и поиска с запретами позволяют находить решение задачи размещения базовых станций  за приемлемое время, на много порядков быстрее точного метода полного перебора. Выявлена зависимость качества  решения поставленной задачи методом вероятностного поиска с запретами от длины списка запретов и значения параметра рандомизации окрестности. Ключевые слова  — размещение базовых станций, алгоритм мультистарта, поиск с запретами, беспроводные  сети, оптимизация, SIR. 

Как известно 1, задача проектирования сети в том числе и беспроводной может быть сведена к отысканию минимума функционала приведенной стоимости при наличии ограничений на вероятностно-временные и структурные характеристики сети и при требовании принадлежности множества вариантов архитектуры сети к области технически реализуемых решений. Среди русскоязычных публикаций по проблеме размещения базовых станций БС отметим работу 2, посвященную сетям WiMAX. Подробная классификация алгоритмов размещения БС для сетей UMTS 3G дана в статье 3. В данной работе сформулирована задача размещения БС, учитывающая уровень затухания сигнала при распространении от БС к клиенту и обратно, уровень межсотовых помех и наличие в сети нескольких типов БС. Поставленная задача решается метаэвристическими методами вероятностного поиска с запретами ПЗ и мультистарта МС, демонстрирующими высокую скорость и точность нахождения решения. Задача размещения БС заключается в том, что у нас есть клиентов, каждого из которых необходимо подключить к БС. Базовая станция может быть установлена на одном из месткандидатов. Имеется типов БС, отличающихся по своим характеристикам. Задача сводится к минимизации общей стоимости установленных БС при выполнении ряда ограничений. Для описания решения задачи размещения БС нам необходимо воспользоваться такой единицей представления данных, как структура. Структура композитный тип данных, позволяющий хранить совокупность переменных различного типа полей, объединенных одним именем 4. В нашем случае структура содержит в себе три поля переменную, показывающую, какого типа БС установлена на данном месте-кандидате если 0, то БС не установлена переменную число клиентов, подключенных к данному месту одномерный массив вектор целых чисел размерности, содержащий номера клиентов, подключенных к данному месту. Решение задачи мы будем представлять в качестве вектора, элементами которого являются структуры, соответствующие местам-кандидатам здесь и в дальнейшем запись вида означает обращение к -му элементу вектора элементы массивов нумеруются, начиная с 1. Обращение к полю обозначается при помощи символа .. То есть 4. означает тип БС 4-го места-кандидата, а, например, 5. 3 номер 3-го клиента, подключенного к БС на месте 5. Клиент может быть подключен к месту-кандидату, только если на нем уже установлена БС, т. е. для каждого места, у которого . 0, должно выполняться неравенство . 0. Пусть вектор, элементами которого являются требуемые полосы пропускания для клиентов вектор, элементами которого являются максимальные производительности БС разного типа. Для каждой установленной БС суммарный требуемый трафик не должен превосходить максимально возможную производительность оборудования 1 Пусть вектор, элементами которого являются максимальные мощности БС разного типа вектор максимальных мощностей клиентов вектор, элементами которого являются чувствительности БС разного типа вектор, элементами которого являются чувствительности клиентов двумерный массив матрица размерности, каждый элемент которого 0 1 отражает уровень затухания между -м клиентом и местом установки . Несмотря на затухание сигнала на пути от БС к клиенту, мощность, доходящая от приемника к передатчику, должна превышать минимальную целевую мощность 2 Ограничение 2 составлено для режима downlink. Для режима uplink аналогичное ограничение выглядит следующим образом 3 Целевая функция, которую необходимо минимизировать, имеет вид 4 где вектор стоимостей включая установку БС разного типа. Первое слагаемое 4 суммарная стоимость комплекса. Второе слагаемое отвечает за учет уровня SIR для всех клиентов системы. SIR отношение уровня сигнала к уровню помех signalto-interference ratio 5, в общем случае оно рассчитывается так 5 В нашей задаче мы рассчитываем SIR отдельно для каждого клиента. В числителе фигурирует получаемый сигнал от той БС, к которой подключен клиент, в знаменателе сигналы от остальных БС, которые создают помехи 6 где 0, если и, иначе 1. Коэффициент обеспечивает одновременный учет в целевой функции затрат на создание сети и уровня SIR клиентов. имеет размерность стоимости комплекса БС, тем самым обеспечивая сохранение размерности в формуле 4, так как SIR безразмерная величина. должен обеспечивать штраф за низкий уровень SIR и награду за высокий. В данной работе принято 10 условных единиц стоимости имеет отрицательное значение, так как мы решаем минимизационную задачу, а значит, хороший высокий уровень SIR должен уменьшать целевую функцию. Необходимо отсортировать типы БС по возрастанию цены. В дальнейшем мы будем исходить из того, что -й тип БС дороже 1-го и дешевле 1-го. Для начала мы предлагаем рассмотреть алгоритм локального поиска ЛП, так как именно он лежит в основе большинства метаэвристических методов оптимизации. Данный алгоритм является итеративным методом. На каждом шаге рассматривается некоторое множество соседних решений так называемая окрестность текущего решения. В качестве следующего из нее выбирается решение, доставляющее максимум оценочной функции. Процесс продолжается до тех пор, пока в окрестности имеются решения лучшие, чем текущее по отношению к оценочной функции 6. Ниже представлен простейший алгоритм ЛП для задачи минимизации 7. Предполагается, что вектор решение некоторой оптимизационной задачи. Множество всех возможных векторов обозначим . Пусть требуется минимизировать некоторую функцию на множестве 1. начальное решение. 2. Текущее решение . 3. Построить окрестность соседних решений . 4. Найти такое решение, что для всех . 5. Положить . 6. Если окрестность соседних решений не содержит ни одного решения, улучшающего целевую функцию, то работа алгоритма прекращается, результат, иначе перейти к шагу 3. Метод поиска с запретами Tabu Search является одним из наиболее эффективных метаэвристических методов. Предложил его в 80-е гг. Ф. Гловер F. Glover 8, 9. Отличительная черта этого метода заключается в процессе введения и снятия некоторых искусственных ограничений задачи в ходе поиска решения 6. Основным недостатком метода ЛП является его остановка при достижении локального оптимума. Мы же ищем глобальный оптимум. Очевидно, что глобальный оптимум есть также и локальный, поэтому для успешного поиска решений мы должны как-то переходить от одного локального оптимума к другому 10. В методе ПЗ с целью преодолеть вышеописанный недостаток вводится так называемый список запретов Tabu List. Этот список хранит некоторое количество предыдущих решений, и при выборе нового решения запрещается выбирать из окрестности решения, содержащиеся в списке запретов 10. Данный прием помогает избегать застревания в локальном оптимуме, расширяет пространство поиска, позволяя алгоритму поиска с запретами находить лучшие решения, чем метод ЛП. Как уже было сказано, глобальный оптимум является в то же самое время одним из локальных оптимумов. Соответственно, если просмотреть все локальные оптимумы и выбрать из них лучший, то это даст нам окончательное решение задачи. Метод МС нацелен на то, чтобы обойти как можно большее число локальных оптимумов 11. Суть метода проста алгоритм ЛП вернее, его модификация запускается несколько раз. Лучшее решение, полученное при каждом запуске поиска, сохраняется в памяти. По окончании времени поиска лучший из локальных оптимумов возвращается в качестве решения задачи. Метод даст хорошие результаты при выполнении двух условий 11 каждый запуск алгоритма будем называть его старт должен стартовать из нового начального решения сама процедура ЛП должна быть выполнена так, чтобы каждый новый старт по возможности приводил в новый локальный оптимум. Это необходимо для расширения пространства поиска. Метод МС показывает результаты, сопоставимые с другими метаэвристиками, и поэтому часто используется для решения NP-трудных задач 12, 13. Понятие окрестность является самым интересным в метаэвристиках, основанных на ЛП. Оно плохо формализовано и для каждой конкретной задачи оптимизации обладает своей спецификой. В случае задачи размещения БС мы имеем решение, представленное в виде ряда БС с подключенными к ним клиентами. Необходимо определить, какие решения являются наиболее близкими к нашему. Нами был предложен метод формирования окрестности решения посредством осуществления небольших изменений в текущем решении. Новое решение из окрестности текущего решения можно получить одним из шести способов операций. 1. . Подобного рода операция . . 1 возможна для каждого элемента массива, у которого . 1. При новой конфигурации БС мы должны проверить решение на соответствие требованиям 13. 2. Данная операция . . 1 возможна для каждого элемента массива, у которого . и . 0. 3. т. е. подключение к другой БС. Данная операция возможна для каждого клиента. Если мы ищем новую БС для -го клиента, то мы должны последовательно проверяя на соответствие ограничениям 13 пробовать подключить его к одному из мест-кандидатов кроме его текущего места, начиная с самого ближнего к клиенту . Очевидно, что место, к которому мы хотим подключить клиента, должно иметь активную БС . 0. 4. . Данная операция возможна для каждого активного места-кандидата. Для каждого из клиентов удаляемой станции мы запускаем операцию Переподключение одного клиента. Если все клиенты -й станции можно подключить к другим БС, значит удаление -й станции возможно. 5. . Данная операция возможна для каждого пустого места . 0. Мы устанавливаем на место новую станцию и пробуем подключить к ней самого близкого клиента пусть его номер . Если такое подключение возможно для -го места выполняются ограничения 13, то новое решение является допустимым. Клиента с номером, естественно, необходимо отключить от его старой БС. 6. . Данная операция возможна для каждого активного места-кандидата. Пусть мы перемещаем БС с места . Тогда мы должны последовательно пробовать поместить ее на пустые места-кандидаты, начиная с самого ближнего к месту, с учетом того, что на новом месте должны выполняться ограничения 2 и 3. Рассмотрим рандомизированную окрестность, где каждый элемент окрестности включается в множество с вероятностью 0 1 параметр рандомизации окрестности независимо от других элементов 14. С ненулевой вероятностью множество может совпадать с, может оказаться пустым или содержать ровно один элемент. Алгоритм поиска с запретами, представленный в данном разделе, осуществляет вероятностный ЛП по рандомизированной окрестности поэтому он называется вероятностный ПЗ, совершая шаги как улучшающие, так и ухудшающие целевую функцию, что позволяет алгоритму перемещаться от одного локального оптимума к другому в целях найти среди них лучшее решение. Использование рандомизированной окрестности дает лучшие результаты по сравнению с просмотром полной окрестности 1416. Очевидно, что при 1 окрестность совпадает с . Основным механизмом, позволяющим алгоритму покидать локальные оптимумы, является список запретов . Список строится по предыстории поиска, т. е. по нескольким последним итерациям, и запрещает часть окрестности текущего решения 7. В классическом методе поиска с запретами в добавляются те решения, которые были признаны лучшими на соответствующей итерации и к которым был применен переход как к новым текущим решениям. Обновление списка запретов состоит из двух этапов удаление самого старого элемента списка если текущая длина списка равна максимальной длине и добавление в список нового элемента. Однако специфика нашей задачи такова, что для нее характерно очень большое пространство поиска, в котором легко застрять в локальной окрестности, принадлежащей одному пику, даже если использовать очень большой список запретов. Возможных решений может быть слишком много. Поэтому мы предлагаем в список запретов добавлять не решения, а операции, которые нельзя будет осуществлять в течение следующих итераций. То есть каждое изменение, примененное к решению, порождает запрет на операцию, которая может вернуть нас в это самое решение. Ниже приведены пары изменение запрет далее фразой типа -я БС мы для краткости обозначаем БС, расположенную на -м месте 1 смена типа -й БС на более дешевый смена типа -й БС на более дорогой 2 смена типа -й БС на более дорогой смена типа -й БС на более дешевый 3 переподключение -го клиента переподключение -го клиента 4 удаление -й БС добавление -й БС 5 добавление -й БС удаление -й БС 6 перемещение -й БС на -е место перемещение -й БС. Представим общую схему вероятностного поиска с запретами для задачи размещения БС. 1. Построить начальное решение . Введем обозначения параметр рандомизации окрестности список запретов лучшее решение в текущей окрестности целевая функция решения лучшее решение задачи. 2. . 3. . 4. Построим окрестность решения при помощи шести вышеописанных операций кроме тех, которые есть в списке запретов . 5. . 6. Цикл. Для каждого решения из построенной окрестности выполним 6.1. Пусть случайное число из диапазона 0 1. Если, то переход к следующей итерации цикла. 6.2. Если решение недопустимое не удовлетворяет одному из ограничений 13, то переход к следующей итерации цикла. 6.3. Если, то и . 7. Если, то переход к п. 11. 8. . 9. Обновить . 10. Если, то . 11. Если время работы алгоритма истекло, то переход к п. 12, иначе к п. 4. 12. Вернем в качестве решения задачи. Введем понятие жадного алгоритма. В жадном алгоритме делается выбор, который является самым лучшим в данный момент, т. е. производится локально оптимальный выбор в надежде, что он приведет к оптимальному решению глобальной задачи 17. В предлагаемом нами методе мультистарта используется жадная эвристика первое улучшение 11. Суть ее заключается в том, что при ЛП мы рассматриваем одно случайное соседнее решение из окрестности текущего решения . Если лучше, чем, то текущим решением становится . Подобный переход к первому же лучшему решению расширяет пространство поиска, что в сочетании со стартами из разных начальных решений позволит попасть в большее количество разных локальных оптимумов. Новые потенциальные решения мы будем генерировать не из окрестностей или, а из окрестности . окрестность, получаемая при помощи операций удаление одной БС и смена типа одной БС на более дешевый к . Таким образом, в отличие от, содержит только решения с целевой функцией, лучшие, чем у . Ниже представлена общая схема алгоритма мультистарта для задачи размещения БС. 1. 0. Введем обозначения максимальное число итераций алгоритма подряд без улучшения целевой функции число итераций подряд без улучшения целевой функции. 2. 1 0. 3. Построить начальное решение . 4. Сгенерируем решение из окрестности, полученное при помощи операции Удаление одной БС или Смена типа одной БС на более дешевый. 5. Если решение допустимое удовлетворяет каждому из ограничений 13, то переход к п. 6. Если время работы алгоритма истекло, то переход к п. 9, иначе к п. 4. 6. Если, то и 0, иначе 1. 7. Если время работы алгоритма истекло, то переход к п. 9. 8. Если, то переход к п. 2, иначе к п. 4. 9. Вернем лучшее из решений в качестве окончательного решения задачи. Разработанные алгоритмы реализованы как программное обеспечение в среде Embarcadero Delphi XE5. С его помощью был проведен ряд вычислительных экспериментов по нахождению оптимального расположения БС и подключения к ним клиентов. Моделирование проводилось на компьютере с процессором Intel Core i5-3470 и оперативной памятью 6 ГБ. Первая серия вычислительных экспериментов была посвящена исследованию быстродействия и точности предложенных модификаций методов ПЗ и МС путем сравнения их с методом полного перебора ПП. Принцип алгоритма ПП очень прост мы должны перебрать все возможные решения задачи, отсеять все недопустимые решения, а среди оставшихся выбрать лучшее с точки зрения значения целевой функции. Так как метод ПП не позволяет решать задачу за полиномиальное время, сравнение проводилось на задачах малой и средней размерности. Пусть 2. Эксперименты проводились на 9 тестовых задачах по 3 значения и порождают 9 комбинаций. Зафиксируем параметры алгоритма ПЗ 50, 0,15, 0,1 с. Параметры алгоритма МС 50, 0,1 с. Результаты работы алгоритмов приведены в табл. 1. Каждая ячейка табл. 1 содержит три строки верхняя это время работы алгоритма ПЗ в секундах, в скобках значение соответствующей целевой функции в условных единицах, средняя и нижняя аналогичные величины для МС и ПП соответственно. Время решения задачи для методов ПЗ и МС приводится как среднее за 10 запусков алгоритма, значение целевой функции как лучшее за 10 запусков алгоритма. Представленные в табл. 1 данные свидетельствуют о том, что на задачах малой размерности предложенные алгоритмы обеспечивают получение точных значений целевой функции, как и метод ПП, который дает точное решение при каждом запуске алгоритма. При этом алгоритмы ПЗ и МС справляются с решением задач размещения БС за очень малое время. Далее был проведен ряд вычислительных экспериментов с целью выявить влияние параметра рандомизации окрестности и длины списка запретов на качество получаемых решений методом ПЗ. В качестве тестового примера была выбрана задача следующей размерности 100, 100, 3. Результаты эксперимента представлены на рисунке. По оси абсцисс отложены значения в диапазоне 5 100 с дискретностью 5 . По оси ординат отложены значения оценки относительной погрешности решений, которая считается как среднее отклонение полученных решений от лучшего из известных решений задачи. Для каждой пары и приведены усредненные результаты за 50 запусков, 20 с. Как видно из графиков, на данных примерах алгоритм ПЗ достигает наибольшей эффективности при 0,1 0,35, что в целом согласуется с результатами работы 14. Также выявлено, что при значениях длины списка запретов, равных 50100, алгоритм поиска с запретами показывает наилучшие результаты. Наилучшее значение оценки относительной погрешности получено при 50 и 0,15 2,709 . Также был проведен ряд вычислительных экспериментов с целью сравнить эффективность методов ЛП, ПЗ и МС при решении задач разной размерности. Зафиксируем параметры алгоритма ПЗ 50, 0,15. Параметры алгоритма МС 50. Моделирование производилось следующим образом сначала каждую из задач мы решали методом ЛП усредняя результаты за 50 запусков. Далее мы решали ту же задачу методами ПЗ и МС те же 50 запусков для каждого метода, ограничивая их работу временем, которое понадобилось методу ЛП для решения задачи. Результаты эксперимента приведены в табл. 2. Каждая ячейка таблицы содержит две строки верхняя это время работы алгоритма, нижняя значение оценки относительной погрешности решений, получаемых данным алгоритмом. Из таблицы видно, что методы ПЗ и МС решают задачу размещения БС лучше, чем алгоритм ЛП. При этом алгоритм МС показывает лучшие результаты, чем вероятностный ПЗ. Проведенное компьютерное моделирование позволяет сделать следующие выводы. 1. Предложенные модификации алгоритмов поиска с запретами и мультистарта способны решать задачу размещения БС. 2. Для задач малой и средней размерности результаты методов ПЗ и МС совпадают с результатами метода ПП. При этом предложенные методы решают задачу на много порядков быстрее, чем точный метод ПП. 3. Программное обеспечение, разработанное на базе предложенных алгоритмов, может находить решение задач средней и большой размерности за время, не превышающее 1 мин. 4. Рекомендуемыми параметрами алгоритма ПЗ, позволяющими находить хорошее решение за приемлемое время, являются следующие 50100, 0,10,35. 5. Предложенные модификации методов ПЗ и МС решают задачу размещения БС лучше, чем алгоритм ЛП. При этом алгоритм МС показывает лучшие результаты, чем ПЗ. 