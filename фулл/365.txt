ИССЛЕДОВАНИЕ СТАТИСТИЧЕСКИХ СВОЙСТВ АЛГОРИТМОВ МИНИМИЗАЦИИ НЕДЕТЕРМИНИРОВАННЫХ КОНЕЧНЫХ АВТОМАТОВ С ИСПОЛЬЗОВАНИЕМ ПРОГРАММЫ REFAM 

В статье рассматриваются вопросы минимизации недетерминированных конечных автоматов с использованием программы ReFaM. В данном экспериментальном программном продукте с открытым исходным кодом с использованием технологий параллельного программирования OpenMP и MPI реализованы несколько точных и приближенных алгоритмов вершинной минимизации, в частности классический алгоритм Камеды–Вейнера и эвристические алгоритмы на его основе. Как правило, из-за вычислительной сложности алгоритмы минимизации недетерминированных конечных автоматов редко реализуются в программных средствах для работы с конечными автоматами и родственными структурами, поэтому данная программа может использоваться как в исследовательских, так и в учебных целях. Одной из ее отличительных особенностей является детальное описание процесса минимизации и сбор статистики на каждом его шаге. В данной работе приводятся описание основных возможностей программы и некоторые экспериментальные результаты.

 Недетерминированным конечным автоматом НКА называется пятерка . Конечные автоматы КА широко применяются в разных областях, в частности в теории формальных языков, где они наряду с другими структурами, например регулярными выражениями РВ, используются для описания языков 1. В теории конечных автоматов одной из важнейших является задача вершинной минимизации, которая формулируется следующим образом для данного автомата A найти эквивалентный ему автомат то есть автомат, задающий тот же язык, который имел бы минимально возможное число состояний. Как показано в 2, для НКА задача вершинной минимизации является вычислительно трудной PSPACE-полной, в то время как для ДКА соответствующая задача имеет сложность Onlogn, где n число состояний в автомате. Из-за малой практической применимости алгоритмы вершинной минимизации НКА обычно не реализуются в большинстве программ для работы с конечными автоматами и родственными структурами. Рассмотрим некоторые возможности нового экспериментального программного средства ReFaM . Основными отличиями данной программы от других программ для работы с КА являются реализация нескольких точных и приближенных алгоритмов минимизации НКА и возможность получения подробного отчета и статистики о каждом шаге работы алгоритма. Все это делает возможным применение рассматриваемой программы как в исследовательских, так и в учебных целях. Основные сведения о программе ReFaM Настоящая программа является проектом с открытым исходным кодом, написанным на языке C. Данный проект это часть библиотеки параллельных метаэвристических алгоритмов HeO 3. Для описания КА в программе ReFaM используется xml-формат. В этом случае данные метки генерируются автоматически. В автоматах допускается наличие пустых -переходов. Список команд ReFaM с описанием их аргументов приведен в таблице 1. Большинство команд ReFaM имеют вид command indir outdir. Каждая такая команда сканирует все xml-файлы в каталоге indir и, если в них содержатся описания автомата или регулярного выражения, обрабатывает их содержимое, а результаты помещает в каталог outdir. Назначение многих команд понятно из их названия. Остановимся подробнее на некоторых командах. Команда canonize строит для данного автомата минимальный детерминированный автомат. Команда re2fa формирует по данному регулярному выражению конечный автомат . Команда export позволяет конвертировать xmlпредставление автоматов в другие форматы. Команда generate может использоваться для случайной генерации автоматов. Как правило, подобные команды имеются и в других программах для работы с КА. Например, в результате экспорта xml-описания НКА в формат GAP получается следующий результат а описание таблицы переходов в формате LaTeX будет выглядеть так С помощью команд buildba и buildcom могут быть построены соответственно базисный и полный автоматы для данного КА или РВ. Оба автомата являются инвариантами для данного регулярного языка, а их определение и алгоритмы построения можно найти, например, в 1. Заметим, что в известных программах для работы с КА возможность построения данных автоматов отсутствует, кроме того, оба автомата могут использоваться для минимизации НКА по различным критериям. Вершинная минимизация НКА осуществляется с помощью двух команд minkw и mincom. В настоящее время в программе ReFaM реализованы точные и приближенные алгоритмы минимизации, основанные на классическом алгоритме Камеды Вейнера 4 и алгоритме, использующем COMавтомат 1, 5. В обоих алгоритмах используются двоичные матрицы соответствия состояний и минимальные автоматы строятся на основе покрытий данных матриц гридами . Второй метод идеологически ближе к методу минимизации на основе так называемого уиверсального автомата 6. Кроме входного и выходного каталогов, в этих командах дополнительно могут указываться конфигурационный файл config.xml с настройками алгоритмов минимизации и начальное значение генератора случайных чисел seed для эвристических версий алгоритмов. В числе отличительных особенностей ReFaM распараллеливание наиболее трудоемких частей алгоритмов с использованием технологий параллельного программирования OpenMP и MPI и b, c b b a, b возможность получения подробного отчета и статистики о каждом шаге процесса минимизации. В конце работы данные результаты статистически обрабатываются вычисляются минимальные, максимальные и средние значения, а также среднеквадратическое отклонение. При этом имеется возможность задавать подробность отчета с помощью уровней от 0 до 3 . Аналогичным образом документируется минимизация на основе COM-автомата. Численные эксперименты Как уже было отмечено, задача вершинной минимизации НКА является вычислительно трудной. Очень интересной задачей является практическое изучение статистических свойств объектов, возникающих в процессе минимизации, в зависимости от характера входных данных. Для решения данной задачи может использоваться программа ReFaM. В командах minkw и mincom предусмотрена возможность, позволяющая с помощью соответствующей опции в конфигурационном файле построить все необходимые для минимизации объекты, не запуская сам процесс поиска. Для каждой выборки оценивались число состояний в автоматах detA и detrevA, число непустых состояний в канонических автоматах число строк и столбцов RAM, размер, плотность единиц и число гридов в RAM. Результаты исследования представлены в таблице 2 среднее значение, среднеквадратическое отклонение. Из приведенных данных видно, что для рассматриваемых выборок с увеличением плотности переходов средняя сложность рассматриваемых объектов уменьшается. В заключение следует отметить, что в работе были рассмотрены некоторые возможности программы ReFaM, предназначенной для минимизации НКА. Отличительными особенностями программы являются возможность получения подробных отчетов о процессе минимизации и сбор обширной статистики, что делает возможным применение данной программы как в исследовательских, так и в учебных целях. В настоящее время ведется работа по добавлению в программу новых точных и приближенных алгоритмов минимизации, а также алгоритмов вершинной минимизации. 