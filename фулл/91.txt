ИНТЕГРАЦИЯ CLIPS В ЭКСПЕРТНУЮ СИСТЕМУ ПРОДУКЦИОННОГО ТИПА 

При интеграции ядра CLIPS в написанную на C++ программу возникает проблема налаживания их взаимодействия. Предлагается способ организации программного интерфейса между написанной на C++ программой и встроенным в нее ядром CLIPS. Описываются процедуры и объекты данных CLIPS и C++, используемые для обмена данными между программой и CLIPS-средой.

 Экспертные системы важная прикладная область искусственного интеллекта. Наиболее распространенными являются экспертные системы продукционного типа, к которым относятся большинство диагностических, планировочных и консультационных экспертных систем. Широкое распространение экспертных систем продукционного типа обусловило применение многообразных специализированных инструментальных средств их разработки, главное из которых среда CLIPS. К основным достоинствам этого языка относятся встроенный объектно-ориентированный язык COOL, свободное распространение, мультиплатформенность, полная открытая документация. Разработчиками предоставляется возможность использовать CLIPS в качестве внедренного приложения, то есть программа на CLIPS может быть скомпилирована и скомпонована с программой на языке C, которая будет вызывать CLIPS-фрагменты как подпрограммы. Учитывая отсутствие у CLIPS собственного графического интерфейса пользователя, интегрирование в программу единственный способ соединить его возможности с богатым пользовательским интерфейсом, доступным программам на C. Однако в таком случае перед разработчиком встает проблема организации программного интерфейса между внедренной в программу CLIPSсредой и собственно программой, написанной на C. Проблема заключается в необходимости связать пользовательский интерфейс программы со встроенным ядром CLIPS таким образом, чтобы в ходе исполнения продукционных правил, требующих ввода информации, пользователь мог использовать кнопки, текстовые поля и другие элементы графического интерфейса для ответа на вопросы CLIPS. Сам ответ должен адекватно передаваться CLIPS, а информация из CLIPS-среды например, текст заданного в ходе исполнения правила вопроса поступать пользователю, отображаясь на экране в виде диалоговых окон, текстовых полей, кнопок и т.д. Например, при исполнении продукционного правила, требующего от пользователя выбрать один из двух вариантов ответа, на экране должны появиться текст вопроса и две кнопки с вариантами ответа. Ведущая роль CLIPS как средства разработки экспертных систем делает проблему организации интерфейса актуальной для всех, кто занимается разработкой. В настоящей статье на примере конкретной экспертной системы предлагается подход к организации программного интерфейса, отвечающего вышеописанным требованиям. Рассмотрим проблемы организации интерфейса, возникающие при разработке системы интеллектуальной поддержки конструирования математических моделей гидродинамических систем. Экспертная система строит модели, описывающие движение сплошной среды для гидродинамических систем с различным характером упорядочения на основе онтологии предметной области и требований пользователя. Целевыми результатами работы системы являются математические модели гидродинамических систем в виде систем дифференциальных уравнений в дивергентной форме. Разработанная система является экспертной системой продукционного типа и состоит из пользовательского интерфейса, рабочей памяти, базы знаний и машины логического вывода. Для представления знаний в системе используется онтология гидродинамических моделей, содержащая понятия и отношения, в которых выражены знания из рассматриваемой экспертной области. Рабочая память хранит связанные отношениями экземпляры классов онтологии, описывающие качественную и математическую модели. База знаний содержит оперативные знания из предметной области, выраженные в терминах онтологии и организованные в виде продукционных правил. Правила анализируют содержащуюся в рабочей памяти модель на полноту и непротиворечивость, управляют диалогом с пользователем и строят математическую модель по качественной модели. То, что разработанная система является экспертной системой продукционного типа, определило выбор CLIPS как языка реализации онтологии гидродинамических моделей и продукционных правил, ведущих диалог с пользователем и конструирующих модели. Онтология и база знаний экспертной системы реализованы на языке CLIPS 6.3. Пользовательский интерфейс реализован средствами Borland C Builder 6.0. Интегрирование CLIPS осуществляется посредством включения в текст программы модулей, содержащих исходный код ядра CLIPS, после чего возможно обращение к CLIPS с помощью функций API. Таким образом, в разработанной экспертной системе машина логического вывода, база знаний и рабочая память содержатся в ядре CLIPS, а графический интерфейс пользователя, написанный разработчиком данной системы, является частью текста программы на C и носит внешний по отношению к ядру характер. Все классы, объекты классов, переменные, функции и продукционные правила, реализованные на языке CLIPS, хранятся в ядре CLIPS во внутренней форме представления. Среду, образованную их совокупностью, назовем CLIPS-средой. С точки зрения программы, в которую интегрировано ядро CLIPS, работа с объектами CLIPS-среды возможна только посредством функций API. Функции API предусмотрены для работы с интегрированным в программу ядром CLIPS и дублируют действия команд на языке CLIPS загрузка и запись в файл содержимого рабочей памяти, запись и загрузка правил из текстового файла в базу знаний, вызов внутренних функций CLIPS, изменение значений слотов у объектов классов, запуск правил из базы знаний и т.д. Проблема организации интерфейса между программой и ядром CLIPS CLIPS как самостоятельное приложение работает в текстовом режиме пользователь вводит в командной строке команды на языке CLIPS, ввод пользователя чередуется с текстовым выводом CLIPS-машины. Разработанная экспертная система функционирует в режиме диалога с пользователем. При исполнении многих продукционных правил пользователю задается вопрос, ответ на который в зависимости от типа вопроса состоит в выборе одного из нескольких альтернативных вариантов или вводе текста например, названия какогонибудь объекта. В зависимости от ответа CLIPSмашина должна совершить те или иные действия с объектами классов в рабочей памяти создать объект или изменить значения его слотов. Графически работа программы должна выглядеть как последовательная смена на экране диалоговых окон с кнопками или выпадающими списками для вариантов ответа пользователя и полями для текстового ввода. Возможности обмена данными между программой и интегрированной в нее CLIPS-средой, предоставляемые функциями CLIPS API, неадекватны требованиям к программе, накладываемым спроектированным пользовательским интерфейсом. CLIPS не имеет функций, позволяющих узнать, какую кнопку нажал пользователь или какой текст он ввел в поле окна также нет функций вывода в переменные программы, внешние по отношению к ядру CLIPS. Все вышесказанное порождает проблему организации программного интерфейса между ядром CLIPS и содержащей его программой. Предлагаемое решение проблемы Обмен данными между программой и интегрированным в нее ядром CLIPS осуществляется с помощью глобальных переменных объектов данных программной среды CLIPS. Их особенность в том, что они сохраняют свои значения вне области определения конструкций CLIPS, таких как defrule и deffunction 1. Переменная questiontype характеризует тип вопроса с точки зрения содержания предъявляемого пользователю диалогового окна и реакцию интерфейса на действия пользователя. Выделяется пять типов вопросов, каждому из которых соответствует целочисленное значение переменной. NONE нет вопросов. CLIPS-машина ничего не передает программе, сигнализирует о конце работы машины логического вывода. STATEMENT нет вопроса. В протокол работы системы добавляется текстовое сообщение, диалоговое окно не выводится, сообщается о действиях машины логического вывода. OKSTATEMENT выводится диалоговое окно с текстом сообщения и кнопкой OK. Используется для привлечения внимания пользователя к сообщениям, вывода предупреждений, контрольных сообщений во время отладки программы и справочных пояснений. ENTERTEXT выводится диалоговое окно с текстом сообщения, полем для ввода текста и кнопками OK и ПРОПУСТИТЬ. Используется для получения текстового ввода пользователя, как правило, для названия какого-нибудь объекта. Схема окна приведена на рисунке. QUESTION вопрос с несколькими вариантами ответа. Выводится диалоговое окно с несколькими подписанными кнопками и кнопкой ПРОПУСТИТЬ. Надписи на кнопках берутся из значений переменных buttontext1, buttontext2, buttontext3. В случаях NONE, STATEMENT, OKSTATEMENT и при выборе кнопки ПРОПУСТИТЬ обратно в ядро CLIPS никакая информация не передается. При выборе пользователем одного из вариантов ответа или введении текста в рабочую память CLIPS-машины вносятся изменения, состоящие в создании или удалении объектов классов CLIPS иили изменении значений полей объектов. Имена и аргументы функций, которые должны быть запущены при выборе пользователем одного из вариантов ответа, передаются из ядра CLIPS через глобальные переменные command1, command2, command3 и commandparams1, commandparams2, commandparams3. Сами функции для всех действий над рабочей памятью, возможных в ходе работы экспертной системы, разработаны и реализованы на языке CLIPS, модули с их определениями загружаются в память ядра при инициализации CLIPS-машины как онтология, база знаний и начальное содержимое рабочей памяти. Таким образом, передача информации из ядра в содержащую ядро программу осуществляется посредством считывания программой значений глобальных переменных, а передача информации обратно, то есть выполнение действия над рабочей памятью, в виде записи в одну глобальную переменную и внешнего вызова функций ядра. Описанный способ обмена информацией требует прерывания работы машины логического вывода, для которого в CLIPS нет функций. Для решения этой проблемы реализована схема работы экспертной системы, основанная на введении шага работы и его циклическом повторении. Шаг состоит из запуска продукционных правил из базы знаний системы по одному. CLIPS и его функции API намеренно спроектированы так, чтобы программисту невозможно было управлять выбором правила, которое запустит машина логического вывода. Единственный способ повлиять на запуск правил это изменить состояние рабочей памяти 1. Продукционные правила CLIPS, взаимодействующие с пользователем, в соответствии с предлагаемым подходом должны присваивать нужные значения всему пакету глобальных переменных, характеризующих вопроссообщение, и иметь следующий вид Подытоживая, заметим, что представленный подход к организации программного интерфейса позволяет надежно связать работу машины логического вывода CLIPS и элементы графического интерфейса пользователя, реализованные средствами C. Основными чертами подхода являются использование глобальных переменных CLIPS для передачи информации о вопросесообщении и соответствующем ему состоянии пользовательского интерфейса внешний вызов написанных на CLIPS функций для реализации действий над рабочей памятью, соответствующих выбранному пользователем варианту ответа исполнение продукционных правил по одному для совершения двух предыдущих операций. Хотя подход проиллюстрирован на конкретном примере системы поддержки конструирования гидродинамических моделей с простым пользовательским интерфейсом, не содержащим много элементов управления, он может быть легко приспособлен для нужд любого другого интерфейса. Достаточно добавить глобальные переменные для новых элементов управления и модифицировать список типов вопросовсообщений так, чтобы он содержал новые конфигурации элементов интерфейса, которые могут возникнуть в ходе работы программы. Предлагаемый метод достаточен для организации взаимодействия пользователя со встроенной в программу продукционной системой, исполняющей любую программу на CLIPS, то есть универсален, так как все виды ввода, которые продукционные правила могут потребовать от пользователя, сводятся к вводу текста, вводу числа или выбору одного из нескольких вариантов. Работоспособность описанного в статье подхода опробована в реализованной экспертной системе поддержки конструирования гидродинамических моделей. 