МЕТОД ПОСТРОЕНИЯ УПРАВЛЯЮЩИХ КОНЕЧНЫХ  АВТОМАТОВ НА ОСНОВЕ ТЕСТОВЫХ ПРИМЕРОВ   С ПОМОЩЬЮ ГЕНЕТИЧЕСКОГО ПРОГРАММИРОВАНИЯ 

1 Предлагается метод построения управляющих конечных автоматов на основе тестовых примеров с помощью генетического программирования. Приводятся описания представления автоматов в виде особей алгоритма генетического программирования, операций мутации и скрещивания, а также генетического алгоритма. Применение метода иллюстрируется  на примере построения автомата управления часами с будильником. Ключевые слова  — генетическое программирование, автоматное программирование, машинное обучение. 

Автоматное программирование парадигма программирования, в рамках которой программные системы предлагается строить в виде набора взаимодействующих автоматизированных объектов управления 1. Автоматизированный объект управления состоит из управляющего конечного автомата и объекта управления. Таким образом, поведение каждого автоматизированного объекта управления во многом описывается детерминированным конечным автоматом. Для большинства задач автоматы удается строить эвристически вручную. Однако в ряде случаев такое построение слишком трудоемко или приводит к неоптимальным результатам. К таким задачам относятся, например, задачи Умный муравей 2, 3, Умный муравей-3 4 и задача об управлении моделью беспилотного летательного аппарата 5. Для построения автоматов в таких задачах можно применять генетические алгоритмы ГА 68. Традиционный метод построения конечных автоматов с помощью ГА 3, 911 использует вы 911 использует вы911 использует вычисление функции приспособленности на основе моделирования работы системы со сложным поведением в некоторой внешней среде. Главным недостатком этого метода является то, что при его применении функцию приспособленности необходимо с нуля реализовывать для каждой задачи. Кроме того, такой подход к вычислению функции приспособленности связан с большими затратами вычислительных ресурсов. Целью настоящей работы является разработка метода построения конечных автоматов на основе генетического программирования, в котором устранены указанные недостатки. Для достижения этой цели предлагается осуществлять построение конечных автоматов на основе тестовых примеров. При применении парадигмы автоматного программирования для реализации сущности со сложным поведением выделяется система управления и объект управления. На начальном этапе проектирования программы выделяются события, входные переменные, и выходные воздействия, . После этого проектирование программы может идти разными путями. Один из них состоит в написании сценария работы программы, по которому далее эвристически строится автомат. Пример построения автомата таким способом приведен в работе 12. Другой подход, который практически не применяется для построения автоматных программ, но достаточно широко распространен при традиционной разработке программ, называется разработкой на основе тестов 13. При его использовании процесс написания кода на языке программирования идет параллельно с написанием тестов для программы, а добавление функциональности в программу осуществляется только после того, как создан тест для проверки этой функциональности. Таким образом, функциональность программы описывается набором тестов для нее. В случае применения автоматного программирования в качестве тестов для управляющего конечного автомата естественно рассматривать пары последовательностей, одна из которых описывает события и входные переменные, поступающие на вход автомату, а вторая выходные воздействия, которые должен вырабатывать автомат при обработке входных воздействий. Таким образом, задача построения управляющего конечного автомата становится похожей на задачу построения конечного преобразователя, для решения которой успешно используются ГА 14. Исходными данными для построения конечного автомата управления системой со сложным поведением являются список событий список входных переменных список выходных воздействий набор тестов -ests, каждый из которых содержит последовательность -nput событий, поступающих на вход конечному автомату, и соответствующую ей эталонную последовательность Answer выходных воздействий. Отметим, что при использовании описываемого метода входные переменные явным образом не задаются. Для учета входных переменных необходимо добавить в список событий новые события, объединяющие исходные события и логические формулы, содержащие входные переменные. Например, если в списке событий присутствует событие, а в списке входных переменных, то новым событием может быть произошло событие и переменная истинна. Отметим также, что для тестов, которые задаются для построения конечного автомата, справедливо свойство, которое можно сформулировать следующим образом префиксы тестов являются тестами если из входной последовательности событий удалить часть событий, находящихся в ее конце, то результат обработки автоматом этой последовательности будет префиксом исходной выходной последовательности. Конечный автомат в алгоритме генетического программирования представляется в виде объекта, который содержит описания переходов для каждого состояния и номер начального состояния. Для каждого состояния хранится список переходов. Каждый переход описывается событием, при поступлении которого этот переход выполняется, и числом выходных воздействий, которые должны быть сгенерированы при выборе этого перехода. Таким образом, в особи кодируется только скелет управляющего конечного автомата, а конкретные выходные воздействия, вырабатываемые на переходах, определяются с помощью алгоритма расстановки пометок, который аналогичен предложенному в работе 15. Выбор представления графа переходов автомата с помощью списков ребер в отличие от работы 15, в которой применялись полные таблицы переходов обоснован тем, что, как правило, в автоматах управления системами со сложным поведением не в каждом состоянии определена реакция на каждое событие. . Опишем алгоритм расстановки пометок на переходах, применяемый в настоящей работе. Как было сказано выше, для каждого перехода в особи ГА записано, сколько выходных воздействий должно вырабатываться при его выборе. Подадим на вход конечному автомату последовательность событий, соответствующую одному из тестов, и будем наблюдать за тем, какие переходы выполняет автомат. Зная эти переходы и информацию о том, сколько выходных воздействий должно быть сгенерировано на каждом переходе, можно определить, какие выходные воздействия должны вырабатываться на переходах, использовавшихся при обработке входной последовательности. Для каждого перехода и каждой последовательности выходных воздействий zs вычисляется величина C zs число случаев, в которых при обработке входной последовательности, соответствующей одному из тестов, на переходе должны быть выработаны выходные воздействия, образующие последовательность zs. Даzs. Да. Далее, каждый переход помечается той последовательностью zs, для которой величина zs максимальна. . Функция приспособленности основана на редакционном расстоянии расстоянии Левенштейна 16. Редакционным расстоянием между двумя последовательностями символов называется минимальное число операций замены символа, вставки символа и удаления символа, которые необходимо выполнить над первой последовательностью для того, чтобы она совпала со второй. Для вычисления функции приспособленности выполняются следующие действия на вход автомату подается каждая из последовательностей -nput . Обозначим последовательность выходных воздействий, которую сгенерировал автомат при входе -nput, как Output . После этого вычисляется величина где редакционное расстояние между строками и . Отметим, что значения функции лежат в пределах от 0 до 1. При этом, чем лучше автомат соответствует тестам, тем больше значение функции приспособленности. Функция приспособленности зависит не только от того, насколько хорошо автомат работает на тестах, но и от числа переходов, которые он содержит. Эта функция вычисляется следующим образом где стоимость прохождения всех тестов произвольное целое число, большее максимального числа переходов в автомате число переходов в автомате. При проведении вычислительных экспериментов были выбраны следующие значения 20, 100. Эта функция приспособленности устроена таким образом, что при одинаковом значении функции, отражающей прохождение тестов автоматом, преимущество имеет автомат, содержащий меньшее число переходов. Кроме этого, автомат, который идеально проходит все тесты, оценивается выше, чем автомат, проходящий тесты не идеально. . При выполнении операции мутации с заданной вероятностью по умолчанию, она равна 0,05 выполняется каждое из действий изменение начального состояния изменение описания каждого из переходов удаление или добавление перехода для каждого из состояний. После выполнения операции мутации может возникнуть ситуация, когда в автомате из одного состояния присутствуют два перехода по одному и тому же событию. Для устранения таких переходов применяется операция удаления дублирующихся переходов. . В целях удаления дублирующихся переходов для каждого состояния выполняются следующие операции последовательно просматривается список переходов из этого состояния, при этом запоминаются события, переходы по которым определены для этого состояния. Если очередной переход происходит по событию, для которого в списке уже есть переход, то переход удаляется из списка. . Скрещивание описаний автоматов производится следующим образом. Обозначим как P1 и P2 родительские особи, а S1 и S2 особи-потомки. Для начальS1 и S2 особи-потомки. Для началь1 и S2 особи-потомки. Для начальS2 особи-потомки. Для началь2 особи-потомки. Для начальных состояний S1.is и S2.is автоматов S1 и S2 будет верно одно из двух соотношений S1.is P1.is и S2.is P2.is S1.is P2.is и S2.is P1.is. Опишем, как устроены переходы автоматов S1 и S2. Скрещивание описаний автоматов произвоS2. Скрещивание описаний автоматов произво2. Скрещивание описаний автоматов производится отдельно для каждого состояния. Обозначим список переходов из состояния номер автомата P1 как P1, а список переходов из состояния номер автомата P2 как P2 . Для выполнения скрещивания переходов с равной вероятностью может быть выбран один из двух методов. При использовании списки переходов S1 и S2 строятся следующим образом. 1. Строится общий список переходов, в который помещаются переходы, входящие как в P1, так и в P2 . 2. К полученному списку применяется случайная перестановка. 3. Далее возможны два равновероятных варианта либо в S1 помещаются первые P1 переходов из полученного списка, а в S2 оставшиеся переходы либо в S1 помещаются первые P2 переходов из полученного списка, а в S2 оставшиеся переходы. При использовании списки переходов S1 и S2 строятся следующим образом. 1. Составляется список всех используемых тестов, упорядоченный по возрастанию нормированного редакционного расстояния между правильным ответом Answer и последовательностью Output выходных воздействий, генерируемой автоматом, значения выражения . В автоматах P1 и P2 помечаются те переходы, которые используются при обработке первых 10 тестов из полученного упорядоченного списка. 2. переходы копируются в S1 и S2 напрямую. 3. Строится общий список переходов, в который помещаются переходы, входящие как в P1, так и в P2 . 4. К полученному списку применяется случайная перестановка. 5. Список S1 дополняется первыми переходами из списка до размера P1, а список S2 дополняется оставшимися переходами. В обоих случаях к получившимся в результате скрещивания автоматам S1 и S2 применяется операция удаления дублирующихся переходов. Применение предлагаемого метода иллюстрируется на примере построения автомата управления часами с будильником 1. Эти часы имеют три кнопки помеченные буквами A, H, M, которые предназначены для изменения режима их работы и для настройки текущего времени или времени срабатывания будильника. Если будильник выключен, то кнопки H и M служат для установки текущего времени, а кнопка A переводит часы в режим Настройка будильника, в котором кнопки H и M устанавливаH и M устанавлива и M устанавливаM устанавлива устанавливают не текущее время, а время срабатывания будильника. Повторное нажатие кнопки A вклюA вклю включает будильник. После этого если текущее время совпадает со временем срабатывания будильника, то включается звонок, который отключается либо нажатием кнопки A, либо самоA, либо само, либо самопроизвольно через минуту. Кроме этого, нажатие кнопки A приводит к выключению будильника. Рассматриваемые часы с будильником являются системой со сложным поведением, так как в ответ на одни и те же входные события нажатия кнопок в зависимости от режима работы генерируются различные выходные воздействия. Поведение этих часов может быть описано с помощью конечного автомата 1, который содержит три состояния рис. 1. Система управления часами с будильником имеет четыре события H нажата кнопка H M нажата кнопка M A нажата кнопка A генерируется таймером каждую секунду. Кроме этого, она содержит две входные переменные верно ли, что текущее время совпадает со временем срабатывания будильника верно ли, что текущее время на минуту больше времени срабатывания будильника Число выходных воздействий равно семи увеличить на единицу число часов в текущем времени увеличить на единицу число минут в текущем времени увеличить на единицу число часов во времени срабатывания будильника увеличить на единицу число минут во времени срабатывания будильника прибавить минуту к текущему времени включить звонок будильника выключить звонок будильника. Система тестов для построения автомата управления часами с будильником состояла из 38 тестов, описывающих его работу во всех трех режимах. В качестве примера приведем тесты для состояния Будильник выключен таблица. Построение конечного автомата управления часами с будильником проводилось при следующих параметрах алгоритма генетического программирования размер поколения 2000 особей доля элиты наиболее приспособленных особей, напрямую переходящих в следующее поколение, 10 число поколений до малой мутации поколения 100 поколений число поколений до большой мутации поколения 150 поколений размер автоматов в начальном поколении четыре состояния. Было проведено 1000 запусков алгоритма с указанными параметрами. Цель в каждом из них состояла в том, чтобы построить автомат, содержащий 14 переходов и соответствующий всем тестам значение функции приспособленности, соответствующее такому автомату, 20.86. На каждом из запусков алгоритма генетического программирования был построен автомат рис. 2, в котором из начального нулевого состояния достижимы только три состояния из четырех. Если удалить недостижимое состояние, то этот граф переходов будет изоморфен графу переходов, построенному вручную. График зависимости максимального значения функции приспособленности от номера поколения представлен на рис. 3 при одном из запусков алгоритма. Как видно из графика, автоматы, входящие в начальное поколение, проходят тесты примерно наполовину. Примерно к двухсотому поколению был построен автомат, полностью проходящий все тесты, однако содержащий достаточно большое число переходов. Далее шел процесс уменьшения числа переходов, во время которого три раза в районе 400-, 1000и 1200-го поколений к популяции применялась операция большой мутации, в результате чего значение функции приспособленности уменьшалось примерно до десяти. В итоге в 1482-м поколении был построен автомат, полностью проходящий все тесты и содержащий 14 переходов. Для каждого из запусков запоминалось число вычислений функции приспособленности которое равно числу просмотренных во время работы автоматов в процессе построения автомата. На рис. 4 показано распределение этой величины, полученное в результате вычислительных экспериментов. Минимальное значение числа вычислений функции приспособленности составило 256 063, максимальное 9 239 523. В предположении, что эта величина распределена по логнормальному распределению, ее среднее значение составляет 1 443 351.20 стандартное отклонение 1 103 401.82. В работе предложен метод построения автоматов управления системами со сложным поведением с учетом тестов с помощью генетического программирования. При использовании разработанного метода для построения управляющих конечных автоматов необходимо задать только тестовые примеры, а вычисление функции приспособленности требует существенно меньше вычислительных ресурсов, чем при использовании моделирования для вычисления функции приспособленности. Рассмотрен пример применения разработанного метода. Исследования проводятся по государственному контракту, выполняемому в рамках Федеральной целевой программы Научные и научнопедагогические кадры инновационной России на 20092013 годы. 