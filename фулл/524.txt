РАЗРАБОТКА МЕТОДОВ ИНТЕГРАЦИИ   АВТОМАТИЧЕСКИХ СРЕДСТВ ЛОГИЧЕСКОГО ВЫВОДА   ДЛЯ ПОРОЖДЕНИЯ ЗНАНИЙ В ОНТОЛОГИЧЕСКОЙ МОДЕЛИ  

    Статья посвящена разработке методов порождения новых знаний на основе анализа текстов естественного  языка. Для извлечения знаний из текстов на естественном языке используется метод представления предложений в виде двухместных предикатов с введенной константой ситуацией. Для представления знаний в формальном виде используются бескванторные предложения логики предикатов, а также язык OWL DL. Порождение новых знаний реализуется при помощи автоматических средств логического вывода с использованием  заранее заданных шаблонов правил вывода. Разработана программная система, которая дает возможность  пользователям получать ответы на определенные вопросы, относящиеся к данным текстам естественного   языка. Ответы строятся на естественном языке, при этом используются не только явно содержащиеся в обрабатываемом документе знания, но и знания, порожденные при помощи автоматических средств логического  вывода.   

 Данная работа посвящена разработке и программной реализации методов порождения новых знаний по текстам естественного языка. Порождение новых знаний происходит при помощи автоматических средств логического вывода с использованием шаблонов, предварительно созданных для заданной предметной области. Знания, извлеченные из текстов, представляются в виде фрагмента атомарной диаграммы модели в сигнатуре, состоящей из символов двухместных предикатов и констант. Далее атомарные предложения транслируются в язык OWL DL, благодаря чему мы можем использовать автоматические средства логического вывода ризонеры. Корректность порожденных знаний контролируется пользователями с помощью запросов к программной системе на естественном языке. В своей жизни мы сталкиваемся с большим количеством разных документов. Очень часто документы имеют большие объемы, и при этом информация в документах может быть не структурирована. Ключевые моменты могут находиться в разных местах документа одна часть важной информации может быть в начале документа, а другая часть в конце. Для точного определения содержания документа нужно выяснять смысл каждого предложения в отдельности, а также семантическое влияние одних предложений на другие. Сходные проблемы возникают, когда для решения какой-либо задачи нужно извлечь знания из нескольких связанных между собой документов и затем сопоставить знания, содержащиеся в разных документах. Так, например, для определения порядка действий студента ФИТ в течение ряда лет его обучения, нужно изучить следующие регламентирующие документы Образовательная программа по направлению 09.04.01 информатика и вычислительная техника, 09.04.01 Программа государственной итоговой аттестации по образовательной программе высшего образования программе магистратуры, Приложения к программе государственной итоговой аттестации по образовательной программе высшего образования программе магистратуры, Приказы о проведении сессий и другие связанные документы. В одних документах описывается порядок действий студентов, в других описаны сроки и т. п. Поэтому, чтобы извлечь правильную информацию из таких текстов естественного языка, нужно изучить все связанные между собой документы. Учитывая количество и объемы таких документов, сделать это может быть крайне затруднительным. Целью разработки программной системы, описываемой в данной статье, является автоматизация извлечения знаний из текстовых документов с возможностью порождения новых знаний на естественном языке за счет сопоставления и комбинации извлеченных знаний и осуществления логического вывода. Программная система должна решать следующие задачи извлекать знания из текстовых документов на естественном языке и представлять их в формальном виде на языке логики предикатов и OWL DL осуществлять логический вывод с использованием ризонеров для OWL DL и таким образом порождать новые знания предоставлять пользователям возможность задавать вопросы на естественном языке, относящиеся к рассматриваемым текстам документов. В результате применения разработанных методов была создана программная система, предназначенная для порождения новых знаний по текстам на естественном языке, основанная на представлении извлеченных из текстов знаний в виде онтологической модели. Созданная программная система позволяет получать знания, которые явно не содержатся в документах, но логически следуют из них. При создании онтологических моделей различных предметных областей мы основываемся на четырехуровневой модели представления знаний 1 2. В рамках этого подхода разработка онтологической модели предметной области включает в себя создание онтологии предметной области, т. е. задание набора ключевых понятий сигнатуры онтологической модели и спецификация смысла этих ключевых понятий, задание взаимосвязей, отношений между понятиями и т. д. формальное представление общих знаний универсальных утверждений и регламентов, истинных для каждого прецедента данной предметной области формальное представление набора прецедентов предметной области формальное представление вероятностных, оценочных и экспертных знаний в виде предложений, имеющих нечеткие значения истинности 1 2. При этом происходит настройка взаимосвязи со сторонними программными системами, описание взаимодействия с другими онтологиями и др. 35. В рамках нашего подхода создание онтологической модели можно представить как разработку модульной системы 6. Модулями этой системы, в частности, являются ядро, модуль пополнения онтологической модели, модуль взаимодействия с онтологической моделью. Ядро системы позволяет создавать онтологии на языке OWL DL . Создавать онтологию можно как посредством доступных редакторов онтологий с графическим интерфейсом, например Protg, так и напрямую на языке OWL DL. Для ядра системы построения используется описанная выше четырехуровневая модель представления знаний 1 2 1 онтология, 2 общие знания, 3 прецеденты, 4 вероятностные и оценочные знания. Ядро системы, в частности, позволяет проверять созданные онтологические модели на непротиворечивость при помощи автоматических средств логического вывода. Модуль пополнения онтологической модели позволяет пополнять онтологическую модель новыми знаниями как извлеченными из текстов естественного языка, так и полученными в результате логического вывода. Пополнение онтологической модели можно сделать несколькими способами. Первый способ это объединение онтологий. Для создания онтологических моделей существует несколько языков, основными из которых являются RDF, RDF Schema, OWL, логика описаний. Данный модуль позволяет объединять онтологии, написанные на разных языках. Для этого существуют программы для перевода с одного языка на другой. Второй способ это использование правил вывода. Правила вывода могут быть написаны на разных языках. Для получения знаний с помощью правил вывода используются машины логического вывода. Модуль взаимодействия с онтологической моделью позволяет с помощью языков запросов SQWRL и SPARQL и правил вывода SWRL выполнять запросы к онтологической модели. Также есть возможность взаимодействовать со сторонними программными системами, такими как Ontograf визуализация онтологии в виде графа, Logic Text представление текста в виде атомарных диаграмм и др. Схема работы с онтологической моделью представлена на рис. 1. Семантический механизм рассуждений 7 это часть программного обеспечения, способная вывести логические умозаключения новые знания из набора формализованных базовых понятий и представленных аксиом. Понятие семантического механизма рассуждений обобщает понятие машины логического вывода. Семантический механизм рассуждений предоставляет богатый набор механизмов для работы. Правила вывода обычно определяются с помощью языка описания онтологий. Многие семантические механизмы рассуждений используют логику предикатов первого порядка для выполнения рассуждений. Для работы с онтологиями на языке OWL DL существует несколько основных машин логического вывода. Некоторые из них являются коммерческими программными продуктами Bossam, RacerPro, OntoBroker 8. Некоторые свободными в использовании, но с закрытым исходным кодом KAON2, Internet Business Logic, Cyc inference engine 9, а другие бесплатным программным обеспечением с открытым исходным кодом Drools, OpenRules, Pellet 10, Jena, Fact 11. Для данной работы была выбрана машина логического вывода Pellet, так как она предоставляет наиболее полную поддержку OWL DL, а также имеет понятный программный интерфейс. Применение машин логического вывода для онтологий можно осуществлять и без использования правил вывода. В таком случае машины логического вывода могут определять иерархию классов, принадлежность экземпляров к определенным классам, а также эквивалентность классов. Но новые знания в такой ситуации получить невозможно. Для этого нужно использовать правила вывода 12. Для использования правил вывода при работе с онтологиями существуют различные инструменты SWRL, DLP Grosof, dl-programs Eiter, DLsafe rules, Conceptual Logic Programs CLP, AL-Log, DLlog 13. Выделяют два основных подхода применения правил вывода в онтологиях однородный гомогенный и гибридный 14. Однородный подход также называют семантической интеграцией. В однородном подходе онтологии и правила вывода используются на одинаковых условиях, т. е. создается единый язык. Одни и те же предикаты используются как для формулировки онтологических утверждений, так и для формулировки правил вывода. Правила в таком подходе можно использовать для определения классов и свойств. В данном подходе нет проблемы совместимости. Недостатками данного подхода является то, что совмещение в одном языке разных средств и для описания правил вывода, и для описания онтологии сильно затрудняет реализацию. Также однородный подход часто может быть неприменим в работе из-за того, что онтология и правила вывода могут разрабатываться разными специалистами независимо друг от друга. Примерами такого подхода являются SWRL и DLP 15. Гибридный подход отличается от гомогенного строгим семантическим разделением. Предикаты, используемые в онтологиях, и предикаты, используемые в правилах вывода, строго различаются. Вывод производится только с помощью отдельно реализуемых программ. Могут разрабатываться независимо от онтологий. К недостаткам относится то, что правила не могут определять новых классов и свойств онтологий, за исключением некоторых специальных отношений. Хоть гибридный подход и позволяет разрабатывать правила вывода независимо от онтологий, это вносит ряд ограничений, для того чтобы гарантировать разрешимость. Примерами такого подхода являются RIF 16 и Answer Set Programming ASP 17. В настоящее время существует ряд программных систем, предназначенных для анализа текстов естественного языка при помощи онтологий. Такими системами являются FRED 18, Apache Stanbol и Text2Onto 19. Рассмотрим особенности этих систем. это анализатор текста, основанный на технологиях Semantic Web. Способен обрабатывать тексты естественного языка на 48 различных языках и преобразовывать его в связанные данные. Он разработан на языке Python, а также реализован в виде REST API и в виде набора библиотек языка Python. Для анализа текста FRED использует комбинаторную категориальную грамматику CC, теорию репрезентационного представления DRT, семантику фреймов и шаблоны проектирования онтологий. Для определения именованного объекта анализатор FRED использует Apache Stanbol, TagMe, для устранения неоднозначности Boxer и IMS. Результат обработки может представлять в формате RDFOWL. Также FRED генерирует графы знаний, которые могут быть интерпретированы машинами в соответствии с общей формальной семантикой. В основе работы лежат фреймы Frame Semantic. Фрейм обычно выражается глаголами или другими лингвистическими конструкциями, которые могут распознаваться во входном тексте как -арное отношение. Все -арные отношения записываются как подклассы класса Предикаты представляются в виде классов, в названии которых есть сам объект. Пример такого именования Вывод может быть представлен в виде графа рис. 2. программный продукт для пополнения онтологии из текстовых ресурсов. В основе его лежит вероятностная онтологическая модель POM Probabilistic Ontology Model. POM, используемая Text2Onto, представляет собой набор созданных примитивов моделирования, которые не зависят от конкретного языка представления онтологии. Фактически Text2Onto включает в себя библиотеку примитивов моделирования MPL, которая определяет эти примитивы декларативным способом. Добавление новых примитивов происходит без изменения структуры онтологии. Это делает онтологию гибкой и расширяемой. Также созданные примитивы могут быть переведены на любой язык представления знаний, например RDFS3, OWL4 и F-Logic. Text2Onto сочетает в себе машинное обучение и базовую лингвистическую обработку токенизацию и разбор на предложения. Программа определяет в тексте некоторые виды отношений, такие как класс-подкласс, эквивалентность, экземпляры классов. Например, для выявления отношения подкласса в Text2Onto были реализованы различные алгоритмы, в частности реализовали алгоритм сопоставления шаблонов с использованием структуры WordNet. Целью разрабатываемой программной системы является получение новых знаний на основе уже имеющихся знаний, содержащихся в текстах естественного языка, а также получения ответов на вопросы, относящиеся к этим текстам. В рамках работы в качестве примеров были взяты локальные нормативные документы факультета информационных технологий. На вход программная система получает текстовый документ, который она преобразовывает в бескванторные предложения логики предикатов. Для преобразования текстов в логику предикатов используется программа Logic Text 20. С помощью данной программы можно получить фрагменты атомарных диаграмм по предложениям естественного языка. Далее происходит преобразование многоместных предикатов в двухместные. Для того чтобы не потерять смысл предложений, вводятся константы, обозначающие ситуации. После этого полученные предложения, записанные в сигнатуре двухместных предикатов, транслируется в язык OWL. На следующем шаге порождаются правила вывода по заранее созданным шаблонам. Шаблоны строятся для каждой предметной области отдельно. Для построения шаблонов используется логика предикатов рассматриваемой сигнатуры. С помощью машины логического вывода и созданных правил вывода в онтологическую модель добавляются новые знания. Для работы с онтологией на языке OWL и с правилами вывода, написанными на SWRL, используется машина логического вывода Pellet. Шаблоны для запросов к онтологической модели также строятся на языке логики предикатов. Как и шаблоны для правил вывода, шаблоны для запросов строятся под конкретную предметную область. Заранее подготовленные шаблоны для запросов к онтологической модели заполняются с помощью пользовательского интерфейса, после чего происходит запрос к онтологической модели. Учитывая новые выведенные знания, мы получаем ответ на запрос с помощью языка SQWRL, затем формулируем ответ на понятном для пользователя языке. В итоге программная система может отвечать на вопросы пользователей по текстам на естественном языке. Схема работы программной системы представлена на рис. 3. В схеме работы можно выделить следующие основные этапы преобразование текстовых документов выбранной предметной области в наборы атомарных предложений конвертация фрагментов атомарных диаграмм в онтологическую модель порождение правил вывода для построенной онтологической модели вывод новых знаний проверка полученных результатов. Рассмотрим подробно каждый из этапов. Для построения по текстам естественного языка фрагмента атомарной диаграммы используется программная система LogicText 21. Знания, представленные в тексте, формализуются на языке многоместных предикатов. Однако многоместные предикаты нельзя представить на языке OWL, так как OWL поддерживает только двухместные предикаты. Поэтому нужно преобразовать многоместные предикаты в двухместные. . Онтологическая модель строится на основе четырехуровневой модели представления знаний 1 2 это онтология, общие знания, прецеденты, оценочные знания. В данном случае нам потребуются только первые три уровня. Рассмотрим уровни онтологической модели на примере нормативных документов факультета. Первый уровень это онтология 22. Онтология представляет собой формальное описание языка предметной области, цель которого в явном виде определить смысл терминов, используемых в данной предметной области. Ключевые термины это понятия, смысл которых, во-первых, является специфичным для данной предметной области и, во-вторых, одинаково понимается всеми экспертами предметной области. Примерами таких знаний о смысле понятий являются . Второй уровень это общие, универсальные знания о предметной области, которые считаются полностью истинными на данный момент времени. В рамках формального описания учебного процесса это знания, извлеченные из различных нормативных документов. Общие знания извлекаются из текстов и содержат общую информацию о предметной области. Например . Третий уровень онтологической модели прецеденты или частные знания. Это знания, которые истины в конкретной ситуации, т. е. для определенного экземпляра предметной области. Например . Для пополнения онтологической модели знаниями, извлеченными из текстов естественного языка, происходит преобразование многоместных предикатов в двухместные. Для этого используется алгоритм, представленный в 23. Преобразование многоместных предикатов в двухместные происходит с помощью введения сигнатуры дополнительных констант-си туаций. Для пополнения онтологической модели новыми знаниями необходимо создавать правила вывода. Чтобы не строить каждый раз правила вывода вручную, используются шаблоны правил вывода. Заполнение шаблонов правил вывода происходит в момент создания онтологической модели. Шаблоны строятся для конкретной предметной области. При переводе -местных предикатов в двухместные вводятся специальные отношения между константами-ситуациями 23. Например отношение, обозначающее, что ситуация является частью более общей ситуации отношение, обозначающее, что ситуации и эквивалентны. Для отношения справедливы, например, следующие правила вывода А для отношения справедливы правила вывода Эти правила вывода являются примерами шаблонов. Вместо мы можем подставить любой предикат из сигнатуры онтологической модели. и тоже могут быть любыми ситуациями, которые связанны предикатами или соответственно. Шаблоны правил вывода могут заполняться автоматически и добавляться в онтологическую модель уже как готовые правила вывода. Для получения по онтологической модели новых знаний используются правила вывода, построенные на предыдущем этапе, и машина логического вывода Pellet. Сначала машина логического вывода проверяет, что созданная онтологическая модель не является противоречивой. Если мы выявили, что какие-либо знания противоречат друг другу, то специальная утилита для редактора онтологий Protg подскажет, какие утверждения вступают в противоречие. Разрешить такие противоречия в рамках разрабатываемой системы можно только вручную. После того как машина логического вывода подтвердила, что онтологическая модель является непротиворечивой, мы переходим к порождению новых знаний. Система Pellet использует порожденные ранее правила вывода и добавляет новые знания в онтологическую модель. . Чтобы проверить, получилось ли вывести новые знания, используются запросы к онтологической модели, которые также строятся по шаблонам. Шаблоны запросов порождаются для конкретной предметной области аналогично шаблонам правил вывода. Редактирование шаблона происходит пользователем через графический интерфейс. Шаблон имеет вид какого-либо вопроса. Например Вместо может быть подставлен любой класс из онтологической модели, который связан с ситуацией свойством или . При этом можно выбрать любой вопрос, который заполнился по шаблону. Если заполнение шаблона не может произойти однозначно, то пользователю предоставляется возможность самому выбрать правильный вопрос. Например, если вместо можно подставить несколько слов, и т. д., то на экране появится выпадающий список со всеми этими словами. Пользователь сам выберет нужное и задаст вопрос. Также пользователь может задать несколько вопросов, по очереди выбирая нужное слово. После того как пользователь сформировал вопрос, он представляется в виде SQWRL запроса к онтологической модели. Так как SQWRL имеет доступ и к тем знаниям, которые были выведены с помощью машины логического вывода, то в ответ пользователю попадет не только та информация, которая в явном виде содержится в текстах, но и та, которая была выведена с помощью правил вывода. SQWRL возвращает ответ в виде таблицы. По данным из таблицы, учитывая ситуацию, с которой связано это слово, мы строим текстовый ответ пользователю и отображаем его на экране. Чтобы проверить, какие знания получилось вывести, можно, например, задать следующие вопросы Рассмотрим ответ на вопрос . По этому вопросу составится SQWRL запрос вида Это основной запрос, по нему получим информацию о том, что должен сделать рецензент. В данном случае это будет и Чтобы ответ получился полным, нужно сделать запросы, уже используя полученную информацию. В итоге получим ответ Далее пользователю предлагаются уточняющие вопросы. Например, В ответ получим Была разработана программная система на языке Java, работающая посредством OWL API с онтологической моделью, представленной на языке OWL 2 DL. Шаблоны правил вывода создаются индивидуально для каждой предметной области. Выше были рассмотрены примеры шаблонов, в частности Помимо шаблонов правил вывода со специальными отношениями, мы рассматриваем шаблоны, которые не связаны со специальными отношениями Подставляя в шаблоны конкретные константы-ситуации и конкретные предикаты, программа порождает правила вывода. Это происходит автоматически через OWL API. Запросы к онтологической модели строятся с помощью SQWRL. Для данной предметной области можно определить основные шаблоны запросов Пользователю выводятся данные шаблоны, вместо или предлагаются на выбор слова. Слова берутся из онтологической модели. Например, для первого вопроса для того, чтобы заполнить возможными значениями переменную, в онтологическую модель делается запрос Переменная не содержится в потому, что нам не важно в данном случае, к какой ситуации относятся выведенные константы. Аналогичные запросы выполняются для всех переменных. После того как пользователь сделает выбор по поводу заполнения переменных, создаются запросы к онтологии. Ответы пользователям на естественном языке также строятся по шаблонам. Шаблоны ответов строятся аналогично шаблонам вопросов. Так, например, к шаблону вопроса троится шаблон ответа . Здесь это ответ, полученный с помощью SQWRL-запроса. В общем виде из онтологической модели с помощью SQWRL-запроса может быть получено несколько действий объекта . Обобщая шаблон на такой случай, получаем X должен Y иили Z, иили S, иили . Рассмотрим примеры вопросов и их представление на SQWRL. Ответы представим сразу в читаемом для пользователя виде на естественном языке. Когда должен На такой запрос мы не сможем получить ответ, так как промежутка времени не задано в предложении. Поэтому нужно сделать два других запроса до какой даты или какой даты Получим ответ по шаблону X должен Y до Z. Сколько времени есть у для выполнения задачи В запросах, начинающихся на, в ответ пользователю выдаем просто значение, полученное с помощью SQWRL. Получим ответ Тестирование программной системы проходило на документах ФИТ НГУ, а именно 09.04.01 Программа государственной итоговой аттестации по образовательной программе высшего образования программе магистратуры, Приказы о проведении сессий. Было обработано 30 предложений, содержащих информацию о сроках проведения этапов обучения, представления документов на кафедру и порядке проведения защиты квалификационной работы. По каждому предложению было составлено порядка 10 двухместных предикатов. По подготовленным предикатам составлена онтологическая модель, содержащая 367 аксиом. Автоматически были созданы 50 правил вывода. Программный продукт может отвечать на 6 видов вопросов, а именно Статья посвящена разработке методов извлечения знаний из текстов на естественном языке и порождения новых знаний, явно не содержащихся в текстах. Была создана программная система, предназначенная для порождения новых знаний на основе обработки текстов естественного языка. Разработанная программная система позволяет извлекать знания из текстов и представлять их в формальном виде в онтологической модели. Онтологическая модель строится на основе четырехуровневой модели представления знаний. Использование онтологической модели позволяет порождать новые знания с помощью добавления новых правил вывода, а также проверять полученные знания на непротиворечивость с помощью машины логического вывода. Программная система дает возможность пользователям задавать вопросы на естественном языке, относящиеся к рассматриваемым документам. Ответы на вопросы строятся динамически, исходя из знаний, содержащихся в онтологической модели. При составлении ответа на вопрос используются как знания, явно содержащиеся в текстах, так и новые знания, порожденные в онтологической модели. 