ИССЛЕДОВАНИЕ ПРОИЗВОДИТЕЛЬНОСТИ ПРИЛОЖЕНИЙ БАЗ ДАННЫХ:  ТРАНЗАКЦИОННАЯ МОДЕЛЬ И АРХИТЕКТУРА ИМИТАЦИОННОЙ СИСТЕМЫ 

Высокий уровень изменчивости программного и технического обеспечения информационных систем требует  получения оценок их производительности за ограниченные сроки на любых стадиях их жизненного цикла. В статье рассматривается унифицированный процесс обработки данных в клиент-серверном приложении, которое  взаимодействует с базой данных, состоящей из стандартных компонентов. Формальная модель процесса представлена одноканальной системой массового обслуживания с входящим потоком требований, интегрирующим  элементарные потоки, каждый из которых ассоциируется с определенным транзакционным классом. Излагаются  актуальные вопросы реализации модели и приводятся результаты имитационных экспериментов, отражающие  продолжительность отклика системы на задаваемую рабочую нагрузку.  : оценка производительности, время отклика, клиент-серверная система, имитационное моделирование, система массового обслуживания.  

Любое многопользовательское приложение баз данных ПБД, реализованное в клиентсерверной архитектуре, в процессе своего создания или после очередной модернизации должно подвергаться нагрузочному тестированию, главная цель которого установление фактических значений производительности для заданных параметров рабочей нагрузки, показательной для той предметной области, где ПБД эксплуатируется. Среди используемых сегодня показателей производительности, таких как доступность, загруженность, пропуск ная способность и продолжительность отклика 1 2, последний показатель считается основным. Качество проводимого тестирования во многом определяется тем, насколько адекватно тестовая среда воспроизводит функционирование ПБД, инфраструктуру информационной системы и саму рабочую нагрузку. В подавляющем большинстве случаев 310 тестовая среда представлена системами массового обслуживания, с разной степенью детализации и точности, отражающих процессы обработки данных в ПБД. Несмотря на большое число исследований, выполненных в этой области, на практике эти модели не получили широкого распространения ввиду недостаточной точности их предсказательных возможностей 3, что можно объяснить следующими обстоятельствами. В основе всех моделей лежат транзакции, представляющие собой запросы к базе данных, и некоторый алгоритм, в соответствии с которым транзакции выполняются той или иной серверной системой управления базой данных СУБД. При этом номенклатура разновидностей классов, типов транзакций может быть сколь угодно большой и варьироваться от одной предметной области к другой в достаточно широких пределах. То же самое относится к интенсивностям входящих транзакционных потоков, меняющихся с течением времени. При этом лишь небольшая часть классов транзакций отличается действительно высокими интенсивностями. Большинство из них инициируются эпизодически и могут не оказывать серьезного влияния на производительность ПБД, если задан и поддерживается, например, корректный регламент обслуживания таких транзакций. Отсюда одна из задач, возникающая при моделировании процессов обработки данных, локализация и формализация транзакций, характеризующихся наивысшей интенсивностью. Два других обстоятельствах, сказывающихся на качестве моделирования, высокие степени неоднозначности и изменчивости среды, которая призвана обеспечить выполнение транзакций. В последнее время наметилась тенденция к стремлению максимально оградить пользователя от участия в процессах, связанных с обработкой транзакций. По сути, разработчики СУБД инкапсулировали соответствующие алгоритмы и используемые структуры данных и исключили возможность заранее предугадать, насколько быстро и когда будет выполнена конкретная транзакция. В этом проявляется неоднозначность. Относительно изменчивости отметим следующее. Переход к очередным версиям СУБД или средам разработки прикладного программного обеспечения, если они существенным образом затронули технологии работы с транзакциями, могут свести к нулю и полученные ранее результаты моделирования, и сделать некорректными сами модели. Все перечисленное делает актуальным построение таких моделей, структура которых, во-первых, представлена неизменяемыми и в то же время существенными элементами, определяющими производительность, и, во-вторых, в состоянии воспроизвести и реальную промышленную нагрузку в виде потоков разнородных транзакций, и саму среду выполнения. Настоящая работа направлена на решение обозначенных выше задач. Основной резуль тат формирование рамочной модели, имитирующей процессы обработки данных в многопользовательских приложениях с централизованной базой данных. Модель должна позволять получить оценку продолжительности отклика клиент-серверной системы для заданных интенсивностей входящих потоков требований SQL-запросов и мощностей отношений баз данных. За время непродолжительной эволюции, насчитывающей несколько десятков лет, сформировались представления о том, какой должна быть эффективная организация архитектура ПБД. Архитектура, по сути, рамочно задает максимальные возможности системы, в том числе и предельные характеристики ее производительности. Возьмем за основу клиентсерверную архитектуру, ставшую сегодня де-факто стандартом для ПБД, и выделим в ней те элементы, которые будут существенно влиять на значения, принимаемые показателями производительности. Последние будут перечислены позднее. Клиент-серверная архитектура в зависимости от выбранного метода доступа может быть реализована в трех потенциальных вариантах отсоединенного доступа, прямого доступа и некоторой комбинации первых двух. На сегодняшний день отсоединенный режим считается наиболее предпочтительным по сравнению с режимом прямого доступа, так как позволяет получить значительный выигрыш в скорости выполнения запросов за счет сокращения времени блокировок ресурсов. Поэтому будем на него ориентироваться в дальнейшем. Отсоединенный доступ предполагает, что клиентское приложение соединяется с базой данных на непродолжительное время только для получения или записи информации и использует собственную подсхему для представления данных. Элементы такой архитектуры показаны на рис. 1. Функции двустороннего обмена и передачи запросов реализует поставщик данных. Определившись с базовыми элементами и конфигурацией моделируемой системы ПБД, покажем далее, что будет пониматься под производительностью. Большинство исследователей и практиков обоснованно считает 110, что производительность это время продолжительность отклика системы на запросы, поступающие от пользователей этой системой. Продолжительность в зависимости от структуры запросов и нагрузки на сервер может варьироваться в достаточно широких пределах от нескольких миллисекунд до часов. ПБД включает большое число разновидностей классов запросов, которые инициируются и выполняются в случайные моменты времени . Для описания входных потоков требований, каждый из которых ассоциируется с запросом, необходимо знать законы распределений случайных величин, образующих множество, . Продолжительность выполнения отдельного -го запроса также будет представлять собой случайную величину с неизвестным законом распределения. Логично для представленной архитектуры ПБД в качестве показателей производительности использовать ряд оценок распределений среднее время выполнения каждого класса категории запроса к БД, а также вероятность того, что эта продолжительность с заданной надежностью не выйдет за определенные границы, где дисперсия случайной величины предельное значение вероятности. Последний показатель дает возможность учесть разброс значений относительно . Это требование вытекает из практики. Мало кого устроит, например, если 30 запросов о состоянии банковского счета будет выполняться с продолжительностью 20 и более секунд. Это, конечно, условные цифры. Тем не менее заметим, что значения элементов множеств и могут рассматриваться в качестве требований к информационной системе ИС. Одна из главных сложностей построения моделей и последующего моделирования процессов обработки данных в ПБД многообразие конфигураций потенциальных запросов, которые могут присутствовать в программах, и, как одно из следствий, трудности с нахождеСУБД База данных БД нием частотных распределений . В действительности же массовые запросы, к которым будем относить запросы с наиболее высокими значениями входных интенсивностей, отличает стандартная конфигурация, вытекающая из стандартной архитектуры приложений, а также стандартной организации баз данных, представленной типизированными структурами. Поскольку в вопросе унификации массовых запросов типизация структур БД не менее важна, чем выбор архитектуры, изложим соображения и решения, касающиеся одной из возможных типизаций. Будем при этом руководствоваться назначением БД, которая призвана регистрировать факты, и способом, которым это делает СУБД. Факты это привязанные ко времени взаимодействия, устанавливающиеся между объектами, из которых состоят предметные области. Факты фиксируются в документах и в базах данных могут размещаться либо в документальных структурах, либо в слабых сущностях. Использование документальных структур более предпочтительно, так как исключается необходимость в дублировании однозначных атрибутов, характеризующих документы. В отличие от фактов, информация об объектах содержится в справочных структурах. Одним из признаков последних является присутствие в них семантических сведений либо ссылок на таковые, если используются семантические объекты. Если не углубляться в дальнейшую типизацию, которая несущественна для задач, решаемых в настоящей работе, структурную часть базы данных в своей основе составляют справочные и документальные структуры. Продемонстрируем сказанное на небольшом примере организации структур, содержащих данные об отметках, получаемых студентами в ходе сдачи ими экзаменов рис. 2. Возьмем за основу экзаменационную ведомость. Логическая модель документа представлена двумя документальными структурами Examinationrecord listHead и ExaminationrecordlistDetails, а также справочниками, которые поставляют семантику для записей документальных структур. Корректная работа с документом в информационной системе по умолчанию предполагает, что в произвольный момент времени доступ к документу имеет один и только один пользователь. В противном случае всегда есть риск получения рассогласованных данных. Отсюда элементарными, типичными и одновременно массовыми операциями, выполняемыми в ПБД, будут операции на получение чтение и корректировку запись данных, сосредоточенных в документальных структурах. Продемонстрируем общую структуру запросов, производящих чтение и запись данных рис. 3. DocumentHead заголовочная структура DocumentDetail содержательная структура Личности Дисциплины Отметки Подразделения Первая часть запроса обеспечивает получение данных из заголовочной таблицы структуры, вторая из содержательной. За ссылку на конкретный документ отвечает параметр и переменная Iddoc, которой предварительно присваивается значение идентификационного кода документа. Противоположный запрос, предназначенный уже для записи данных, может либо ограничиться инструкциями UPDATE и DELETE, если данные только обновлялись, либо включать два подзапроса один на удаление DELETE и один на вставку данных INSERT. Последний вариант может оказаться более эффективным с точки зрения производительности выполнения, так как количество записей, сосредоточенных в одном документе, в основном варьируется в незначительных пределах и в редких случаях превышает 100 единиц. Таким образом, каждому классу документа можно поставить в соответствие по одному стандартному запросу один на чтение данных, другой на запись. Присутствие входного потока требований в виде запросов, поступающих на сервер прибор обслуживания в случайные моменты времени, и необходимость в оценке продолжительности выполнения обслуживания этих запросов свидетельствуют в пользу применения в качестве математической модели исследуемого процесса системы массового обслуживания СМО. Согласно документации, описывающей организацию и функционирование таких распространенных СУБД, как ORACLE и MS SQL, СМО включает встроенную очередь с дисциплиной обслуживания FIFO первый пришел первым обслужен. Входящий поток требований представлен совокупностью локальных потоков, каждый из которых соответствует му запросному классу рис. 4. Применительно к каждому локальному потоку если брать в расчет характерный для конкретной предметной области временной интервал можно с высокой степенью уверенности утверждать, что поток обладает всеми признаками простейшего пуассоновского потока ординарностью, стационарностью и отсутствием последействия. Несмотря на то что в общем случае, это нестационарный пуассоновский процесс, характеризующийся совокупностью, соответствующих различным временным интервалам, для исследования производительности ПБД будем принимать в расчет интервал времени с максимальной интенсивностью. DocumentHead., Ref. DocumentHead Ref1 Refn DocumentHead.IddocIddoc DocumentDetail, Ref. DocumentDetail Ref1 Refn DocumentDetail.IddocIddoc Зная, можно получить количество запросов, которые будут поступать на сервер в течение заданного интервала времени. Но для имитации процесса обработки данных необходимы данные другого рода моменты времени поступления требований. Воспользуемся стандартным преобразованием, согласно которому, если входной поток является простейшим, то вероятность моментов времени поступления требований можно найти на основании экспоненциального распределения 1 . Тогда, интервал времени между поступлениями требований составит 1ln1, где случайное число, равномерно распределенное в интервале 0, 1. Поскольку 1 также равномерно распределенное число в том же интервале, можно произвести замену 1 на Неизвестной величиной в представленной модели окажутся случайные величины, законы распределения которых предстоит найти в ходе имитационных экспериментов с этой моделью. Как уже было замечено, одна из особенностей современных клиент-серверных СУБД состоит в максимальной степени их закрытости, что затрудняет организацию и проведение имитационных экспериментов. Закрытость, в частности, проявляется в том, что СУБД берут на себя полное управление дисциплиной и постановкой запросов в очередь. Поэтому задать время старта очередного запроса, что требуется условиями эксперимента, не прибегая к каким-то нестандартным программным решениям, крайне проблематично. Решить возникшее затруднение можно двумя способами либо запустить отдельные экземпляры приложений, включающих текст самого запроса и оператор, инициирующий выполнение запроса, либо воспользоваться потоками, обеспечивающими параллельное выполнение программ. В обоих случаях суммарное число и экземпляров, и потоков будет равно количеству запросов. В настоящей работе был реализован второй способ. Покажем принципиальное различие в использовании однопоточной и многопоточной архитектур программной системы, имитирующей поступление и выполнение запросов в ПБД рис. 5. Пусть и случайные моменты времени поступления на сервер запросов и соответственно, начало, а, завершение выполнения этих запросов. Если продолжительность выполнения запроса которая также является случайной величиной меньше, то, приостановив выполнение программы на, можно имиОчередь База данных тировать посредством какой-либо из команд используемого языка моделирования старт запроса . В противном случае время старта запроса будет всегда больше или равно, так как команда, инициирующая старт, не может быть выполнена до тех пор, пока не завершится выполнение команды, запускающей . В однопоточном программном коде все команды выполняются строго последовательно. Использование потоков позволяет избежать возникновения вынужденной задержки старта очередного запроса. Каждый запрос может быть выполнен в собственном потоке, и тогда всегда . Обратим внимание на то, что в силу наличия серверной очереди время старта очередного запроса это время, когда запрос поступил на сервер и занял место в очереди на выполнение. Ниже приводится текст программы на языке C листинг 1, имитирующей выполнение случайной последовательности запросов инкапсулированных в транзакции в потоках, со всеми необходимыми пояснениями. Моделирующая система разработана в среде Microsoft Visual Studio 2017 c использованием ADO.NET и СУБД MS SQL 2012. Листинг 1 foreach DataRowView GG in DV deltaT intGGDeltaT Thread.SleepdeltaT ThparCickle new Threadnew ParameterizedThreadStartThreadProc ListofParametrsLoP new ListofParametrsstringGGNamesp, parCickle, intGGAmmountrecords, charGGParametersYN ThparCickle.StartLoP parCickle 1 Старт запросов в однопоточном приложении Старт запросов в многопоточном приложении public static void ThreadProcObject Paramets DateTime start string strConn, startQuery, namesp Random Rand new Random ListofParametrsLoP new ListofParametrs LoP ListofParametrs Paramets namesp string LoP.Namesp int ammountrecords intLoP.Ammountrecords char parametersYN charLoP.ParametersYN inttransactionnumber int LoP.Nomertransaction strConn Data SourceISEInitial CatalogUniversityIntegrated SecurityTrue Connection Timeout200 PoolingFalse Asynchronous ProcessingTrue MultipleActiveResultsetstrue SqlTransaction myTransaction SqlConnection sqlCon SqlCommand sqlCom sqlCon new SqlConnectionstrConn sqlCon.Open myTransaction sqlCon.BeginTransactionConvert.ToStringtransactionnumber sqlCom new SqlCommand sqlCom.Connection sqlCon sqlCom.CommandText namesp sqlCom.CommandType CommandType.StoredProcedure sqlCom.CommandTimeout 0 if parametersYNY sqlCom.Parameters.AddWithValueIddoc,Rand.Next1,ammountrecords sqlCom.Transaction myTransaction sqlCom.ExecuteNonQuery sqlCom.Transaction.Commit sqlCom.Connection.Close Перед началом моделирования пользователь, посредством диалогового окна рис. 6, выбирает из списка хранимых процедур, содержащих откомпилированные тексты запросов, те из них, которые будут участвовать в эксперименте, и задает интенсивность их появления . Инициация начала эксперимента посредством нажатия кнопки старт приводит к выполнению модуля, который рассчитывает моменты времени поступления запросов на сервер. Полученные данные записываются в экземпляр GG класса DataRowView, который представляет собой последовательный список. Далее, в цикле на величину, определенную как разность между моментами времени старта смежных запросов, организуется задержка в основном потоке и создается отдельный параметризированный поток, которому передается имя процедуры, запускающей на выполнение очередной запрос. Инструкция создает такой поток, а метод этого потока, принимая набор входных параметров класс запроса, признак обращения к документальным или справочным таблицам и ряд других, перечисленных в структуре, инициирует выполнение запроса, посредством метода В теле метода выполняются следующие действия. Cначала создается набор инструментов, необходимых для выполнения запроса в потоке, а затем, с помощью инструкции, выполняется сам запрос Упомянутые инструменты это команды на создание и открытие соединения с базой данных и, а также инструкция myTransaction sqlCon.BeginTransactionConvert. ToStringtransactionnumber, создающая и запускающая внутри открытого соединения транзакцию. Имя хранимой процедуры присваивается свойству CommandText экземпляра sqlCom. Моменты времени начала и завершения выполнения транзакции запроса фиксируются средствами, предоставляемыми утилитой, входящей в пакет поставки MS SQL. Разработанная и реализованная модель обработки запросов для системы, состоящей из централизованной базы данных и клиентских приложений, позволяет решать многие задачи, связанные с организацией информационных систем и поиском эффективных механизмов управления последними. Ограничимся исследованием характеристик случайной величины, представляющей собой продолжительность времени обработки запроса, принадлежащего к классу документальных запросов. Одна из задач, решаемых в ходе экспериментов, получение распределений для различных дискретных значений и мощностей документальных структур . Везде далее значение будет соответствовать количеству записей, которые содержатся в заголовочной структуре. Количество записей, размещенных в содержательной структуре, составит 10 одной записи заголовочной структуры соответствует 10 записей содержательной В качестве характерного периода для индекс будем далее опускать примем промежуток времени продолжительностью в один час 3 600 000 мс, который характерен для достаточного большого числа предметных областей образовательных, почтовых, медицинских, банковских, торговых и многих других. Эксперименты показали следующее. 1. Ни один из возможных теоретических законов распределения случайной величины нормальное или логнормальное распределения не может быть использован для аппроксимации экспериментальных данных. Так, например, для 510 и 510 проверка по критерию Пирсона на соответствие нормальному закону показала, что 11367 0,95 13 5,89, где доверительный интервал, число степеней свободы. Для логнормального распределения 6392 0,95 12 5,23 . Вид полученных кривых рис. 7 также не соответствует экспоненциальному закону распределения продолжительности времени обслуживания, который фигурирует, например, в 3 6. Справедливости ради стоит заметить, что на первый план выходят не законы распределения времени обслуживания заявок, а перечисленные ранее характеристики таких распределений, участвующие в формировании критериев производительности ПБД, а также наборы управляющих параметров, которые в состоянии улучшить значения этих критериев. 2. нелинейно зависит от рис. 8. Это характерно только для тех диапазонов и, которые менялись в процессе экспериментов 510,1,2510, 510,1,2510 . Логарифмический рост среднего времени выполнения запросов объясним двумя моментами способностью СУБД параллельно выполнять часть запросов и тем, что суммарная продолжительность обслуживания всех запросов для всех значений ни разу не вышла за пределы 1 ч 3 600 000 мс. Существенное увеличение от 210 и выше приводило к зависанию сервера и соответственно к его неспособности обрабатывать поступающие заявки. Очевидно, что нахождение предельных параметров производительности клиент-сервер ных приложений одна из актуальных практических задач, которая может решаться посредством использования разработанной имитационной системы. 3. В связи с ростом накладных расходов операционной системы на поддержку программных потоков возрастание влекущее за собой увеличение общего числа потоков приводило к нарастанию запаздываний фактических моментов времени старта транзакций рис. 9 по отношению к расчетному времени, которое находилось для заданных потокам выделяется память, и требуется время, необходимое для их создания, управления и завершения 11 12. Эксперименты выполнялись на компьютере со следующими характеристиками процес сор IntelR Core TM i5-2400, CPU 3.1GHz, число ядер 4, объем оперативной памяти 4 ГБ. Использование вычислительной системы с более высокими характеристиками увеличивало корректную границу, в пределах которой транзакции стартовали в строго расчетное время. Можно заключить, что началу экспериментов с моделируемой системой должно предшествовать определение предельного значения для используемого вычислительного оборудования, при котором время старта последней транзакции не превысит 3 600 000 мс. Невыполнение данного условия говорит о необходимости выбора более производительного оборудования или использования иных, непоточных вычислительных моделей. Цель работы состояла в построении адекватной и по возможности простой модели, отражающей существенные аспекты клиент-серверного взаимодействия в приложениях баз данных и позволяющей за ограниченные сроки для заданных входных условий получать оценки производительности таких систем. Проведенные эксперименты показали пригодность модели для решения поставленной задачи, одновременно обнаружив сложности в ее реализации, связанные с ограниченной возможностью вычислительной системы, состоящей из одного или двух компьютеров, имитировать работу реальной вычислительной среды, включающей сервер баз данных и сколь угодно большое число клиентов. Возможности разработанной и реализованной в виде программного стенда модели не ограничиваются исследованием производительности ПБД. Перечислим задачи, которые актуальны и требуют решения исследование максимальных предельных возможностей программно-технической си стемы, реализующей функции приложений баз данных управление входными потоками требований, направленное на минимизацию продолжительности отклика системы конфигурирование параметров среды выполнения таких как блокировки, индексы, буферы, дисциплина очереди и т. д. под требуемые значения показателей производитель ности. 